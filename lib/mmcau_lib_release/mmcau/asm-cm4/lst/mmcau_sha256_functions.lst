ARM GAS  src/asm/mmcau_sha256_functions.s 			page 1


   1              	#*******************************************************************************
   2              	#*******************************************************************************
   3              	#
   4              	# Copyright (c) Freescale Semiconductor, Inc 2011.
   5              	#
   6              	# FILE NAME      : mmcau_sha256_functions.s
   7              	# VERSION        : $Id: mmcau_sha256_functions.s.rca 1.6 Thu Nov 21 14:18:00 2013 b40907 Experiment
   8              	# TYPE           : Source Cortex-Mx assembly library code
   9              	# DEPARTMENT     : MSG R&D Core and Platforms
  10              	# AUTHOR         : David Schimke
  11              	# AUTHOR'S EMAIL : David.Schimke@freescale.com
  12              	# -----------------------------------------------------------------------------
  13              	# Release history
  14              	# VERSION  Date       AUTHOR           DESCRIPTION
  15              	#          08-2010    David Schimke    Initial Release
  16              	#          12-2010    David Schimke    Remove "global" on data objects
  17              	#          01-2011    David Schimke    Header added
  18              	#          11-2013    Teejay Ciancio   Cleanup
  19              	#
  20              	#*******************************************************************************
  21              	#*******************************************************************************
  22              	
  23              	    .include "cau2_defines.hdr"
   1              	#ifndef _MMCAU_H_
   2              	#define _MMCAU_H_
   3              	
   4              	    .equ    TL,0
   5              	    .equ    TS,0
   6              	    .equ    CASR,0
   7              	    .equ    CAA,1
   8              	    .equ    CA0,2
   9              	    .equ    CA1,3
  10              	    .equ    CA2,4
  11              	    .equ    CA3,5
  12              	    .equ    CA4,6
  13              	    .equ    CA5,7
  14              	    .equ    CA6,8
  15              	    .equ    CA7,9
  16              	    .equ    CA8,10
  17              	    .equ    CNOP,0x000
  18              	    .equ    LDR,0x010
  19              	    .equ    STR,0x020
  20              	    .equ    ADR,0x030
  21              	    .equ    RADR,0x040
  22              	    .equ    ADRA,0x050
  23              	    .equ    XOR,0x060
  24              	    .equ    ROTL,0x070
  25              	    .equ    MVRA,0x080
  26              	    .equ    MVAR,0x090
  27              	    .equ    AESS,0x0a0
  28              	    .equ    AESIS,0x0b0
  29              	    .equ    AESC,0x0c0
  30              	    .equ    AESIC,0x0d0
  31              	    .equ    AESR,0x0e0
  32              	    .equ    AESIR,0x0f0
  33              	    .equ    DESR,0x100
  34              	    .equ    DESK,0x110
ARM GAS  src/asm/mmcau_sha256_functions.s 			page 2


  35              	    .equ    HASH,0x120
  36              	    .equ    SHS,0x130
  37              	    .equ    MDS,0x140
  38              	    .equ    SHS2,0x150
  39              	    .equ    ILL,0x1f0
  40              	    .equ    IP,8
  41              	    .equ    FP,4
  42              	    .equ    DC,1
  43              	    .equ    CP,2
  44              	    .equ    KSL1,0
  45              	    .equ    KSL2,1
  46              	    .equ    KSR1,2
  47              	    .equ    KSR2,3
  48              	    .equ    HFF,0
  49              	    .equ    HFG,1
  50              	    .equ    HFH,2
  51              	    .equ    HFI,3
  52              	    .equ    HFP,2
  53              	    .equ    HFC,4
  54              	    .equ    HFM,5
  55              	    .equ    HF2C,6
  56              	    .equ    HF2M,7
  57              	    .equ    HF2S,8
  58              	    .equ    HF2T,9
  59              	    .equ    HF2U,10
  60              	    .equ    HF2V,11
  61              	
  62              	#endif
  24              	    .equ    MMCAU_PPB_DIRECT,0xe0081000
  25              	    .equ    MMCAU_PPB_INDIRECT,0xe0081800
  26              	    .equ    MMCAU_1_CMD,0x80000000
  27              	    .equ    MMCAU_3_CMDS,0x80100200
  28              	
  29              	    .syntax unified
  30              	
  31              	#*******************************************************************************
  32              	#*******************************************************************************
  33              	#
  34              	# SHA256: Initializes the hash output and checks the CAU hardware revision
  35              	#   arguments
  36              	#           *output     pointer to 256-bit message digest output
  37              	#
  38              	#   calling convention
  39              	#   int     mmcau_sha256_initialize_output (const unsigned int *output)
  40              	
  41              	    .global _mmcau_sha256_initialize_output
  42              	    .global mmcau_sha256_initialize_output
  43              	    .type   mmcau_sha256_initialize_output, %function
  44              	    .align  4
  45              	
  46              	_mmcau_sha256_initialize_output:
  47              	mmcau_sha256_initialize_output:
  48              	
  49 0000 2DE9F001 	    stmdb   sp!, {r4-r8}                            @ save registers
  50              	
  51 0004 40F20001 	    movw    r1, #:lower16:sha256_initial_h          @ r1 -> initial data
  52 0008 C0F20001 	    movt    r1, #:upper16:sha256_initial_h
ARM GAS  src/asm/mmcau_sha256_functions.s 			page 3


  53              	
  54              	# copy initial data into message digest output buffer
  55 000c 91E8FE01 	    ldmia   r1, {r1-r8}                             @ get sha256_initial[0-7]
  56 0010 80E8FE01 	    stmia   r0, {r1-r8}                             @ copy to output[0-7]
  57              	
  58 0014 BDE8F001 	    ldmia   sp!, {r4-r8}                            @ restore registers
  59 0018 4FF00000 	    mov     r0, $0                                  @ clear return value in r0
  60 001c 7047     	    bx      lr
  61              	
  62              	#*******************************************************************************
  63              	#*******************************************************************************
  64              	#
  65              	# SHA256: Perform the hash for one or more input message blocks and generate the
  66              	#         message digest output
  67              	#
  68              	#   arguments
  69              	#           *msg_data     pointer to start of input message data
  70              	#           num_blks      number of 512-bit blocks to process
  71              	#           *sha256_state pointer to 256-bit message digest.
  72              	#
  73              	#   NOTE    Input message and digest output blocks must not overlap
  74              	#
  75              	#   calling convention
  76              	#   void    mmcau_sha256_hash_n (const unsigned char *msg_data,
  77              	#                                const int            num_blks,
  78              	#                                unsigned int        *sha256_state)
  79              	    .global _mmcau_sha256_hash_n
  80              	    .global mmcau_sha256_hash_n
  81              	    .type   mmcau_sha256_hash_n, %function
  82 001e 00BF     	    .align  4
  83              	
  84              	_mmcau_sha256_hash_n:
  85              	mmcau_sha256_hash_n:
  86              	
  87              	#  register allocation
  88              	# --------------------
  89              	#  r0      = scratch / input pointer (arg0)
  90              	#  r1      = scratch / input num_blks (arg1)
  91              	#  r2      = scratch / output pointer (arg2)
  92              	#  r3      = scratch
  93              	#  r4      = scratch
  94              	#  r5      = scratch / mmcau_1_cmd(HASH+HF2U)
  95              	#  r6      = scratch / mmcau_1_cmd(HASH+HF2V)
  96              	#  r7      = scratch / mmcau_1_cmd(SHS2)
  97              	#  r8      = scratch / mmcau_3_cmds(MVAR+CA8,HASH+HF2S,HASH+HF2M)
  98              	#  r9      = scratch / mmcau_3_cmds(ADRA+CA7,HASH+HF2T,HASH+HF2C)
  99              	# r10 (sl) = scratch / pointer to sha256_k
 100              	# r11 (fp) = scratch / loop counter
 101              	# r12 (ip) = pointer to MMCAU_PPB_DIRECT
 102              	# r14 (lr) = link reg / indirect_cmd(ADR+CA0)
 103              	
 104 0020 2DE9F01F 	    stmdb   sp!, {r4-ip}                            @ save registers on stack
 105              	
 106 0024 41F2000C 	    movw    ip, #:lower16:MMCAU_PPB_DIRECT          @ ip -> MMCAU_PPB_DIRECT
 107 0028 CEF2080C 	    movt    ip, #:upper16:MMCAU_PPB_DIRECT
 108              	
 109 002c D0B0     	    sub     sp, $320                                @ reserve stack space
ARM GAS  src/asm/mmcau_sha256_functions.s 			page 4


 110 002e 0592     	    str     r2, [sp, $20]                           @ save r2 on stack
 111 0030 8B46     	    mov     fp, r1                                  @ fp = num_blks
 112              	
 113              	# initialize the CAU data registers with the current contents of output[]
 114 0032 92E8FE01 	    ldmia   r2, {r1-r8}                             @ get output[0-7]
 115              	
 116 0036 0CF64809 	    add     r9, ip, $0x800+(LDR+CA0)<<2             @ r9 -> mmcau_1_cmd(LDR+CA0)
 117 003a 89E8FE01 	    stmia   r9, {r1-r8}                             @ load CA0-CA7
 118              	
 119              	# prepare for SHA256 operations register load
 120 003e 40F2000A 	    movw    sl, #:lower16:sha256_reg_data
 121 0042 C0F2000A 	    movt    sl, #:upper16:sha256_reg_data
 122 0046 CDF808A0 	    str     sl, [sp, $8]                            @ save sl on stack
 123              	
 124 004a 0DF11C09 	    add     r9,  sp, $28                            @ r9 -> stack copy of output
 125              	
 126 004e 00BF     	    .align  2
 127              	next_blk:
 128              	
 129 0050 89E8FE01 	    stmia   r9, {r1-r8}                             @ save output on stack
 130              	
 131              	# load registers needed for mmcau commands from sha256_reg_data:
 132 0054 DDF808A0 	    ldr     sl, [sp, $8]                            @ sl -> sha256_reg_data
 133 0058 9AE8E007 	    ldmia   sl, {r5-sl}                             @ setup sha256 operations
 134              	
 135              	
 136              	# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
 137              	#   i = 0;
 138              	#   for (j = 0; j < 16; j++, i++)
 139              	#   {
 140              	#       w[i] = byterev(input[i]);                          // copy m[i] to w[i]
 141              	#       *(MMCAU_PPB_INDIRECT + (LDR+CAA))  = w[i];         // +w[i]+h+SIGMA1(e)
 142              	#                                                          // add Ch(e,f,g)
 143              	#       *(MMCAU_PPB_DIRECT) = mmcau_3_cmds(ADRA+CA7,HASH+HF2T,HASH+HF2C);
 144              	#       *(MMCAU_PPB_INDIRECT + (ADR+CAA))  = sha256_k[i];  // +k[i]+t1+SIGMA0(e)
 145              	#                                                          // add Maj(a,b,c)
 146              	#       *(MMCAU_PPB_DIRECT) = mmcau_3_cmds(MVAR+CA8,HASH+HF2S,HASH+HF2M);
 147              	#       *(MMCAU_PPB_DIRECT) = mmcau_1_cmd(SHS2);           // shift registers
 148              	#   }
 149              	# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
 150              	
 151              	
 152              	# -- input 0
 153              	
 154 005c 50F8042B 	    ldr     r2, [r0], $4                            @ r2 = input[0]; r0++
 155 0060 11BA     	    rev     r1, r2                                  @ byte reverse
 156 0062 1091     	    str     r1, [sp, $64]                           @ w[0] (on stack) = m[0]
 157 0064 CCF84418 	    str     r1, [ip, $0x800+(LDR+CAA)<<2]           @ add w[i]
 158 0068 CCF80090 	    str     r9, [ip]                                @ +h,+SIGMA1(e),+Ch(e,f,g)
 159 006c 5AF8043B 	    ldr     r3, [sl], $4                            @ get k[1]; sl++
 160 0070 CCF8C438 	    str     r3, [ip, $0x800+(ADR+CAA)<<2]           @ add k[1]
 161 0074 CCF80080 	    str     r8, [ip]                                @ t1,+SIGMA0(e),+Maj(a,b,c)
 162 0078 CCF80070 	    str     r7, [ip]                                @ shift registers
 163              	
 164              	# -- repeat for inputs 1 to 15 -- (loop unrolled)
 165              	
 166 007c 50F8042B 	    ldr     r2, [r0], $4                            @ r2 = input[1]; r0++
ARM GAS  src/asm/mmcau_sha256_functions.s 			page 5


 167 0080 11BA     	    rev     r1, r2                                  @ byte reverse
 168 0082 5AF8043B 	    ldr     r3, [sl], $4                            @ get k[1]; sl++
 169 0086 CCF84418 	    str     r1, [ip, $0x800+(LDR+CAA)<<2]           @ add w[1]
 170 008a 1191     	    str     r1, [sp, $68]                           @ w[1] (on stack) = m[1]
 171 008c CCF80090 	    str     r9, [ip]                                @ +h,+SIGMA1(e),+Ch(e,f,g)
 172 0090 CCF8C438 	    str     r3, [ip, $0x800+(ADR+CAA)<<2]           @ add k[1]
 173 0094 CCF80080 	    str     r8, [ip]                                @ t1,+SIGMA0(e),+Maj(a,b,c)
 174 0098 CCF80070 	    str     r7, [ip]                                @ shift registers
 175              	
 176 009c 50F8042B 	    ldr     r2, [r0], $4                            @ r2 = input[2]; r0++
 177 00a0 11BA     	    rev     r1, r2                                  @ byte reverse
 178 00a2 5AF8043B 	    ldr     r3, [sl], $4                            @ get k[2]; sl++
 179 00a6 CCF84418 	    str     r1, [ip, $0x800+(LDR+CAA)<<2]           @ add w[2]
 180 00aa 1291     	    str     r1, [sp, $72]                           @ m[2] -> w[2] (on stack)
 181 00ac CCF80090 	    str     r9, [ip]                                @ +h,+SIGMA1(e),+Ch(e,f,g)
 182 00b0 CCF8C438 	    str     r3, [ip, $0x800+(ADR+CAA)<<2]           @ add k[2]
 183 00b4 CCF80080 	    str     r8, [ip]                                @ t1,+SIGMA0(e),+Maj(a,b,c)
 184 00b8 CCF80070 	    str     r7, [ip]                                @ shift registers
 185              	
 186 00bc 50F8042B 	    ldr     r2, [r0], $4                            @ r2 = input[3]; r0++
 187 00c0 11BA     	    rev     r1, r2                                  @ byte reverse
 188 00c2 5AF8043B 	    ldr     r3, [sl], $4                            @ get k[3]; sl++
 189 00c6 CCF84418 	    str     r1, [ip, $0x800+(LDR+CAA)<<2]           @ add w[3]
 190 00ca 1391     	    str     r1, [sp, $76]                           @ m[3] -> w[3] (on stack)
 191 00cc CCF80090 	    str     r9, [ip]                                @ +h,+SIGMA1(e),+Ch(e,f,g)
 192 00d0 CCF8C438 	    str     r3, [ip, $0x800+(ADR+CAA)<<2]           @ add k[3]
 193 00d4 CCF80080 	    str     r8, [ip]                                @ t1,+SIGMA0(e),+Maj(a,b,c)
 194 00d8 CCF80070 	    str     r7, [ip]                                @ shift registers
 195              	
 196 00dc 50F8042B 	    ldr     r2, [r0], $4                            @ r2 = input[4]; r0++
 197 00e0 11BA     	    rev     r1, r2                                  @ byte reverse
 198 00e2 5AF8043B 	    ldr     r3, [sl], $4                            @ get k[4]; sl++
 199 00e6 CCF84418 	    str     r1, [ip, $0x800+(LDR+CAA)<<2]           @ add w[4]
 200 00ea 1491     	    str     r1, [sp, $80]                           @ m[4] -> w[4] (on stack)
 201 00ec CCF80090 	    str     r9, [ip]                                @ +h,+SIGMA1(e),+Ch(e,f,g)
 202 00f0 CCF8C438 	    str     r3, [ip, $0x800+(ADR+CAA)<<2]           @ add k[4]
 203 00f4 CCF80080 	    str     r8, [ip]                                @ t1,+SIGMA0(e),+Maj(a,b,c)
 204 00f8 CCF80070 	    str     r7, [ip]                                @ shift registers
 205              	
 206 00fc 50F8042B 	    ldr     r2, [r0], $4                            @ r2 = input[5]; r0++
 207 0100 11BA     	    rev     r1, r2                                  @ byte reverse
 208 0102 5AF8043B 	    ldr     r3, [sl], $4                            @ get k[5]; sl++
 209 0106 CCF84418 	    str     r1, [ip, $0x800+(LDR+CAA)<<2]           @ add w[5]
 210 010a 1591     	    str     r1, [sp, $84]                           @ m[5] -> w[5] (on stack)
 211 010c CCF80090 	    str     r9, [ip]                                @ +h,+SIGMA1(e),+Ch(e,f,g)
 212 0110 CCF8C438 	    str     r3, [ip, $0x800+(ADR+CAA)<<2]           @ add k[5]
 213 0114 CCF80080 	    str     r8, [ip]                                @ t1,+SIGMA0(e),+Maj(a,b,c)
 214 0118 CCF80070 	    str     r7, [ip]                                @ shift registers
 215              	
 216 011c 50F8042B 	    ldr     r2, [r0], $4                            @ r2 = input[6]; r0++
 217 0120 11BA     	    rev     r1, r2                                  @ byte reverse
 218 0122 5AF8043B 	    ldr     r3, [sl], $4                            @ get k[6]; sl++
 219 0126 CCF84418 	    str     r1, [ip, $0x800+(LDR+CAA)<<2]           @ add w[6]
 220 012a 1691     	    str     r1, [sp, $88]                           @ m[6] -> w[6] (on stack)
 221 012c CCF80090 	    str     r9, [ip]                                @ +h,+SIGMA1(e),+Ch(e,f,g)
 222 0130 CCF8C438 	    str     r3, [ip, $0x800+(ADR+CAA)<<2]           @ add k[6]
 223 0134 CCF80080 	    str     r8, [ip]                                @ t1,+SIGMA0(e),+Maj(a,b,c)
ARM GAS  src/asm/mmcau_sha256_functions.s 			page 6


 224 0138 CCF80070 	    str     r7, [ip]                                @ shift registers
 225              	
 226 013c 50F8042B 	    ldr     r2, [r0], $4                            @ r2 = input[7]; r0++
 227 0140 11BA     	    rev     r1, r2                                  @ byte reverse
 228 0142 5AF8043B 	    ldr     r3, [sl], $4                            @ get k[7]; sl++
 229 0146 CCF84418 	    str     r1, [ip, $0x800+(LDR+CAA)<<2]           @ add w[7]
 230 014a 1791     	    str     r1, [sp, $92]                           @ m[7] -> w[7] (on stack)
 231 014c CCF80090 	    str     r9, [ip]                                @ +h,+SIGMA1(e),+Ch(e,f,g)
 232 0150 CCF8C438 	    str     r3, [ip, $0x800+(ADR+CAA)<<2]           @ add k[7]
 233 0154 CCF80080 	    str     r8, [ip]                                @ t1,+SIGMA0(e),+Maj(a,b,c)
 234 0158 CCF80070 	    str     r7, [ip]                                @ shift registers
 235              	
 236 015c 50F8042B 	    ldr     r2, [r0], $4                            @ r2 = input[8]; r0++
 237 0160 11BA     	    rev     r1, r2                                  @ byte reverse
 238 0162 5AF8043B 	    ldr     r3, [sl], $4                            @ get k[8]; sl++
 239 0166 CCF84418 	    str     r1, [ip, $0x800+(LDR+CAA)<<2]           @ add w[8]
 240 016a 1891     	    str     r1, [sp, $96]                           @ m[8] -> w[8] (on stack)
 241 016c CCF80090 	    str     r9, [ip]                                @ +h,+SIGMA1(e),+Ch(e,f,g)
 242 0170 CCF8C438 	    str     r3, [ip, $0x800+(ADR+CAA)<<2]           @ add k[8]
 243 0174 CCF80080 	    str     r8, [ip]                                @ t1,+SIGMA0(e),+Maj(a,b,c)
 244 0178 CCF80070 	    str     r7, [ip]                                @ shift registers
 245              	
 246 017c 50F8042B 	    ldr     r2, [r0], $4                            @ r2 = input[9]; r0++
 247 0180 11BA     	    rev     r1, r2                                  @ byte reverse
 248 0182 5AF8043B 	    ldr     r3, [sl], $4                            @ get k[9]; sl++
 249 0186 CCF84418 	    str     r1, [ip, $0x800+(LDR+CAA)<<2]           @ add w[9]
 250 018a 1991     	    str     r1, [sp, $100]                          @ m[9] -> w[9] (on stack)
 251 018c CCF80090 	    str     r9, [ip]                                @ +h,+SIGMA1(e),+Ch(e,f,g)
 252 0190 CCF8C438 	    str     r3, [ip, $0x800+(ADR+CAA)<<2]           @ add k[9]
 253 0194 CCF80080 	    str     r8, [ip]                                @ t1,+SIGMA0(e),+Maj(a,b,c)
 254 0198 CCF80070 	    str     r7, [ip]                                @ shift registers
 255              	
 256 019c 50F8042B 	    ldr     r2, [r0], $4                            @ r2 = input[10]; r0++
 257 01a0 11BA     	    rev     r1, r2                                  @ byte reverse
 258 01a2 5AF8043B 	    ldr     r3, [sl], $4                            @ get k[10]; sl++
 259 01a6 CCF84418 	    str     r1, [ip, $0x800+(LDR+CAA)<<2]           @ add w[10]
 260 01aa 1A91     	    str     r1, [sp, $104]                          @ m[10] -> w[10] (on stack
 261 01ac CCF80090 	    str     r9, [ip]                                @ +h,+SIGMA1(e),+Ch(e,f,g)
 262 01b0 CCF8C438 	    str     r3, [ip, $0x800+(ADR+CAA)<<2]           @ add k[10]
 263 01b4 CCF80080 	    str     r8, [ip]                                @ t1,+SIGMA0(e),+Maj(a,b,c)
 264 01b8 CCF80070 	    str     r7, [ip]                                @ shift registers
 265              	
 266 01bc 50F8042B 	    ldr     r2, [r0], $4                            @ r2 = input[11]; r0++
 267 01c0 11BA     	    rev     r1, r2                                  @ byte reverse
 268 01c2 5AF8043B 	    ldr     r3, [sl], $4                            @ get k[11]; sl++
 269 01c6 CCF84418 	    str     r1, [ip, $0x800+(LDR+CAA)<<2]           @ add w[11]
 270 01ca 1B91     	    str     r1, [sp, $108]                          @ m[11] -> w[11] (on stack
 271 01cc CCF80090 	    str     r9, [ip]                                @ +h,+SIGMA1(e),+Ch(e,f,g)
 272 01d0 CCF8C438 	    str     r3, [ip, $0x800+(ADR+CAA)<<2]           @ add k[11]
 273 01d4 CCF80080 	    str     r8, [ip]                                @ t1,+SIGMA0(e),+Maj(a,b,c)
 274 01d8 CCF80070 	    str     r7, [ip]                                @ shift registers
 275              	
 276 01dc 50F8042B 	    ldr     r2, [r0], $4                            @ r2 = input[12]; r0++
 277 01e0 11BA     	    rev     r1, r2                                  @ byte reverse
 278 01e2 5AF8043B 	    ldr     r3, [sl], $4                            @ get k[12]; sl++
 279 01e6 CCF84418 	    str     r1, [ip, $0x800+(LDR+CAA)<<2]           @ add w[12]
 280 01ea 1C91     	    str     r1, [sp, $112]                          @ m[12] -> w[12] (on stack
ARM GAS  src/asm/mmcau_sha256_functions.s 			page 7


 281 01ec CCF80090 	    str     r9, [ip]                                @ +h,+SIGMA1(e),+Ch(e,f,g)
 282 01f0 CCF8C438 	    str     r3, [ip, $0x800+(ADR+CAA)<<2]           @ add k[12]
 283 01f4 CCF80080 	    str     r8, [ip]                                @ t1,+SIGMA0(e),+Maj(a,b,c)
 284 01f8 CCF80070 	    str     r7, [ip]                                @ shift registers
 285              	
 286 01fc 50F8042B 	    ldr     r2, [r0], $4                            @ r2 = input[13]; r0++
 287 0200 11BA     	    rev     r1, r2                                  @ byte reverse
 288 0202 5AF8043B 	    ldr     r3, [sl], $4                            @ get k[13]; sl++
 289 0206 CCF84418 	    str     r1, [ip, $0x800+(LDR+CAA)<<2]           @ add w[13]
 290 020a 1D91     	    str     r1, [sp, $116]                          @ m[13] -> w[13] (on stack)
 291 020c CCF80090 	    str     r9, [ip]                                @ +h,+SIGMA1(e),+Ch(e,f,g)
 292 0210 CCF8C438 	    str     r3, [ip, $0x800+(ADR+CAA)<<2]           @ add k[13]
 293 0214 CCF80080 	    str     r8, [ip]                                @ t1,+SIGMA0(e),+Maj(a,b,c)
 294 0218 CCF80070 	    str     r7, [ip]                                @ shift registers
 295              	
 296 021c 50F8042B 	    ldr     r2, [r0], $4                            @ r2 = input[14]; r0++
 297 0220 11BA     	    rev     r1, r2                                  @ byte reverse
 298 0222 5AF8043B 	    ldr     r3, [sl], $4                            @ get k[14]; sl++
 299 0226 CCF84418 	    str     r1, [ip, $0x800+(LDR+CAA)<<2]           @ add w[14]
 300 022a 1E91     	    str     r1, [sp, $120]                          @ m[14] -> w[14] (on stack)
 301 022c CCF80090 	    str     r9, [ip]                                @ +h,+SIGMA1(e),+Ch(e,f,g)
 302 0230 CCF8C438 	    str     r3, [ip, $0x800+(ADR+CAA)<<2]           @ add k[14]
 303 0234 CCF80080 	    str     r8, [ip]                                @ t1,+SIGMA0(e),+Maj(a,b,c)
 304 0238 CCF80070 	    str     r7, [ip]                                @ shift registers
 305              	
 306 023c 50F8042B 	    ldr     r2, [r0], $4                            @ r2 = input[15]; r0++
 307 0240 11BA     	    rev     r1, r2                                  @ byte reverse
 308 0242 5AF8043B 	    ldr     r3, [sl], $4                            @ get k[15]; sl++
 309 0246 CCF84418 	    str     r1, [ip, $0x800+(LDR+CAA)<<2]           @ add w[15]
 310 024a 1F91     	    str     r1, [sp, $124]                          @ m[15] -> w[15] (on stack)
 311 024c CCF80090 	    str     r9, [ip]                                @ +h,+SIGMA1(e),+Ch(e,f,g)
 312 0250 CCF8C438 	    str     r3, [ip, $0x800+(ADR+CAA)<<2]           @ add k[15]
 313 0254 CCF80080 	    str     r8, [ip]                                @ t1,+SIGMA0(e),+Maj(a,b,c)
 314 0258 CCF80070 	    str     r7, [ip]                                @ shift registers
 315              	
 316              	
 317              	# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
 318              	#   for (j = 0; j < 48; j++, i++)
 319              	#   {
 320              	#       *(MMCAU_PPB_INDIRECT + (LDR+CAA))  = w[i-16];       // [i-16]
 321              	#       *(MMCAU_PPB_INDIRECT + (LDR+CA8))  = w[i-15];       // [i-15]
 322              	#       *(MMCAU_PPB_DIRECT) = mmcau_1_cmd(HASH+HF2U);       // + Sigma2(w[i-15])
 323              	#       *(MMCAU_PPB_INDIRECT + (ADR+CAA))  = w[i-7];        // add w[i-7]
 324              	#       *(MMCAU_PPB_INDIRECT + (LDR+CA8))  = w[i-2];        // load w[i-2]
 325              	#       *(MMCAU_PPB_DIRECT) = mmcau_1_cmd(HASH+HF2V);       // + Sigma1(w[i-2])
 326              	#       w[i] = *(MMCAU_PPB_INDIRECT + (STR+CAA));           // store w[i]
 327              	#       *(MMCAU_PPB_DIRECT) = mmcau_3_cmds(ADRA+CA7,HASH+HF2T,HASH+HF2C);
 328              	#       *(MMCAU_PPB_INDIRECT + (ADR+CAA))  = sha256_k[i];   // add k[i]
 329              	#       *(MMCAU_PPB_DIRECT) = mmcau_3_cmds(MVAR+CA8,HASH+HF2S,HASH+HF2M);
 330              	#       *(MMCAU_PPB_DIRECT) = mmcau_1_cmd(SHS2);            // shift registers
 331              	#   }
 332              	# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
 333              	
 334 025c 4FF03002 	    mov     r2, $48                                 @ loop end
 335 0260 20AB     	    add     r3, sp, $128                            @ r3 -> w[16]
 336              	
 337 0262 00BF     	    .align  2
ARM GAS  src/asm/mmcau_sha256_functions.s 			page 8


 338              	loop:
 339 0264 53F8401C 	    ldr     r1, [r3, $(-16<<2)]                     @ get w[i-16] off stack
 340 0268 CCF84418 	    str     r1, [ip, $0x800+(LDR+CAA)<<2]           @ CAA  = w[i-16]
 341 026c 53F83C1C 	    ldr     r1, [r3, $(-15<<2)]                     @ get w[i-15] off stack
 342 0270 CCF86818 	    str     r1, [ip, $0x800+(LDR+CA8)<<2]           @ CA8  = w[i-15]
 343 0274 CCF80050 	    str     r5, [ip]                                @ (HASH+HF2U)
 344 0278 53F81C1C 	    ldr     r1, [r3, $(-7<<2)]                      @ get w[i-7] off stack
 345 027c CCF8C418 	    str     r1, [ip, $0x800+(ADR+CAA)<<2]           @ CAA += w[i-7]
 346 0280 53F8081C 	    ldr     r1, [r3, $(-2<<2)]                      @ get w[i-2] off stack
 347 0284 CCF86818 	    str     r1, [ip, $0x800+(LDR+CA8)<<2]           @ CA8  = w[i-2]
 348 0288 CCF80060 	    str     r6, [ip]                                @ (HASH+HF2V)
 349 028c DCF88418 	    ldr     r1, [ip, $0x800+(STR+CAA)<<2]           @ r1 = w[i] [STR+CAA]
 350 0290 43F8041B 	    str     r1, [r3], $4                            @ store w[i] on stack; r3++
 351 0294 CCF80090 	    str     r9, [ip]                                @ +h, SIGMA1(e) & Ch(e,f,g)
 352 0298 5AF8041B 	    ldr     r1, [sl], $4                            @ get k[i]; sl++
 353 029c CCF8C418 	    str     r1, [ip, $0x800+(ADR+CAA)<<2]           @ add k[i]
 354 02a0 CCF80080 	    str     r8, [ip]                                @ t1, +SIGMA0(e) +Maj(a,b,c)
 355 02a4 CCF80070 	    str     r7, [ip]                                @ shift registers
 356 02a8 013A     	    subs    r2, $1                                  @ decrement loop count
 357 02aa DBD1     	    bne.n   loop
 358              	
 359 02ac 0DF11C09 	    add     r9, sp, $28                             @ r9 = output[0] on stack
 360 02b0 0CF6C80A 	    add     sl, ip, $0x800+(ADR+CA0)<<2             @ r8 = indirect_cmd(ADR+CA0)
 361 02b4 99E8FE01 	    ldmia   r9, {r1-r8}                             @ get current outputs
 362 02b8 8AE8FE01 	    stmia   sl, {r1-r8}                             @ add output[i] to CA[i]
 363 02bc 0CF6880A 	    add     sl, ip, $0x800+(STR+CA0)<<2             @ sl = indirect_cmd(STR+CA0)
 364 02c0 9AE8FE01 	    ldmia   sl, {r1-r8}                             @ get new CA[i]; i = 0-7
 365              	
 366 02c4 BBF1010B 	    subs    fp, $1                                  @ decrement num_blks
 367 02c8 7FF4C2AE 	    bne     next_blk
 368              	
 369 02cc DDF81490 	    ldr     r9, [sp, $20]                           @ get saved output pointer
 370 02d0 50B0     	    add     sp, $320                                @ restore stack
 371 02d2 89E8FE01 	    stmia   r9, {r1-r8}                             @ store CA[i] to output[i]
 372 02d6 BDE8F01F 	    ldmia   sp!, {r4-ip}                            @ restore regs and return
 373 02da 7047     	    bx      lr
 374              	
 375              	#*******************************************************************************
 376              	#*******************************************************************************
 377              	#
 378              	# SHA256: Updates SHA256 state variables for one or more input message blocks
 379              	#
 380              	#   arguments:
 381              	#           *msg_data     pointer to start of input message data
 382              	#           num_blks      number of 512-bit blocks to process
 383              	#           *sha256_state pointer to 256-bit message digest.
 384              	#
 385              	#   calling convention
 386              	#   void    mmcau_sha256_update (const unsigned char *msg_data,
 387              	#                                const int            num_blks,
 388              	#                                unsigned int        *sha256_state)
 389              	
 390              	
 391              	    .global _mmcau_sha256_update
 392              	    .global mmcau_sha256_update
 393              	    .type   mmcau_sha256_update, %function
 394 02dc AFF30080 	    .align  4
ARM GAS  src/asm/mmcau_sha256_functions.s 			page 9


 395              	
 396              	_mmcau_sha256_update:
 397              	mmcau_sha256_update:
 398              	
 399 02e0 2DE9F04F 	    stmdb   sp!, {r4-fp, lr}                        @ save registers on stack
 400              	
 401 02e4 40F20004 	    movw    r4, #:lower16:sha256_initial_h          @ r4 -> initial data
 402 02e8 C0F20004 	    movt    r4, #:upper16:sha256_initial_h
 403              	
 404              	# copy initial data into hash output buffer
 405 02ec 94E8F00F 	    ldmia   r4, {r4-fp}                             @ get sha256[0-7]
 406 02f0 82E8F00F 	    stmia   r2, {r4-fp}                             @ copy to sha256_state[0-7]
 407              	
 408 02f4 FFF7FEFF 	    bl      mmcau_sha256_hash_n                     @ call hash_n routine
 409              	
 410 02f8 BDE8F08F 	    ldmia   sp!, {r4-fp,pc}                         @ restore regs and return
 411              	
 412              	
 413              	#*******************************************************************************
 414              	#*******************************************************************************
 415              	#
 416              	# SHA256: Perform the hash and generate SHA256 state variables for one input
 417              	#       message block.
 418              	#
 419              	#   arguments
 420              	#           *msg_data     pointer to start of input message data
 421              	#           *sha256_state pointer to 256-bit message digest.
 422              	#
 423              	#   NOTE    Input message and digest output blocks must not overlap
 424              	#
 425              	#   calling convention
 426              	#   void    mmcau_sha256_hash (const unsigned char *msg_data,
 427              	#                              unsigned int        *sha256_state)
 428              	
 429              	    .global _mmcau_sha256_hash
 430              	    .global mmcau_sha256_hash
 431              	    .type   mmcau_sha256_hash, %function
 432 02fc AFF30080 	    .align  4
 433              	
 434              	_mmcau_sha256_hash:
 435              	mmcau_sha256_hash:
 436              	
 437 0300 0A46     	    mov     r2, r1                                  @ move arg1 to arg2
 438 0302 4FF00101 	    mov     r1, $1                                  @ set arg1 = 1
 439 0306 FEE7     	    b       mmcau_sha256_hash_n                     @ use hash_n w/num_blks = 1
 440              	
 441              	#*******************************************************************************
 442              	
 443 0308 AFF30080 	    .data
 443      AFF30080 
 444              	    .type   sha256_reg_data, %object
 445              	    .align  4
 446              	
 447              	sha256_reg_data:
 448 0000 000080CA 	    .word   MMCAU_1_CMD+(HASH+HF2U)<<22                          @ r5
 449 0004 0000C0CA 	    .word   MMCAU_1_CMD+(HASH+HF2V)<<22                          @ r6
 450 0008 000000D4 	    .word   MMCAU_1_CMD+(SHS2)<<22                               @ r7
ARM GAS  src/asm/mmcau_sha256_functions.s 			page 10


 451 000c 274399A6 	    .word   MMCAU_3_CMDS+(MVAR+CA8)<<22+(HASH+HF2S)<<11+HASH+HF2M @ r8
 452 0010 264B5996 	    .word   MMCAU_3_CMDS+(ADRA+CA7)<<22+(HASH+HF2T)<<11+HASH+HF2C @ r9
 453 0014 40000000 	    .word   sha256_k                                            @ sl
 454              	
 455              	    .type   sha256_initial_h, %object
 456 0018 00000000 	    .align  4
 456      00000000 
 457              	
 458              	sha256_initial_h:
 459 0020 67E6096A 	    .word   0x6a09e667
 460 0024 85AE67BB 	    .word   0xbb67ae85
 461 0028 72F36E3C 	    .word   0x3c6ef372
 462 002c 3AF54FA5 	    .word   0xa54ff53a
 463 0030 7F520E51 	    .word   0x510e527f
 464 0034 8C68059B 	    .word   0x9b05688c
 465 0038 ABD9831F 	    .word   0x1f83d9ab
 466 003c 19CDE05B 	    .word   0x5be0cd19
 467              	
 468              	    .type   sha256_k, %object
 469              	    .align  4
 470              	
 471              	sha256_k:
 472 0040 982F8A42 	    .word   0x428a2f98
 473 0044 91443771 	    .word   0x71374491
 474 0048 CFFBC0B5 	    .word   0xb5c0fbcf
 475 004c A5DBB5E9 	    .word   0xe9b5dba5
 476 0050 5BC25639 	    .word   0x3956c25b
 477 0054 F111F159 	    .word   0x59f111f1
 478 0058 A4823F92 	    .word   0x923f82a4
 479 005c D55E1CAB 	    .word   0xab1c5ed5
 480 0060 98AA07D8 	    .word   0xd807aa98
 481 0064 015B8312 	    .word   0x12835b01
 482 0068 BE853124 	    .word   0x243185be
 483 006c C37D0C55 	    .word   0x550c7dc3
 484 0070 745DBE72 	    .word   0x72be5d74
 485 0074 FEB1DE80 	    .word   0x80deb1fe
 486 0078 A706DC9B 	    .word   0x9bdc06a7
 487 007c 74F19BC1 	    .word   0xc19bf174
 488 0080 C1699BE4 	    .word   0xe49b69c1
 489 0084 8647BEEF 	    .word   0xefbe4786
 490 0088 C69DC10F 	    .word   0x0fc19dc6
 491 008c CCA10C24 	    .word   0x240ca1cc
 492 0090 6F2CE92D 	    .word   0x2de92c6f
 493 0094 AA84744A 	    .word   0x4a7484aa
 494 0098 DCA9B05C 	    .word   0x5cb0a9dc
 495 009c DA88F976 	    .word   0x76f988da
 496 00a0 52513E98 	    .word   0x983e5152
 497 00a4 6DC631A8 	    .word   0xa831c66d
 498 00a8 C82703B0 	    .word   0xb00327c8
 499 00ac C77F59BF 	    .word   0xbf597fc7
 500 00b0 F30BE0C6 	    .word   0xc6e00bf3
 501 00b4 4791A7D5 	    .word   0xd5a79147
 502 00b8 5163CA06 	    .word   0x06ca6351
 503 00bc 67292914 	    .word   0x14292967
 504 00c0 850AB727 	    .word   0x27b70a85
 505 00c4 38211B2E 	    .word   0x2e1b2138
 506 00c8 FC6D2C4D 	    .word   0x4d2c6dfc
ARM GAS  src/asm/mmcau_sha256_functions.s 			page 11


 507 00cc 130D3853 	    .word   0x53380d13
 508 00d0 54730A65 	    .word   0x650a7354
 509 00d4 BB0A6A76 	    .word   0x766a0abb
 510 00d8 2EC9C281 	    .word   0x81c2c92e
 511 00dc 852C7292 	    .word   0x92722c85
 512 00e0 A1E8BFA2 	    .word   0xa2bfe8a1
 513 00e4 4B661AA8 	    .word   0xa81a664b
 514 00e8 708B4BC2 	    .word   0xc24b8b70
 515 00ec A3516CC7 	    .word   0xc76c51a3
 516 00f0 19E892D1 	    .word   0xd192e819
 517 00f4 240699D6 	    .word   0xd6990624
 518 00f8 85350EF4 	    .word   0xf40e3585
 519 00fc 70A06A10 	    .word   0x106aa070
 520 0100 16C1A419 	    .word   0x19a4c116
 521 0104 086C371E 	    .word   0x1e376c08
 522 0108 4C774827 	    .word   0x2748774c
 523 010c B5BCB034 	    .word   0x34b0bcb5
 524 0110 B30C1C39 	    .word   0x391c0cb3
 525 0114 4AAAD84E 	    .word   0x4ed8aa4a
 526 0118 4FCA9C5B 	    .word   0x5b9cca4f
 527 011c F36F2E68 	    .word   0x682e6ff3
 528 0120 EE828F74 	    .word   0x748f82ee
 529 0124 6F63A578 	    .word   0x78a5636f
 530 0128 1478C884 	    .word   0x84c87814
 531 012c 0802C78C 	    .word   0x8cc70208
 532 0130 FAFFBE90 	    .word   0x90befffa
 533 0134 EB6C50A4 	    .word   0xa4506ceb
 534 0138 F7A3F9BE 	    .word   0xbef9a3f7
 535 013c F27871C6 	    .word   0xc67178f2
