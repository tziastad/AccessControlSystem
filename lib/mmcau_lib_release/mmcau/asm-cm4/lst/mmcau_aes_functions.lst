ARM GAS  src/asm/mmcau_aes_functions.s 			page 1


   1              	#*******************************************************************************
   2              	#*******************************************************************************
   3              	#
   4              	# Copyright (c) Freescale Semiconductor, Inc 2011.
   5              	#
   6              	# FILE NAME      : mmcau_aes_functions.s
   7              	# VERSION        : $Id: mmcau_aes_functions.s.rca 1.4 Thu Nov 21 14:17:01 2013 b40907 Experimental 
   8              	# TYPE           : Source Cortex-Mx assembly library code
   9              	# DEPARTMENT     : MSG R&D Core and Platforms
  10              	# AUTHOR         : David Schimke
  11              	# AUTHOR'S EMAIL : David.Schimke@freescale.com
  12              	# AUTHOR         : Anthony (Teejay) Ciancio
  13              	# AUTHOR'S EMAIL : teejay.ciancio@freescale.com
  14              	# -----------------------------------------------------------------------------
  15              	# Release history
  16              	# VERSION  Date       AUTHOR           DESCRIPTION
  17              	#          08-2010    David Schimke    Initial Release
  18              	#          12-2010    David Schimke    Remove "global" on data objects
  19              	#          01-2011    David Schimke    Add byte reverse to correct double word
  20              	#                                      read of byte arrays for little endian,
  21              	#                                      header added
  22              	#          11-2013    Teejay Ciancio   Small performance improvements to
  23              	#                                      set_key and decrypt; also, some cleanup
  24              	#
  25              	#*******************************************************************************
  26              	#*******************************************************************************
  27              	
  28              	    .include "cau2_defines.hdr"
   1              	#ifndef _MMCAU_H_
   2              	#define _MMCAU_H_
   3              	
   4              	    .equ    TL,0
   5              	    .equ    TS,0
   6              	    .equ    CASR,0
   7              	    .equ    CAA,1
   8              	    .equ    CA0,2
   9              	    .equ    CA1,3
  10              	    .equ    CA2,4
  11              	    .equ    CA3,5
  12              	    .equ    CA4,6
  13              	    .equ    CA5,7
  14              	    .equ    CA6,8
  15              	    .equ    CA7,9
  16              	    .equ    CA8,10
  17              	    .equ    CNOP,0x000
  18              	    .equ    LDR,0x010
  19              	    .equ    STR,0x020
  20              	    .equ    ADR,0x030
  21              	    .equ    RADR,0x040
  22              	    .equ    ADRA,0x050
  23              	    .equ    XOR,0x060
  24              	    .equ    ROTL,0x070
  25              	    .equ    MVRA,0x080
  26              	    .equ    MVAR,0x090
  27              	    .equ    AESS,0x0a0
  28              	    .equ    AESIS,0x0b0
  29              	    .equ    AESC,0x0c0
ARM GAS  src/asm/mmcau_aes_functions.s 			page 2


  30              	    .equ    AESIC,0x0d0
  31              	    .equ    AESR,0x0e0
  32              	    .equ    AESIR,0x0f0
  33              	    .equ    DESR,0x100
  34              	    .equ    DESK,0x110
  35              	    .equ    HASH,0x120
  36              	    .equ    SHS,0x130
  37              	    .equ    MDS,0x140
  38              	    .equ    SHS2,0x150
  39              	    .equ    ILL,0x1f0
  40              	    .equ    IP,8
  41              	    .equ    FP,4
  42              	    .equ    DC,1
  43              	    .equ    CP,2
  44              	    .equ    KSL1,0
  45              	    .equ    KSL2,1
  46              	    .equ    KSR1,2
  47              	    .equ    KSR2,3
  48              	    .equ    HFF,0
  49              	    .equ    HFG,1
  50              	    .equ    HFH,2
  51              	    .equ    HFI,3
  52              	    .equ    HFP,2
  53              	    .equ    HFC,4
  54              	    .equ    HFM,5
  55              	    .equ    HF2C,6
  56              	    .equ    HF2M,7
  57              	    .equ    HF2S,8
  58              	    .equ    HF2T,9
  59              	    .equ    HF2U,10
  60              	    .equ    HF2V,11
  61              	
  62              	#endif
  29              	    .equ    MMCAU_PPB_DIRECT,  0xe0081000
  30              	    .equ    MMCAU_PPB_INDIRECT,0xe0081800
  31              	    .equ    MMCAU_1_CMD,       0x80000000
  32              	    .equ    MMCAU_2_CMDS,      0x80100000
  33              	    .equ    MMCAU_3_CMDS,      0x80100200
  34              	
  35              	    .syntax unified
  36              	
  37              	#*******************************************************************************
  38              	#*******************************************************************************
  39              	#
  40              	# AES: Performs an AES key expansion
  41              	#   arguments
  42              	#           *key        pointer to input key (128, 192, 256 bits in length)
  43              	#           key_size    key_size in bits (128, 192, 256)
  44              	#           *key_sch    pointer to key schedule output (44, 52, 60 longwords)
  45              	#
  46              	#   calling convention
  47              	#   void    mmcau_aes_set_key (const unsigned char *key,
  48              	#                              const int            key_size,
  49              	#                              unsigned char       *key_sch)
  50              	
  51              	#  register allocation
  52              	# --------------------
ARM GAS  src/asm/mmcau_aes_functions.s 			page 3


  53              	#  r0      = scratch / input  *key (arg0)
  54              	#  r1      = scratch / input  size (arg1)
  55              	#  r2      = scratch / output *key_sch (arg2)
  56              	#  r3      = scratch
  57              	#  r4      = scratch
  58              	#  r5      = scratch
  59              	#  r6      = scratch
  60              	#  r7      = scratch
  61              	#  r8      = scratch
  62              	#  r9      = scratch
  63              	# r10 (sl) = scratch / pointer to rcon
  64              	# r11 (fp) = scratch / mmcau_1_cmd(AESS+CAA)
  65              	# r12 (ip) = scratch / MMCAU_PPB_DIRECT
  66              	# r13 (sp) = stack pointer
  67              	# r14 (lr) = scratch / link register
  68              	
  69              	    .global _mmcau_aes_set_key
  70              	    .global mmcau_aes_set_key
  71              	    .type   mmcau_aes_set_key, %function
  72              	    .align  4
  73              	
  74              	_mmcau_aes_set_key:
  75              	mmcau_aes_set_key:
  76              	
  77 0000 2DE9F05F 	    stmdb   sp!, {r4-ip,lr}                         @ save registers on stack
  78              	
  79              	# prepare for AES operations register load
  80 0004 40F20008 	    movw    r8, #:lower16:setkey_reg_data
  81 0008 C0F20008 	    movt    r8, #:upper16:setkey_reg_data
  82              	
  83 000c F0C8     	    ldmia   r0!, {r4-r7}                            @ copy key[0-3]
  84 000e 24BA     	    rev     r4, r4                                  @ byte reverse
  85 0010 2DBA     	    rev     r5, r5                                  @ byte reverse
  86 0012 36BA     	    rev     r6, r6                                  @ byte reverse
  87 0014 3FBA     	    rev     r7, r7                                  @ byte reverse
  88 0016 F0C2     	    stmia   r2!, {r4-r7}                            @ to key_sch[0-3]
  89              	
  90              	# load registers needed for mmcau commands from setkey_reg_data:
  91 0018 98E8001C 	    ldmia   r8, {sl-ip}                             @ setup AES operations
  92              	
  93 001c 8029     	    cmp     r1, #128                                @ if key_size = 128
  94 001e 00F0D781 	    beq     expand_128                              @ then go expand_128
  95 0022 C029     	    cmp     r1, #192                                @ else if size = 192
  96 0024 00F0FF80 	    beq     expand_192                              @ then go expand_192
  97              	
  98              	expand_256:
  99 0028 90E80A03 	    ldmia   r0, {r1,r3,r8-r9}                       @ copy key[4-7]
 100 002c 09BA     	    rev     r1, r1                                  @ byte reverse
 101 002e 1BBA     	    rev     r3, r3                                  @ byte reverse
 102 0030 98FA88F8 	    rev     r8, r8                                  @ byte reverse
 103 0034 99FA89F9 	    rev     r9, r9                                  @ byte reverse
 104 0038 A2E80A03 	    stmia   r2!, {r1,r3,r8-r9}                      @ to key_sch[4-7]
 105              	
 106              	
 107 003c 5AF8040B 	    ldr     r0, [sl], $4                            @ get rcon[0]; sl++
 108 0040 4FEA396E 	    ror     lr, r9, $24                             @ rotate left by 8
 109 0044 CCF844E8 	    str     lr, [ip, $0x800+(LDR+CAA)<<2]           @ ROTL(key_sch[7])-> acc
ARM GAS  src/asm/mmcau_aes_functions.s 			page 4


 110 0048 CCF800B0 	    str     fp, [ip]                                @ AES SubBytes
 111 004c DCF884E8 	    ldr     lr, [ip, $0x800+(STR+CAA)<<2]           @ get CAA
 112 0050 8EEA000E 	    eor     lr, r0                                  @ XOR rcon[0]
 113              	
 114              	# calculation for key_sch[8-11]
 115 0054 84EA0E04 	    eor     r4, lr                                  @ XOR key_sch[0]
 116 0058 85EA0405 	    eor     r5, r4                                  @ key_sch[1]^key_sch[8]
 117 005c 86EA0506 	    eor     r6, r5                                  @ key_sch[2]^key_sch[9]
 118 0060 87EA0607 	    eor     r7, r6                                  @ key_sch[3]^key_sch[10]
 119 0064 F0C2     	    stmia   r2!, {r4-r7}                            @ store key_sch[8-11]
 120              	
 121 0066 CCF84478 	    str     r7, [ip, $0x800+(LDR+CAA)<<2]           @ ROTL(key_sch[11])-> acc
 122 006a CCF800B0 	    str     fp, [ip]                                @ AES SubBytes
 123 006e DCF884E8 	    ldr     lr, [ip, $0x800+(STR+CAA)<<2]           @ get CAA
 124              	
 125              	# calculation for key_sch[12-15]
 126 0072 81EA0E01 	    eor     r1, lr                                  @ XOR key_sch[4]
 127 0076 83EA0103 	    eor     r3, r1                                  @ key_sch[5]^key_sch[12]
 128 007a 88EA0308 	    eor     r8, r3                                  @ key_sch[6]^key_sch[13]
 129 007e 89EA0809 	    eor     r9, r8                                  @ key_sch[7]^key_sch[14]
 130 0082 A2E80A03 	    stmia   r2!, {r1,r3,r8-r9}                      @ store key_sch[12-15]
 131              	
 132 0086 5AF8040B 	    ldr     r0, [sl], $4                            @ get rcon[1]; sl++
 133 008a 4FEA396E 	    ror     lr, r9, $24                             @ rotate left by 8
 134 008e CCF844E8 	    str     lr, [ip, $0x800+(LDR+CAA)<<2]           @ ROTL(key_sch[15])-> acc
 135 0092 CCF800B0 	    str     fp, [ip]                                @ AES SubBytes
 136 0096 DCF884E8 	    ldr     lr, [ip, $0x800+(STR+CAA)<<2]           @ get CAA
 137 009a 8EEA000E 	    eor     lr, r0                                  @ XOR rcon[1]
 138              	
 139              	# calculation for key_sch[16-19]
 140 009e 84EA0E04 	    eor     r4, lr                                  @ XOR key_sch[8]
 141 00a2 85EA0405 	    eor     r5, r4                                  @ key_sch[9]^key_sch[16]
 142 00a6 86EA0506 	    eor     r6, r5                                  @ key_sch[10]^key_sch[17]
 143 00aa 87EA0607 	    eor     r7, r6                                  @ key_sch[11]^key_sch[18]
 144 00ae F0C2     	    stmia   r2!, {r4-r7}                            @ store key_sch[16-19]
 145              	
 146 00b0 CCF84478 	    str     r7, [ip, $0x800+(LDR+CAA)<<2]           @ ROTL(key_sch[19])-> acc
 147 00b4 CCF800B0 	    str     fp, [ip]                                @ AES SubBytes
 148 00b8 DCF884E8 	    ldr     lr, [ip, $0x800+(STR+CAA)<<2]           @ get CAA
 149              	
 150              	# calculation for key_sch[20-23]
 151 00bc 81EA0E01 	    eor     r1, lr                                  @ XOR key_sch[12]
 152 00c0 83EA0103 	    eor     r3, r1                                  @ key_sch[13]^key_sch[20]
 153 00c4 88EA0308 	    eor     r8, r3                                  @ key_sch[14]^key_sch[21]
 154 00c8 89EA0809 	    eor     r9, r8                                  @ key_sch[15]^key_sch[22]
 155 00cc A2E80A03 	    stmia   r2!, {r1,r3,r8-r9}                      @ store key_sch[20-23]
 156              	
 157 00d0 5AF8040B 	    ldr     r0, [sl], $4                            @ get rcon[2]; sl++
 158 00d4 4FEA396E 	    ror     lr, r9, $24                             @ rotate left by 8
 159 00d8 CCF844E8 	    str     lr, [ip, $0x800+(LDR+CAA)<<2]           @ ROTL(key_sch[23])-> acc
 160 00dc CCF800B0 	    str     fp, [ip]                                @ AES SubBytes
 161 00e0 DCF884E8 	    ldr     lr, [ip, $0x800+(STR+CAA)<<2]           @ get CAA
 162 00e4 8EEA000E 	    eor     lr, r0                                  @ XOR rcon[2]
 163              	
 164              	# calculation for key_sch[24-27]
 165 00e8 84EA0E04 	    eor     r4, lr                                  @ XOR key_sch[16]
 166 00ec 85EA0405 	    eor     r5, r4                                  @ key_sch[17]^key_sch[24]
ARM GAS  src/asm/mmcau_aes_functions.s 			page 5


 167 00f0 86EA0506 	    eor     r6, r5                                  @ key_sch[18]^key_sch[25]
 168 00f4 87EA0607 	    eor     r7, r6                                  @ key_sch[19]^key_sch[26]
 169 00f8 F0C2     	    stmia   r2!, {r4-r7}                            @ store key_sch[24-27]
 170              	
 171 00fa CCF84478 	    str     r7, [ip, $0x800+(LDR+CAA)<<2]           @ ROTL(key_sch[27])-> acc
 172 00fe CCF800B0 	    str     fp, [ip]                                @ AES SubBytes
 173 0102 DCF884E8 	    ldr     lr, [ip, $0x800+(STR+CAA)<<2]           @ get CAA
 174              	
 175              	# calculation for key_sch[28-31]
 176 0106 81EA0E01 	    eor     r1, lr                                  @ XOR key_sch[20]
 177 010a 83EA0103 	    eor     r3, r1                                  @ key_sch[21]^key_sch[28]
 178 010e 88EA0308 	    eor     r8, r3                                  @ key_sch[22]^key_sch[29]
 179 0112 89EA0809 	    eor     r9, r8                                  @ key_sch[23]^key_sch[30]
 180 0116 A2E80A03 	    stmia   r2!, {r1,r3,r8-r9}                      @ store key_sch[28-31]
 181              	
 182 011a 5AF8040B 	    ldr     r0, [sl], $4                            @ get rcon[3]; sl++
 183 011e 4FEA396E 	    ror     lr, r9, $24                             @ rotate left by 8
 184 0122 CCF844E8 	    str     lr, [ip, $0x800+(LDR+CAA)<<2]           @ ROTL(key_sch[31])-> acc
 185 0126 CCF800B0 	    str     fp, [ip]                                @ AES SubBytes
 186 012a DCF884E8 	    ldr     lr, [ip, $0x800+(STR+CAA)<<2]           @ get CAA
 187 012e 8EEA000E 	    eor     lr, r0                                  @ XOR rcon[3]
 188              	
 189              	# calculation for key_sch[32-35]
 190 0132 84EA0E04 	    eor     r4, lr                                  @ XOR key_sch[24]
 191 0136 85EA0405 	    eor     r5, r4                                  @ key_sch[25]^key_sch[32]
 192 013a 86EA0506 	    eor     r6, r5                                  @ key_sch[26]^key_sch[33]
 193 013e 87EA0607 	    eor     r7, r6                                  @ key_sch[27]^key_sch[34]
 194 0142 F0C2     	    stmia   r2!, {r4-r7}                            @ store key_sch[32-35]
 195              	
 196 0144 CCF84478 	    str     r7, [ip, $0x800+(LDR+CAA)<<2]           @ ROTL(key_sch[35])-> acc
 197 0148 CCF800B0 	    str     fp, [ip]                                @ AES SubBytes
 198 014c DCF884E8 	    ldr     lr, [ip, $0x800+(STR+CAA)<<2]           @ get CAA
 199              	
 200              	# calculation for key_sch[36-39]
 201 0150 81EA0E01 	    eor     r1, lr                                  @ XOR key_sch[28]
 202 0154 83EA0103 	    eor     r3, r1                                  @ key_sch[29]^key_sch[36]
 203 0158 88EA0308 	    eor     r8, r3                                  @ key_sch[30]^key_sch[37]
 204 015c 89EA0809 	    eor     r9, r8                                  @ key_sch[31]^key_sch[38]
 205 0160 A2E80A03 	    stmia   r2!, {r1,r3,r8-r9}                      @ store key_sch[36-39]
 206              	
 207 0164 5AF8040B 	    ldr     r0, [sl], $4                            @ get rcon[4]; sl++
 208 0168 4FEA396E 	    ror     lr, r9, $24                             @ rotate left by 8
 209 016c CCF844E8 	    str     lr, [ip, $0x800+(LDR+CAA)<<2]           @ ROTL(key_sch[39])-> acc
 210 0170 CCF800B0 	    str     fp, [ip]                                @ AES SubBytes
 211 0174 DCF884E8 	    ldr     lr, [ip, $0x800+(STR+CAA)<<2]           @ get CAA
 212 0178 8EEA000E 	    eor     lr, r0                                  @ XOR rcon[4]
 213              	
 214              	# calculation for key_sch[40-43]
 215 017c 84EA0E04 	    eor     r4, lr                                  @ XOR key_sch[32]
 216 0180 85EA0405 	    eor     r5, r4                                  @ key_sch[33]^key_sch[40]
 217 0184 86EA0506 	    eor     r6, r5                                  @ key_sch[34]^key_sch[41]
 218 0188 87EA0607 	    eor     r7, r6                                  @ key_sch[35]^key_sch[42]
 219 018c F0C2     	    stmia   r2!, {r4-r7}                            @ store key_sch[40-43]
 220              	
 221 018e CCF84478 	    str     r7, [ip, $0x800+(LDR+CAA)<<2]           @ ROTL(key_sch[43])-> acc
 222 0192 CCF800B0 	    str     fp, [ip]                                @ AES SubBytes
 223 0196 DCF884E8 	    ldr     lr, [ip, $0x800+(STR+CAA)<<2]           @ get CAA
ARM GAS  src/asm/mmcau_aes_functions.s 			page 6


 224              	
 225              	# calculation for key_sch[44-47]
 226 019a 81EA0E01 	    eor     r1, lr                                  @ XOR key_sch[36]
 227 019e 83EA0103 	    eor     r3, r1                                  @ key_sch[37]^key_sch[44]
 228 01a2 88EA0308 	    eor     r8, r3                                  @ key_sch[38]^key_sch[45]
 229 01a6 89EA0809 	    eor     r9, r8                                  @ key_sch[39]^key_sch[46]
 230 01aa A2E80A03 	    stmia   r2!, {r1,r3,r8-r9}                      @ store key_sch[44-47]
 231              	
 232 01ae 5AF8040B 	    ldr     r0, [sl], $4                            @ get rcon[5]; sl++
 233 01b2 4FEA396E 	    ror     lr, r9, $24                             @ rotate left by 8
 234 01b6 CCF844E8 	    str     lr, [ip, $0x800+(LDR+CAA)<<2]           @ ROTL(key_sch[47])-> acc
 235 01ba CCF800B0 	    str     fp, [ip]                                @ AES SubBytes
 236 01be DCF884E8 	    ldr     lr, [ip, $0x800+(STR+CAA)<<2]           @ get CAA
 237 01c2 8EEA000E 	    eor     lr, r0                                  @ XOR rcon[5]
 238              	
 239              	# calculation for key_sch[48-51]
 240 01c6 84EA0E04 	    eor     r4, lr                                  @ XOR key_sch[40]
 241 01ca 85EA0405 	    eor     r5, r4                                  @ key_sch[41]^key_sch[48]
 242 01ce 86EA0506 	    eor     r6, r5                                  @ key_sch[42]^key_sch[49]
 243 01d2 87EA0607 	    eor     r7, r6                                  @ key_sch[43]^key_sch[50]
 244 01d6 F0C2     	    stmia   r2!, {r4-r7}                            @ store key_sch[48-51]
 245              	
 246 01d8 CCF84478 	    str     r7, [ip, $0x800+(LDR+CAA)<<2]           @ ROTL(key_sch[51])-> acc
 247 01dc CCF800B0 	    str     fp, [ip]                                @ AES SubBytes
 248 01e0 DCF884E8 	    ldr     lr, [ip, $0x800+(STR+CAA)<<2]           @ get CAA
 249              	
 250              	# calculation for key_sch[52-55]
 251 01e4 81EA0E01 	    eor     r1, lr                                  @ XOR key_sch[44]
 252 01e8 83EA0103 	    eor     r3, r1                                  @ key_sch[45]^key_sch[52]
 253 01ec 88EA0308 	    eor     r8, r3                                  @ key_sch[46]^key_sch[53]
 254 01f0 89EA0809 	    eor     r9, r8                                  @ key_sch[47]^key_sch[54]
 255 01f4 A2E80A03 	    stmia   r2!, {r1,r3,r8-r9}                      @ store key_sch[52-55]
 256              	
 257 01f8 5AF8040B 	    ldr     r0, [sl], $4                            @ get rcon[6]; sl++
 258 01fc 4FEA396E 	    ror     lr, r9, $24                             @ rotate left by 8
 259 0200 CCF844E8 	    str     lr, [ip, $0x800+(LDR+CAA)<<2]           @ ROTL(key_sch[55])-> acc
 260 0204 CCF800B0 	    str     fp, [ip]                                @ AES SubBytes
 261 0208 DCF884E8 	    ldr     lr, [ip, $0x800+(STR+CAA)<<2]           @ get CAA
 262 020c 8EEA000E 	    eor     lr, r0                                  @ XOR rcon[6]
 263              	
 264              	# calculation for key_sch[56-59]
 265 0210 84EA0E04 	    eor     r4, lr                                  @ XOR key_sch[48]
 266 0214 85EA0405 	    eor     r5, r4                                  @ key_sch[49]^key_sch[56]
 267 0218 86EA0506 	    eor     r6, r5                                  @ key_sch[50]^key_sch[57]
 268 021c 87EA0607 	    eor     r7, r6                                  @ key_sch[51]^key_sch[58]
 269 0220 F0C2     	    stmia   r2!, {r4-r7}                            @ store key_sch[56-59]
 270              	
 271 0222 BDE8F09F 	    ldmia   sp!, {r4-ip,pc}                         @ restore regs and return
 272              	
 273              	expand_192:
 274 0226 90E80003 	    ldmia   r0, {r8-r9}                             @ copy key[4-5]
 275 022a 98FA88F8 	    rev     r8, r8                                  @ byte reverse
 276 022e 99FA89F9 	    rev     r9, r9                                  @ byte reverse
 277 0232 A2E80003 	    stmia   r2!, {r8-r9}                            @ to key_sch[4-5]
 278              	
 279 0236 5AF8040B 	    ldr     r0, [sl], $4                            @ get rcon[0]; sl++
 280 023a 4FEA3963 	    ror     r3, r9, $24                             @ rotate left by 8
ARM GAS  src/asm/mmcau_aes_functions.s 			page 7


 281 023e CCF84438 	    str     r3, [ip, $0x800+(LDR+CAA)<<2]           @ ROTL(key_sch[5])-> acc
 282 0242 CCF800B0 	    str     fp, [ip]                                @ AES SubBytes
 283 0246 DCF88438 	    ldr     r3, [ip, $0x800+(STR+CAA)<<2]           @ get CAA
 284 024a 83EA0003 	    eor     r3, r0                                  @ XOR rcon[0]
 285              	
 286              	# calculation for key_sch[6-11]
 287 024e 84EA0304 	    eor     r4, r3                                  @ XOR key_sch[0]
 288 0252 85EA0405 	    eor     r5, r4                                  @ key_sch[1]^key_sch[6]
 289 0256 86EA0506 	    eor     r6, r5                                  @ key_sch[2]^key_sch[7]
 290 025a 87EA0607 	    eor     r7, r6                                  @ key_sch[3]^key_sch[8]
 291 025e 88EA0708 	    eor     r8, r7                                  @ key_sch[4]^key_sch[9]
 292 0262 89EA0809 	    eor     r9, r8                                  @ key_sch[5]^key_sch[10]
 293 0266 A2E8F003 	    stmia   r2!, {r4-r9}                            @ store key_sch[6-11]
 294              	
 295 026a 5AF8040B 	    ldr     r0, [sl], $4                            @ get rcon[1]; sl++
 296 026e 4FEA3963 	    ror     r3, r9, $24                             @ rotate left by 8
 297 0272 CCF84438 	    str     r3, [ip, $0x800+(LDR+CAA)<<2]           @ ROTL(key_sch[11])-> acc
 298 0276 CCF800B0 	    str     fp, [ip]                                @ AES SubBytes
 299 027a DCF88438 	    ldr     r3, [ip, $0x800+(STR+CAA)<<2]           @ get CAA
 300 027e 83EA0003 	    eor     r3, r0                                  @ XOR rcon[1]
 301              	
 302              	# calculation for key_sch[12-17]
 303 0282 84EA0304 	    eor     r4, r3                                  @ XOR key_sch[6]
 304 0286 85EA0405 	    eor     r5, r4                                  @ key_sch[7]^key_sch[12]
 305 028a 86EA0506 	    eor     r6, r5                                  @ key_sch[8]^key_sch[13]
 306 028e 87EA0607 	    eor     r7, r6                                  @ key_sch[9]^key_sch[14]
 307 0292 88EA0708 	    eor     r8, r7                                  @ key_sch[10]^key_sch[15]
 308 0296 89EA0809 	    eor     r9, r8                                  @ key_sch[11]^key_sch[16]
 309 029a A2E8F003 	    stmia   r2!, {r4-r9}                            @ store key_sch[12-17]
 310              	
 311 029e 5AF8040B 	    ldr     r0, [sl], $4                            @ get rcon[2]; sl++
 312 02a2 4FEA3963 	    ror     r3, r9, $24                             @ rotate left by 8
 313 02a6 CCF84438 	    str     r3, [ip, $0x800+(LDR+CAA)<<2]           @ ROTL(key_sch[17])-> acc
 314 02aa CCF800B0 	    str     fp, [ip]                                @ AES SubBytes
 315 02ae DCF88438 	    ldr     r3, [ip, $0x800+(STR+CAA)<<2]           @ get CAA
 316 02b2 83EA0003 	    eor     r3, r0                                  @ XOR rcon[2]
 317              	
 318              	# calculation for key_sch[18-23]
 319 02b6 84EA0304 	    eor     r4, r3                                  @ XOR key_sch[12]
 320 02ba 85EA0405 	    eor     r5, r4                                  @ key_sch[13]^key_sch[18]
 321 02be 86EA0506 	    eor     r6, r5                                  @ key_sch[14]^key_sch[19]
 322 02c2 87EA0607 	    eor     r7, r6                                  @ key_sch[15]^key_sch[20]
 323 02c6 88EA0708 	    eor     r8, r7                                  @ key_sch[16]^key_sch[21]
 324 02ca 89EA0809 	    eor     r9, r8                                  @ key_sch[17]^key_sch[22]
 325 02ce A2E8F003 	    stmia   r2!, {r4-r9}                            @ store key_sch[18-23]
 326              	
 327 02d2 5AF8040B 	    ldr     r0, [sl], $4                            @ get rcon[3]; sl++
 328 02d6 4FEA3963 	    ror     r3, r9, $24                             @ rotate left by 8
 329 02da CCF84438 	    str     r3, [ip, $0x800+(LDR+CAA)<<2]           @ ROTL(key_sch[23])-> acc
 330 02de CCF800B0 	    str     fp, [ip]                                @ AES SubBytes
 331 02e2 DCF88438 	    ldr     r3, [ip, $0x800+(STR+CAA)<<2]           @ get CAA
 332 02e6 83EA0003 	    eor     r3, r0                                  @ XOR rcon[3]
 333              	
 334              	# calculation for key_sch[24-29]
 335 02ea 84EA0304 	    eor     r4, r3                                  @ XOR key_sch[18]
 336 02ee 85EA0405 	    eor     r5, r4                                  @ key_sch[19]^key_sch[24]
 337 02f2 86EA0506 	    eor     r6, r5                                  @ key_sch[20]^key_sch[25]
ARM GAS  src/asm/mmcau_aes_functions.s 			page 8


 338 02f6 87EA0607 	    eor     r7, r6                                  @ key_sch[21]^key_sch[26]
 339 02fa 88EA0708 	    eor     r8, r7                                  @ key_sch[22]^key_sch[27]
 340 02fe 89EA0809 	    eor     r9, r8                                  @ key_sch[23]^key_sch[28]
 341 0302 A2E8F003 	    stmia   r2!, {r4-r9}                            @ store key_sch[24-29]
 342              	
 343 0306 5AF8040B 	    ldr     r0, [sl], $4                            @ get rcon[4]; sl++
 344 030a 4FEA3963 	    ror     r3, r9, $24                             @ rotate left by 8
 345 030e CCF84438 	    str     r3, [ip, $0x800+(LDR+CAA)<<2]           @ ROTL(key_sch[29])-> acc
 346 0312 CCF800B0 	    str     fp, [ip]                                @ AES SubBytes
 347 0316 DCF88438 	    ldr     r3, [ip, $0x800+(STR+CAA)<<2]           @ get CAA
 348 031a 83EA0003 	    eor     r3, r0                                  @ XOR rcon[4]
 349              	
 350              	# calculation for key_sch[30-35]
 351 031e 84EA0304 	    eor     r4, r3                                  @ XOR key_sch[24]
 352 0322 85EA0405 	    eor     r5, r4                                  @ key_sch[25]^key_sch[30]
 353 0326 86EA0506 	    eor     r6, r5                                  @ key_sch[26]^key_sch[31]
 354 032a 87EA0607 	    eor     r7, r6                                  @ key_sch[27]^key_sch[32]
 355 032e 88EA0708 	    eor     r8, r7                                  @ key_sch[28]^key_sch[33]
 356 0332 89EA0809 	    eor     r9, r8                                  @ key_sch[29]^key_sch[34]
 357 0336 A2E8F003 	    stmia   r2!, {r4-r9}                            @ store key_sch[30-35]
 358              	
 359 033a 5AF8040B 	    ldr     r0, [sl], $4                            @ get rcon[5]; sl++
 360 033e 4FEA3963 	    ror     r3, r9, $24                             @ rotate left by 8
 361 0342 CCF84438 	    str     r3, [ip, $0x800+(LDR+CAA)<<2]           @ ROTL(key_sch[35])-> acc
 362 0346 CCF800B0 	    str     fp, [ip]                                @ AES SubBytes
 363 034a DCF88438 	    ldr     r3, [ip, $0x800+(STR+CAA)<<2]           @ get CAA
 364 034e 83EA0003 	    eor     r3, r0                                  @ XOR rcon[5]
 365              	
 366              	# calculation for key_sch[36-41]
 367 0352 84EA0304 	    eor     r4, r3                                  @ XOR key_sch[30]
 368 0356 85EA0405 	    eor     r5, r4                                  @ key_sch[31]^key_sch[36]
 369 035a 86EA0506 	    eor     r6, r5                                  @ key_sch[32]^key_sch[37]
 370 035e 87EA0607 	    eor     r7, r6                                  @ key_sch[33]^key_sch[38]
 371 0362 88EA0708 	    eor     r8, r7                                  @ key_sch[34]^key_sch[39]
 372 0366 89EA0809 	    eor     r9, r8                                  @ key_sch[35]^key_sch[40]
 373 036a A2E8F003 	    stmia   r2!, {r4-r9}                            @ store key_sch[36-41]
 374              	
 375 036e 5AF8040B 	    ldr     r0, [sl], $4                            @ get rcon[6]; sl++
 376 0372 4FEA3963 	    ror     r3, r9, $24                             @ rotate left by 8
 377 0376 CCF84438 	    str     r3, [ip, $0x800+(LDR+CAA)<<2]           @ ROTL(key_sch[41])-> acc
 378 037a CCF800B0 	    str     fp, [ip]                                @ AES SubBytes
 379 037e DCF88438 	    ldr     r3, [ip, $0x800+(STR+CAA)<<2]           @ get CAA
 380 0382 83EA0003 	    eor     r3, r0                                  @ XOR rcon[6]
 381              	
 382              	# calculation for key_sch[42-47]
 383 0386 84EA0304 	    eor     r4, r3                                  @ XOR key_sch[36]
 384 038a 85EA0405 	    eor     r5, r4                                  @ key_sch[37]^key_sch[42]
 385 038e 86EA0506 	    eor     r6, r5                                  @ key_sch[38]^key_sch[43]
 386 0392 87EA0607 	    eor     r7, r6                                  @ key_sch[39]^key_sch[44]
 387 0396 88EA0708 	    eor     r8, r7                                  @ key_sch[40]^key_sch[45]
 388 039a 89EA0809 	    eor     r9, r8                                  @ key_sch[41]^key_sch[46]
 389 039e A2E8F003 	    stmia   r2!, {r4-r9}                            @ store key_sch[42-47]
 390              	
 391 03a2 5AF8040B 	    ldr     r0, [sl], $4                            @ get rcon[7]; sl++
 392 03a6 4FEA3963 	    ror     r3, r9, $24                             @ rotate left by 8
 393 03aa CCF84438 	    str     r3, [ip, $0x800+(LDR+CAA)<<2]           @ ROTL(key_sch[47])-> acc
 394 03ae CCF800B0 	    str     fp, [ip]                                @ AES SubBytes
ARM GAS  src/asm/mmcau_aes_functions.s 			page 9


 395 03b2 DCF88438 	    ldr     r3, [ip, $0x800+(STR+CAA)<<2]           @ get CAA
 396 03b6 83EA0003 	    eor     r3, r0                                  @ XOR rcon[7]
 397              	
 398              	# calculation for key_sch[48-51]
 399 03ba 84EA0304 	    eor     r4, r3                                  @ XOR key_sch[42]
 400 03be 85EA0405 	    eor     r5, r4                                  @ key_sch[43]^key_sch[48]
 401 03c2 86EA0506 	    eor     r6, r5                                  @ key_sch[44]^key_sch[49]
 402 03c6 87EA0607 	    eor     r7, r6                                  @ key_sch[45]^key_sch[50]
 403 03ca F0C2     	    stmia   r2!, {r4-r7}                            @ store key_sch[48-51]
 404              	
 405 03cc BDE8F09F 	    ldmia   sp!, {r4-ip,pc}                         @ restore regs and return
 406              	
 407              	expand_128:
 408 03d0 DAF80000 	    ldr     r0, [sl]                                @ get rcon[0]
 409 03d4 4FEA3763 	    ror     r3, r7, $24                             @ rotate left by 8
 410 03d8 CCF84438 	    str     r3, [ip, $0x800+(LDR+CAA)<<2]           @ ROTL(key_sch[3])-> acc
 411 03dc CCF800B0 	    str     fp, [ip]                                @ AES SubBytes
 412 03e0 DCF88438 	    ldr     r3, [ip, $0x800+(STR+CAA)<<2]           @ get CAA
 413 03e4 83EA0003 	    eor     r3, r0                                  @ XOR rcon[0]
 414              	
 415              	# calculation for key_sch[4-7]
 416 03e8 84EA0304 	    eor     r4, r3                                  @ XOR key_sch[0]
 417 03ec 85EA0405 	    eor     r5, r4                                  @ key_sch[1]^key_sch[4]
 418 03f0 86EA0506 	    eor     r6, r5                                  @ key_sch[2]^key_sch[5]
 419 03f4 87EA0607 	    eor     r7, r6                                  @ key_sch[3]^key_sch[6]
 420 03f8 F0C2     	    stmia   r2!, {r4-r7}                            @ store key_sch[4-7]
 421              	
 422 03fa DAF80400 	    ldr     r0, [sl, $1<<2]                         @ get rcon[1]
 423 03fe 4FEA3763 	    ror     r3, r7, $24                             @ rotate left by 8
 424 0402 CCF84438 	    str     r3, [ip, $0x800+(LDR+CAA)<<2]           @ ROTL(key_sch[7])-> acc
 425 0406 CCF800B0 	    str     fp, [ip]                                @ AES SubBytes
 426 040a DCF88438 	    ldr     r3, [ip, $0x800+(STR+CAA)<<2]           @ get CAA
 427 040e 83EA0003 	    eor     r3, r0                                  @ XOR rcon[1]
 428              	
 429              	# calculation for key_sch[8-11]
 430 0412 84EA0304 	    eor     r4, r3                                  @ XOR key_sch[4]
 431 0416 85EA0405 	    eor     r5, r4                                  @ key_sch[5]^key_sch[8]
 432 041a 86EA0506 	    eor     r6, r5                                  @ key_sch[6]^key_sch[9]
 433 041e 87EA0607 	    eor     r7, r6                                  @ key_sch[7]^key_sch[10]
 434 0422 F0C2     	    stmia   r2!, {r4-r7}                            @ store key_sch[8-11]
 435              	
 436 0424 DAF80800 	    ldr     r0, [sl, $2<<2]                         @ get rcon[2]
 437 0428 4FEA3763 	    ror     r3, r7, $24                             @ rotate left by 8
 438 042c CCF84438 	    str     r3, [ip, $0x800+(LDR+CAA)<<2]           @ ROTL(key_sch[11])-> acc
 439 0430 CCF800B0 	    str     fp, [ip]                                @ AES SubBytes
 440 0434 DCF88438 	    ldr     r3, [ip, $0x800+(STR+CAA)<<2]           @ get CAA
 441 0438 83EA0003 	    eor     r3, r0                                  @ XOR rcon[2]
 442              	
 443              	# calculation for key_sch[12-15]
 444 043c 84EA0304 	    eor     r4, r3                                  @ XOR key_sch[8]
 445 0440 85EA0405 	    eor     r5, r4                                  @ key_sch[9]^key_sch[12]
 446 0444 86EA0506 	    eor     r6, r5                                  @ key_sch[10]^key_sch[13]
 447 0448 87EA0607 	    eor     r7, r6                                  @ key_sch[11]^key_sch[14]
 448 044c F0C2     	    stmia   r2!, {r4-r7}                            @ store key_sch[12-15]
 449              	
 450 044e DAF80C00 	    ldr     r0, [sl, $3<<2]                         @ get rcon[3]
 451 0452 4FEA3763 	    ror     r3, r7, $24                             @ rotate left by 8
ARM GAS  src/asm/mmcau_aes_functions.s 			page 10


 452 0456 CCF84438 	    str     r3, [ip, $0x800+(LDR+CAA)<<2]           @ ROTL(key_sch[15])-> acc
 453 045a CCF800B0 	    str     fp, [ip]                                @ AES SubBytes
 454 045e DCF88438 	    ldr     r3, [ip, $0x800+(STR+CAA)<<2]           @ get CAA
 455 0462 83EA0003 	    eor     r3, r0                                  @ XOR rcon[3]
 456              	
 457              	# calculation for key_sch[16-19]
 458 0466 84EA0304 	    eor     r4, r3                                  @ XOR key_sch[12]
 459 046a 85EA0405 	    eor     r5, r4                                  @ key_sch[13]^key_sch[16]
 460 046e 86EA0506 	    eor     r6, r5                                  @ key_sch[14]^key_sch[17]
 461 0472 87EA0607 	    eor     r7, r6                                  @ key_sch[15]^key_sch[18]
 462 0476 F0C2     	    stmia   r2!, {r4-r7}                            @ store key_sch[16-19]
 463              	
 464 0478 DAF81000 	    ldr     r0, [sl, $4<<2]                         @ get rcon[4]
 465 047c 4FEA3763 	    ror     r3, r7, $24                             @ rotate left by 8
 466 0480 CCF84438 	    str     r3, [ip, $0x800+(LDR+CAA)<<2]           @ ROTL(key_sch[19])-> acc
 467 0484 CCF800B0 	    str     fp, [ip]                                @ AES SubBytes
 468 0488 DCF88438 	    ldr     r3, [ip, $0x800+(STR+CAA)<<2]           @ get CAA
 469 048c 83EA0003 	    eor     r3, r0                                  @ XOR rcon[4]
 470              	
 471              	# calculation for key_sch[20-23]
 472 0490 84EA0304 	    eor     r4, r3                                  @ XOR key_sch[16]
 473 0494 85EA0405 	    eor     r5, r4                                  @ key_sch[17]^key_sch[20]
 474 0498 86EA0506 	    eor     r6, r5                                  @ key_sch[18]^key_sch[21]
 475 049c 87EA0607 	    eor     r7, r6                                  @ key_sch[19]^key_sch[22]
 476 04a0 F0C2     	    stmia   r2!, {r4-r7}                            @ store key_sch[20-23]
 477              	
 478 04a2 DAF81400 	    ldr     r0, [sl, $5<<2]                         @ get rcon[5]
 479 04a6 4FEA3763 	    ror     r3, r7, $24                             @ rotate left by 8
 480 04aa CCF84438 	    str     r3, [ip, $0x800+(LDR+CAA)<<2]           @ ROTL(key_sch[23])-> acc
 481 04ae CCF800B0 	    str     fp, [ip]                                @ AES SubBytes
 482 04b2 DCF88438 	    ldr     r3, [ip, $0x800+(STR+CAA)<<2]           @ get CAA
 483 04b6 83EA0003 	    eor     r3, r0                                  @ XOR rcon[5]
 484              	
 485              	# calculation for key_sch[24-27]
 486 04ba 84EA0304 	    eor     r4, r3                                  @ XOR key_sch[20]
 487 04be 85EA0405 	    eor     r5, r4                                  @ key_sch[21]^key_sch[24]
 488 04c2 86EA0506 	    eor     r6, r5                                  @ key_sch[22]^key_sch[25]
 489 04c6 87EA0607 	    eor     r7, r6                                  @ key_sch[23]^key_sch[26]
 490 04ca F0C2     	    stmia   r2!, {r4-r7}                            @ store key_sch[24-27]
 491              	
 492 04cc DAF81800 	    ldr     r0, [sl, $6<<2]                         @ get rcon[6]
 493 04d0 4FEA3763 	    ror     r3, r7, $24                             @ rotate left by 8
 494 04d4 CCF84438 	    str     r3, [ip, $0x800+(LDR+CAA)<<2]           @ ROTL(key_sch[27])-> acc
 495 04d8 CCF800B0 	    str     fp, [ip]                                @ AES SubBytes
 496 04dc DCF88438 	    ldr     r3, [ip, $0x800+(STR+CAA)<<2]           @ get CAA
 497 04e0 83EA0003 	    eor     r3, r0                                  @ XOR rcon[6]
 498              	
 499              	# calculation for key_sch[28-31]
 500 04e4 84EA0304 	    eor     r4, r3                                  @ XOR key_sch[24]
 501 04e8 85EA0405 	    eor     r5, r4                                  @ key_sch[25]^key_sch[28]
 502 04ec 86EA0506 	    eor     r6, r5                                  @ key_sch[26]^key_sch[29]
 503 04f0 87EA0607 	    eor     r7, r6                                  @ key_sch[27]^key_sch[30]
 504 04f4 F0C2     	    stmia   r2!, {r4-r7}                            @ store key_sch[28-31]
 505              	
 506 04f6 DAF81C00 	    ldr     r0, [sl, $7<<2]                         @ get rcon[7]
 507 04fa 4FEA3763 	    ror     r3, r7, $24                             @ rotate left by 8
 508 04fe CCF84438 	    str     r3, [ip, $0x800+(LDR+CAA)<<2]           @ ROTL(key_sch[31])-> acc
ARM GAS  src/asm/mmcau_aes_functions.s 			page 11


 509 0502 CCF800B0 	    str     fp, [ip]                                @ AES SubBytes
 510 0506 DCF88438 	    ldr     r3, [ip, $0x800+(STR+CAA)<<2]           @ get CAA
 511 050a 83EA0003 	    eor     r3, r0                                  @ XOR rcon[7]
 512              	
 513              	# calculation for key_sch[32-35]
 514 050e 84EA0304 	    eor     r4, r3                                  @ XOR key_sch[28]
 515 0512 85EA0405 	    eor     r5, r4                                  @ key_sch[29]^key_sch[32]
 516 0516 86EA0506 	    eor     r6, r5                                  @ key_sch[30]^key_sch[33]
 517 051a 87EA0607 	    eor     r7, r6                                  @ key_sch[31]^key_sch[34]
 518 051e F0C2     	    stmia   r2!, {r4-r7}                            @ store key_sch[32-35]
 519              	
 520 0520 DAF82000 	    ldr     r0, [sl, $8<<2]                         @ get rcon[8]
 521 0524 4FEA3763 	    ror     r3, r7, $24                             @ rotate left by 8
 522 0528 CCF84438 	    str     r3, [ip, $0x800+(LDR+CAA)<<2]           @ ROTL(key_sch[35])-> acc
 523 052c CCF800B0 	    str     fp, [ip]                                @ AES SubBytes
 524 0530 DCF88438 	    ldr     r3, [ip, $0x800+(STR+CAA)<<2]           @ get CAA
 525 0534 83EA0003 	    eor     r3, r0                                  @ XOR rcon[8]
 526              	
 527              	# calculation for key_sch[36-39]
 528 0538 84EA0304 	    eor     r4, r3                                  @ XOR key_sch[32]
 529 053c 85EA0405 	    eor     r5, r4                                  @ key_sch[33]^key_sch[36]
 530 0540 86EA0506 	    eor     r6, r5                                  @ key_sch[34]^key_sch[37]
 531 0544 87EA0607 	    eor     r7, r6                                  @ key_sch[35]^key_sch[38]
 532 0548 F0C2     	    stmia   r2!, {r4-r7}                            @ store key_sch[36-39]
 533              	
 534 054a DAF82400 	    ldr     r0, [sl, $9<<2]                         @ get rcon[9]
 535 054e 4FEA3763 	    ror     r3, r7, $24                             @ rotate left by 8
 536 0552 CCF84438 	    str     r3, [ip, $0x800+(LDR+CAA)<<2]           @ ROTL(key_sch[39])-> acc
 537 0556 CCF800B0 	    str     fp, [ip]                                @ AES SubBytes
 538 055a DCF88438 	    ldr     r3, [ip, $0x800+(STR+CAA)<<2]           @ get CAA
 539 055e 83EA0003 	    eor     r3, r0                                  @ XOR rcon[9]
 540              	
 541              	# calculation for key_sch[40-43]
 542 0562 84EA0304 	    eor     r4, r3                                  @ XOR key_sch[36]
 543 0566 85EA0405 	    eor     r5, r4                                  @ key_sch[37]^key_sch[40]
 544 056a 86EA0506 	    eor     r6, r5                                  @ key_sch[38]^key_sch[41]
 545 056e 87EA0607 	    eor     r7, r6                                  @ key_sch[39]^key_sch[42]
 546 0572 F0C2     	    stmia   r2!, {r4-r7}                            @ store key_sch[40-43]
 547              	
 548 0574 BDE8F09F 	    ldmia   sp!, {r4-ip,pc}                         @ restore regs and return
 549              	
 550              	
 551              	#*******************************************************************************
 552              	#*******************************************************************************
 553              	#
 554              	# AES: Encrypts a single 16-byte block
 555              	#   arguments
 556              	#           *in         pointer to 16-byte block of input plaintext
 557              	#           *key_sch    pointer to key schedule (44, 52, 60 longwords)
 558              	#           nr          number of AES rounds (10, 12, 14 = f(key_schedule))
 559              	#           *out        pointer to 16-byte block of output ciphertext
 560              	#
 561              	#
 562              	#   calling convention
 563              	#   void    mmcau_aes_encrypt (const unsigned char *in,
 564              	#                              const unsigned char *key_sch,
 565              	#                              const int            nr,
ARM GAS  src/asm/mmcau_aes_functions.s 			page 12


 566              	#                              unsigned char       *out)
 567              	
 568              	    .global _mmcau_aes_encrypt
 569              	    .global mmcau_aes_encrypt
 570              	    .type   mmcau_aes_encrypt, %function
 571 0578 AFF30080 	    .align  4
 571      AFF30080 
 572              	
 573              	_mmcau_aes_encrypt:
 574              	mmcau_aes_encrypt:
 575              	
 576              	#  register allocation
 577              	# --------------------
 578              	#  r0      = scratch / input  *in  / mmcau_3_cmds(AESS+CA0,AESS+CA1,AESS+CA2)
 579              	#  r1      = scratch / input  *key_sch
 580              	#  r2      = scratch / input   nr
 581              	#  r3      = scratch / output *out
 582              	#  r4      = scratch
 583              	#  r5      = scratch
 584              	#  r6      = scratch
 585              	#  r7      = scratch
 586              	#  r8      = scratch / mmcau_2_cmds(AESS+CA3,AESR)
 587              	#  r9      = scratch / mmcau_indirect_cmd(AESC+CA0)
 588              	# r10 (sl) = scratch / mmcau_indirect_cmd(STR+CA0)
 589              	# r11 (fp) = scratch / mmcau_indirect_cmd(LDR+CA0)
 590              	# r12 (ip) = scratch / pointer to MMCAU_PPB_DIRECT
 591              	# r13 (sp) = stack pointer
 592              	# r14 (lr) = link register
 593              	
 594 0580 2DE9F01F 	    stmdb   sp!, {r4-ip}                            @ save registers on stack
 595              	
 596              	# load the 16 plain text bytes (4 words) into r4-r7
 597 0584 90E8F000 	    ldmia   r0, {r4-r7}                             @ get plaintext[0-3]
 598 0588 24BA     	    rev     r4, r4                                  @ byte reverse
 599 058a 2DBA     	    rev     r5, r5                                  @ byte reverse
 600 058c 36BA     	    rev     r6, r6                                  @ byte reverse
 601 058e 3FBA     	    rev     r7, r7                                  @ byte reverse
 602              	
 603              	# prepare for AES operations register load
 604 0590 40F20000 	    movw    r0, #:lower16:encrypt_reg_data
 605 0594 C0F20000 	    movt    r0, #:upper16:encrypt_reg_data
 606              	
 607              	# XOR the first 4 keys into the 16 plain text bytes
 608 0598 B1E8000F 	    ldmia   r1!, {r8-fp}                            @ get key_sch[0-3]; r1++
 609 059c 84EA0804 	    eor     r4, r8
 610 05a0 85EA0905 	    eor     r5, r9
 611 05a4 86EA0A06 	    eor     r6, sl
 612 05a8 87EA0B07 	    eor     r7, fp
 613              	
 614              	# load registers needed for mmcau commands from encrypt_reg_data:
 615 05ac 90E8011F 	    ldmia   r0, {r0,r8-ip}                          @ setup AES operations
 616              	
 617              	# load the XOR results into the CAU's CA0 - CA3 registers
 618 05b0 8BE8F000 	    stmia   fp, {r4-r7}                             @ load CA0-CA3
 619              	
 620              	# send a series of cau commands to perform the encryption
 621 05b4 CCF80000 	    str     r0, [ip]                                @ SubBytes
ARM GAS  src/asm/mmcau_aes_functions.s 			page 13


 622 05b8 CCF80080 	    str     r8, [ip]                                @ SubBytes, ShiftRows
 623 05bc F0C9     	    ldmia   r1!, {r4-r7}                            @ get next 4 keys; r1++
 624 05be 89E8F000 	    stmia   r9, {r4-r7}                             @ MixColumns
 625              	
 626 05c2 CCF80000 	    str     r0, [ip]                                @ SubBytes
 627 05c6 CCF80080 	    str     r8, [ip]                                @ SubBytes, ShiftRows
 628 05ca F0C9     	    ldmia   r1!, {r4-r7}                            @ get next 4 keys; r1++
 629 05cc 89E8F000 	    stmia   r9, {r4-r7}                             @ MixColumns
 630              	
 631 05d0 CCF80000 	    str     r0, [ip]                                @ SubBytes
 632 05d4 CCF80080 	    str     r8, [ip]                                @ SubBytes, ShiftRows
 633 05d8 F0C9     	    ldmia   r1!, {r4-r7}                            @ get next 4 keys; r1++
 634 05da 89E8F000 	    stmia   r9, {r4-r7}                             @ MixColumns
 635              	
 636 05de CCF80000 	    str     r0, [ip]                                @ SubBytes
 637 05e2 CCF80080 	    str     r8, [ip]                                @ SubBytes, ShiftRows
 638 05e6 F0C9     	    ldmia   r1!, {r4-r7}                            @ get next 4 keys; r1++
 639 05e8 89E8F000 	    stmia   r9, {r4-r7}                             @ MixColumns
 640              	
 641 05ec CCF80000 	    str     r0, [ip]                                @ SubBytes
 642 05f0 CCF80080 	    str     r8, [ip]                                @ SubBytes, ShiftRows
 643 05f4 F0C9     	    ldmia   r1!, {r4-r7}                            @ get next 4 keys; r1++
 644 05f6 89E8F000 	    stmia   r9, {r4-r7}                             @ MixColumns
 645              	
 646 05fa CCF80000 	    str     r0, [ip]                                @ SubBytes
 647 05fe CCF80080 	    str     r8, [ip]                                @ SubBytes, ShiftRows
 648 0602 F0C9     	    ldmia   r1!, {r4-r7}                            @ get next 4 keys; r1++
 649 0604 89E8F000 	    stmia   r9, {r4-r7}                             @ MixColumns
 650              	
 651 0608 CCF80000 	    str     r0, [ip]                                @ SubBytes
 652 060c CCF80080 	    str     r8, [ip]                                @ SubBytes, ShiftRows
 653 0610 F0C9     	    ldmia   r1!, {r4-r7}                            @ get next 4 keys; r1++
 654 0612 89E8F000 	    stmia   r9, {r4-r7}                             @ MixColumns
 655              	
 656 0616 CCF80000 	    str     r0, [ip]                                @ SubBytes
 657 061a CCF80080 	    str     r8, [ip]                                @ SubBytes, ShiftRows
 658 061e F0C9     	    ldmia   r1!, {r4-r7}                            @ get next 4 keys; r1++
 659 0620 89E8F000 	    stmia   r9, {r4-r7}                             @ MixColumns
 660              	
 661 0624 CCF80000 	    str     r0, [ip]                                @ SubBytes
 662 0628 CCF80080 	    str     r8, [ip]                                @ SubBytes, ShiftRows
 663 062c F0C9     	    ldmia   r1!, {r4-r7}                            @ get next 4 keys; r1++
 664 062e 89E8F000 	    stmia   r9, {r4-r7}                             @ MixColumns
 665              	
 666 0632 0A2A     	    cmp     r2, $10                                 @ if aes128, finish
 667 0634 1DD0     	    beq     encrypt_end
 668              	
 669 0636 CCF80000 	    str     r0, [ip]                                @ SubBytes
 670 063a CCF80080 	    str     r8, [ip]                                @ SubBytes, ShiftRows
 671 063e F0C9     	    ldmia   r1!, {r4-r7}                            @ get next 4 keys; r1++
 672 0640 89E8F000 	    stmia   r9, {r4-r7}                             @ MixColumns
 673              	
 674 0644 CCF80000 	    str     r0, [ip]                                @ SubBytes
 675 0648 CCF80080 	    str     r8, [ip]                                @ SubBytes, ShiftRows
 676 064c F0C9     	    ldmia   r1!, {r4-r7}                            @ get next 4 keys; r1++
 677 064e 89E8F000 	    stmia   r9, {r4-r7}                             @ MixColumns
 678              	
ARM GAS  src/asm/mmcau_aes_functions.s 			page 14


 679 0652 0C2A     	    cmp     r2, $12                                 @ if aes192, finish
 680 0654 0DD0     	    beq     encrypt_end
 681              	
 682 0656 CCF80000 	    str     r0, [ip]                                @ SubBytes
 683 065a CCF80080 	    str     r8, [ip]                                @ SubBytes, ShiftRows
 684 065e F0C9     	    ldmia   r1!, {r4-r7}                            @ get next 4 keys; r1++
 685 0660 89E8F000 	    stmia   r9, {r4-r7}                             @ MixColumns
 686              	
 687 0664 CCF80000 	    str     r0, [ip]                                @ SubBytes
 688 0668 CCF80080 	    str     r8, [ip]                                @ SubBytes, ShiftRows
 689 066c F0C9     	    ldmia   r1!, {r4-r7}                            @ get next 4 keys; r1++
 690 066e 89E8F000 	    stmia   r9, {r4-r7}                             @ MixColumns
 691              	
 692              	encrypt_end:
 693 0672 CCF80000 	    str     r0, [ip]                                @ SubBytes
 694 0676 CCF80080 	    str     r8, [ip]                                @ SubBytes, ShiftRows
 695              	
 696              	# XOR the last 4 keys into CAO - CA3 ciphertext output
 697 067a 9AE8F000 	    ldmia   sl, {r4-r7}                             @ get CA0 - CA3
 698 067e 91E8000F 	    ldmia   r1, {r8-fp}                             @ get key_sch[j]-[j+3]
 699 0682 84EA0804 	    eor     r4, r8
 700 0686 85EA0905 	    eor     r5, r9
 701 068a 86EA0A06 	    eor     r6, sl
 702 068e 87EA0B07 	    eor     r7, fp
 703              	
 704              	# store the 16-byte ciphertext output block into memory
 705 0692 24BA     	    rev     r4, r4                                  @ byte reverse
 706 0694 2DBA     	    rev     r5, r5                                  @ byte reverse
 707 0696 36BA     	    rev     r6, r6                                  @ byte reverse
 708 0698 3FBA     	    rev     r7, r7                                  @ byte reverse
 709 069a 83E8F000 	    stmia   r3, {r4-r7}                             @ save to output[0-3]
 710              	
 711 069e BDE8F01F 	    ldmia   sp!, {r4-ip}                            @ restore regs and return
 712 06a2 7047     	    bx      lr
 713              	
 714              	#*******************************************************************************
 715              	#*******************************************************************************
 716              	#
 717              	# AES: Decrypts a single 16-byte block
 718              	#   arguments
 719              	#           *in         pointer to 16-byte block of input chiphertext
 720              	#           *key_sch    pointer to key schedule (44, 52, 60 longwords)
 721              	#           nr          number of AES rounds (10, 12, 14 = f(key_schedule))
 722              	#           *out        pointer to 16-byte block of output plaintext
 723              	#
 724              	#
 725              	#   calling convention
 726              	#   void    mmcau_aes_decrypt (const unsigned char *in,
 727              	#                              const unsigned char *key_sch,
 728              	#                              const int            nr,
 729              	#                              unsigned char       *out)
 730              	
 731              	    .global _mmcau_aes_decrypt
 732              	    .global mmcau_aes_decrypt
 733              	    .type   mmcau_aes_decrypt, %function
 734 06a4 AFF30080 	    .align  4
 734      AFF30080 
ARM GAS  src/asm/mmcau_aes_functions.s 			page 15


 734      AFF30080 
 735              	
 736              	_mmcau_aes_decrypt:
 737              	mmcau_aes_decrypt:
 738              	
 739              	#  register allocation
 740              	# --------------------
 741              	#  r0      = scratch / input  *in  / mmcau_3_cmds(AESIR,AESIS+CA3,AESIS+CA2)
 742              	#  r1      = scratch / input  *key_sch
 743              	#  r2      = scratch / input   nr
 744              	#  r3      = scratch / output *out
 745              	#  r4      = scratch
 746              	#  r5      = scratch
 747              	#  r6      = scratch
 748              	#  r7      = scratch
 749              	#  r8      = scratch / mmcau_2_cmds(AESIS+CA1,AESIS+CA0)
 750              	#  r9      = scratch / mmcau_indirect_cmd(AESIC+CA0)
 751              	# r10 (sl) = scratch / mmcau_indirect_cmd(STR+CA0)
 752              	# r11 (fp) = scratch / mmcau_indirect_cmd(LDR+CA0)
 753              	# r12 (ip) = scratch / pointer to MMCAU_PPB_DIRECT
 754              	# r13 (sp) = stack pointer
 755              	# r14 (lr) = link register
 756              	
 757 06b0 2DE9F01F 	    stmdb   sp!, {r4-ip}                            @ save registers on stack
 758              	
 759              	# load the 16 cipher bytes (4 words) into r4-r7
 760 06b4 90E8F000 	    ldmia   r0, {r4-r7}                             @ get in[0-3]
 761 06b8 24BA     	    rev     r4, r4                                  @ byte reverse
 762 06ba 2DBA     	    rev     r5, r5                                  @ byte reverse
 763 06bc 36BA     	    rev     r6, r6                                  @ byte reverse
 764 06be 3FBA     	    rev     r7, r7                                  @ byte reverse
 765              	
 766              	# prepare for AES operations register load
 767 06c0 40F20000 	    movw    r0, #:lower16:decrypt_reg_data
 768 06c4 C0F20000 	    movt    r0, #:upper16:decrypt_reg_data
 769              	
 770              	# the key_sch pointer (r1) is adjusted to define the end of the elements
 771              	# the adjustment factor = f(nr) is defined by the expression:
 772              	#   end of key_sch = 4 x (nr + 1) for nr = {10, 12, 14}
 773 06c8 01EB0211 	    add     r1, r1, r2, LSL $4
 774              	
 775              	# XOR the last 4 keys into the 4 cipher words
 776 06cc 91E8000F 	    ldmia   r1, {r8-fp}                             @ get last 4 keys
 777 06d0 84EA0804 	    eor     r4, r8
 778 06d4 85EA0905 	    eor     r5, r9
 779 06d8 86EA0A06 	    eor     r6, sl
 780 06dc 87EA0B07 	    eor     r7, fp
 781              	
 782              	# load registers needed for mmcau commands from decrypt_reg_data:
 783 06e0 90E8011F 	    ldmia   r0, {r0,r8-ip}                          @ setup AES operations
 784              	
 785              	# load the 16 cipher bytes (4 words) into the CAU's CA0 - CA3 registers
 786 06e4 8BE8F000 	    stmia   fp, {r4-r7}                             @ load CA0-CA3
 787              	
 788              	# send a series of cau commands to perform the decryption
 789              	
 790 06e8 31E9F000 	    ldmdb   r1!, {r4-r7}                            @ key_sch[i] to [i+4]; r1--
ARM GAS  src/asm/mmcau_aes_functions.s 			page 16


 791 06ec CCF80000 	    str     r0, [ip]                                @ InvShiftRows,InvSubBytes
 792 06f0 CCF80080 	    str     r8, [ip]                                @ InvSubBytes
 793 06f4 89E8F000 	    stmia   r9, {r4-r7}                             @ MixColumns
 794              	
 795 06f8 31E9F000 	    ldmdb   r1!, {r4-r7}                            @ key_sch[i] to [i+4]; r1--
 796 06fc CCF80000 	    str     r0, [ip]                                @ InvShiftRows,InvSubBytes
 797 0700 CCF80080 	    str     r8, [ip]                                @ InvSubBytes
 798 0704 89E8F000 	    stmia   r9, {r4-r7}                             @ MixColumns
 799              	
 800 0708 31E9F000 	    ldmdb   r1!, {r4-r7}                            @ key_sch[i] to [i+4]; r1--
 801 070c CCF80000 	    str     r0, [ip]                                @ InvShiftRows,InvSubBytes
 802 0710 CCF80080 	    str     r8, [ip]                                @ InvSubBytes
 803 0714 89E8F000 	    stmia   r9, {r4-r7}                             @ MixColumns
 804              	
 805 0718 31E9F000 	    ldmdb   r1!, {r4-r7}                            @ key_sch[i] to [i+4]; r1--
 806 071c CCF80000 	    str     r0, [ip]                                @ InvShiftRows,InvSubBytes
 807 0720 CCF80080 	    str     r8, [ip]                                @ InvSubBytes
 808 0724 89E8F000 	    stmia   r9, {r4-r7}                             @ MixColumns
 809              	
 810 0728 31E9F000 	    ldmdb   r1!, {r4-r7}                            @ key_sch[i] to [i+4]; r1--
 811 072c CCF80000 	    str     r0, [ip]                                @ InvShiftRows,InvSubBytes
 812 0730 CCF80080 	    str     r8, [ip]                                @ InvSubBytes
 813 0734 89E8F000 	    stmia   r9, {r4-r7}                             @ MixColumns
 814              	
 815 0738 31E9F000 	    ldmdb   r1!, {r4-r7}                            @ key_sch[i] to [i+4]; r1--
 816 073c CCF80000 	    str     r0, [ip]                                @ InvShiftRows,InvSubBytes
 817 0740 CCF80080 	    str     r8, [ip]                                @ InvSubBytes
 818 0744 89E8F000 	    stmia   r9, {r4-r7}                             @ MixColumns
 819              	
 820 0748 31E9F000 	    ldmdb   r1!, {r4-r7}                            @ key_sch[i] to [i+4]; r1--
 821 074c CCF80000 	    str     r0, [ip]                                @ InvShiftRows,InvSubBytes
 822 0750 CCF80080 	    str     r8, [ip]                                @ InvSubBytes
 823 0754 89E8F000 	    stmia   r9, {r4-r7}                             @ MixColumns
 824              	
 825 0758 31E9F000 	    ldmdb   r1!, {r4-r7}                            @ key_sch[i] to [i+4]; r1--
 826 075c CCF80000 	    str     r0, [ip]                                @ InvShiftRows,InvSubBytes
 827 0760 CCF80080 	    str     r8, [ip]                                @ InvSubBytes
 828 0764 89E8F000 	    stmia   r9, {r4-r7}                             @ MixColumns
 829              	
 830 0768 31E9F000 	    ldmdb   r1!, {r4-r7}                            @ key_sch[i] to [i+4]; r1--
 831 076c CCF80000 	    str     r0, [ip]                                @ InvShiftRows,InvSubBytes
 832 0770 CCF80080 	    str     r8, [ip]                                @ InvSubBytes
 833 0774 89E8F000 	    stmia   r9, {r4-r7}                             @ MixColumns
 834              	
 835 0778 0A2A     	    cmp     r2, $10                                 @ if aes128, finish
 836 077a 21D0     	    beq     decrypt_end
 837              	
 838 077c 31E9F000 	    ldmdb   r1!, {r4-r7}                            @ key_sch[i] to [i+4]; r1--
 839 0780 CCF80000 	    str     r0, [ip]                                @ InvShiftRows,InvSubBytes
 840 0784 CCF80080 	    str     r8, [ip]                                @ InvSubBytes
 841 0788 89E8F000 	    stmia   r9, {r4-r7}                             @ MixColumns
 842              	
 843 078c 31E9F000 	    ldmdb   r1!, {r4-r7}                            @ key_sch[i] to [i+4]; r1--
 844 0790 CCF80000 	    str     r0, [ip]                                @ InvShiftRows,InvSubBytes
 845 0794 CCF80080 	    str     r8, [ip]                                @ InvSubBytes
 846 0798 89E8F000 	    stmia   r9, {r4-r7}                             @ MixColumns
 847              	
ARM GAS  src/asm/mmcau_aes_functions.s 			page 17


 848 079c 0C2A     	    cmp     r2, $12                                 @ if aes192, finish
 849 079e 0FD0     	    beq     decrypt_end
 850              	
 851 07a0 31E9F000 	    ldmdb   r1!, {r4-r7}                            @ key_sch[i] to [i+4]; r1--
 852 07a4 CCF80000 	    str     r0, [ip]                                @ InvShiftRows,InvSubBytes
 853 07a8 CCF80080 	    str     r8, [ip]                                @ InvSubBytes
 854 07ac 89E8F000 	    stmia   r9, {r4-r7}                             @ MixColumns
 855              	
 856 07b0 31E9F000 	    ldmdb   r1!, {r4-r7}                            @ key_sch[i] to [i+4]; r1--
 857 07b4 CCF80000 	    str     r0, [ip]                                @ InvShiftRows,InvSubBytes
 858 07b8 CCF80080 	    str     r8, [ip]                                @ InvSubBytes
 859 07bc 89E8F000 	    stmia   r9, {r4-r7}                             @ MixColumns
 860              	
 861              	decrypt_end:
 862 07c0 CCF80000 	    str     r0, [ip]                                @ InvShiftRows,InvSubBytes
 863 07c4 CCF80080 	    str     r8, [ip]                                @ InvSubBytes
 864              	
 865              	# XOR the first 4 keys into CAO - CA3 plaintext output
 866 07c8 9AE8F000 	    ldmia   sl, {r4-r7}                             @ get CA0 - CA3
 867 07cc 31E9000F 	    ldmdb   r1!, {r8-fp}                            @ key_sch[i] to [i+4]; r1--
 868 07d0 84EA0804 	    eor     r4, r8
 869 07d4 85EA0905 	    eor     r5, r9
 870 07d8 86EA0A06 	    eor     r6, sl
 871 07dc 87EA0B07 	    eor     r7, fp
 872              	
 873              	# store the 16-byte plain text output block into memory
 874 07e0 24BA     	    rev     r4, r4                                  @ byte reverse
 875 07e2 2DBA     	    rev     r5, r5                                  @ byte reverse
 876 07e4 36BA     	    rev     r6, r6                                  @ byte reverse
 877 07e6 3FBA     	    rev     r7, r7                                  @ byte reverse
 878 07e8 83E8F000 	    stmia   r3, {r4-r7}                             @ save to output[0-3]
 879              	
 880 07ec BDE8F01F 	    ldmia   sp!, {r4-ip}                            @ restore regs and return
 881 07f0 7047     	    bx      lr
 882              	
 883              	#*******************************************************************************
 884              	
 885 07f2 00BFAFF3 	    .data
 885      0080AFF3 
 885      0080AFF3 
 885      0080
 886              	    .type   setkey_reg_data, %object
 887              	    .align  4
 888              	
 889              	setkey_reg_data:
 890 0000 50000000 	    .word   rcon                                                @ sl
 891 0004 000040A8 	    .word   MMCAU_1_CMD+(AESS+CAA)<<22                          @ fp
 892 0008 001008E0 	    .word   MMCAU_PPB_DIRECT                                    @ ip
 893              	
 894              	    .type   encrypt_reg_data, %object
 895 000c 00000000 	    .align  4
 896              	
 897              	encrypt_reg_data:
 898 0010 A41A95A8 	    .word   MMCAU_3_CMDS+(AESS+CA0)<<22+(AESS+CA1)<<11+AESS+CA2 @ r0
 899 0014 000057A9 	    .word   MMCAU_2_CMDS+(AESS+CA3)<<22+(AESR)<<11              @ r8
 900 0018 081B08E0 	    .word   MMCAU_PPB_INDIRECT+(AESC+CA0)<<2                    @ r9
 901 001c 881808E0 	    .word   MMCAU_PPB_INDIRECT+(STR+CA0)<<2                     @ sl
ARM GAS  src/asm/mmcau_aes_functions.s 			page 18


 902 0020 481808E0 	    .word   MMCAU_PPB_INDIRECT+(LDR+CA0)<<2                     @ fp
 903 0024 001008E0 	    .word   MMCAU_PPB_DIRECT                                    @ ip
 904              	
 905              	    .type   decrypt_reg_data, %object
 906 0028 00000000 	    .align  4
 906      00000000 
 907              	
 908              	decrypt_reg_data:
 909 0030 B4AA15BC 	    .word   MMCAU_3_CMDS+(AESIR)<<22+(AESIS+CA3)<<11+AESIS+CA2  @ r0
 910 0034 0090D5AC 	    .word   MMCAU_2_CMDS+(AESIS+CA1)<<22+(AESIS+CA0)<<11        @ r8
 911 0038 481B08E0 	    .word   MMCAU_PPB_INDIRECT+(AESIC+CA0)<<2                   @ r9
 912 003c 881808E0 	    .word   MMCAU_PPB_INDIRECT+(STR+CA0)<<2                     @ sl
 913 0040 481808E0 	    .word   MMCAU_PPB_INDIRECT+(LDR+CA0)<<2                     @ fp
 914 0044 001008E0 	    .word   MMCAU_PPB_DIRECT                                    @ ip
 915              	
 916              	    .type   rcon, %object
 917 0048 00000000 	    .align  4
 917      00000000 
 918              	
 919              	rcon:
 920 0050 00000001 	    .word 0x01000000
 921 0054 00000002 	    .word 0x02000000
 922 0058 00000004 	    .word 0x04000000
 923 005c 00000008 	    .word 0x08000000
 924 0060 00000010 	    .word 0x10000000
 925 0064 00000020 	    .word 0x20000000
 926 0068 00000040 	    .word 0x40000000
 927 006c 00000080 	    .word 0x80000000
 928 0070 0000001B 	    .word 0x1b000000
 929 0074 00000036 	    .word 0x36000000
 929      00000000 
 929      00000000 
