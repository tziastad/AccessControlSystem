                                    set     CASR,0
                                    set     CAA,1
                                    set     CA0,2
                                    set     CA1,3
                                    set     CA2,4
                                    set     CA3,5
                                    set     CA4,6
                                    set     CA5,7
                                    set     CA6,8
                                    set     CA7,9
                                    set     CA8,10
                                    set     CNOP,0x000
                                    set     LDR,0x010
                                    set     STR,0x020
                                    set     ADR,0x030
                                    set     RADR,0x040
                                    set     ADRA,0x050
                                    set     XOR,0x060
                                    set     ROTL,0x070
                                    set     MVRA,0x080
                                    set     MVAR,0x090
                                    set     AESS,0x0a0
                                    set     AESIS,0x0b0
                                    set     AESC,0x0c0
                                    set     AESIC,0x0d0
                                    set     AESR,0x0e0
                                    set     AESIR,0x0f0
                                    set     DESR,0x100
                                    set     DESK,0x110
                                    set     HASH,0x120
                                    set     SHS,0x130
                                    set     MDS,0x140
                                    set     SHS2,0x150
                                    set     ILL,0x1f0
                                    set     IP,8
                                    set     FP,4
                                    set     DC,1
                                    set     CP,2
                                    set     KSL1,0
                                    set     KSL2,1
                                    set     KSR1,2
                                    set     KSR2,3
                                    set     HFF,0
                                    set     HFG,1
                                    set     HFH,2
                                    set     HFI,3
                                    set     HFP,2
                                    set     HFC,4
                                    set     HFM,5
                                    set     HF2C,6
                                    set     HF2M,7
                                    set     HF2S,8
                                    set     HF2T,9
                                    set     HF2U,10
                                    set     HF2V,11
                                
                                #*******************************************************************************
                                #*******************************************************************************
                                #
                                # NOTE: Code alignment for the CAU library functions in this file is carefully
                                # constructed to maximize processor performance. The existing alignment should
                                # be maintained for best results!!
                                #
                                # The individual code segments for the functions are presented first, followed
                                # by a common read-only data area containing the required data constants.
                                #
                                #*******************************************************************************
                                #*******************************************************************************
                                
                                
                                #*******************************************************************************
                                #*******************************************************************************
                                #
                                # MD5: Initializes the MD5 state variables
                                #
                                #   arguments
                                #           *md5_state  pointer to 128-bit block of MD5 state variables:
                                #                           a,b,c,d
                                #
                                #   calling convention
                                #   void    cau_md5_initialize_output (unsigned char *md5_state)
                                
                                    global  _cau_md5_initialize_output
                                    global  cau_md5_initialize_output
                                    align   4
                                _cau_md5_initialize_output:
                                cau_md5_initialize_output:
00000: 206f 0004               	    mov.l   (4,%sp),%a0                 # get argument: *output
00004: 43fa 0eca               	    lea     (md5_init_h.w,%pc),%a1      # pointer to initial data
                                
                                # copy initial data into hash output buffer (16 bytes = 4 longwords)
00008: 20d9                    	    mov.l   (%a1)+,(%a0)+
0000a: 20d9                    	    mov.l   (%a1)+,(%a0)+
0000c: 20d9                    	    mov.l   (%a1)+,(%a0)+
0000e: 20d9                    	    mov.l   (%a1)+,(%a0)+
                                
00010: 4e75                    	    rts
                                
                                
                                #*******************************************************************************
                                #*******************************************************************************
                                #
                                # MD5: Perform the hash for one or more input message blocks and generate the
                                #      message digest output
                                #
                                #   arguments
                                #           *msg_data   pointer to start of input message data
                                #           num_blks    number of 512-bit blocks to process
                                #           *md5_state  pointer to 128-bit block of MD5 state variables: a,b,c,d
                                #
                                #   calling convention
                                #   void    cau_md5_hash_n (const unsigned char *msg_data,
                                #                           const int            num_blks,
                                #                           unsigned char       *md5_state)
                                
                                    global  _cau_md5_hash_n
                                    global  cau_md5_hash_n
                                    align   4
                                _cau_md5_hash_n:
                                cau_md5_hash_n:
00014: 4e56 fff0               	    link    %a6,&-16                    # temp stack space for 4 regs
00018: 48d7 04e0               	    movm.l  &0x04e0,(%sp)               # save d5/d6/d7/a2
0001c: 206e 0008               	    mov.l   (8,%a6),%a0                 # get 1st argument: *msg_data
00020: 226e 0010               	    mov.l   (16,%a6),%a1                # get 3rd argument: *md5_state
                                
00024: 4cd1 00c3               	    movm.l  (%a1),&0x00c3               # load a,b,c,d -> d0/d1/d6/d7
00028: 02c0                    	    byterev %d0
0002a: 02c1                    	    byterev %d1
0002c: 02c6                    	    byterev %d6
0002e: 02c7                    	    byterev %d7
00030: fc80 0011               	    cp0ld.l %d0,&LDR+CAA                # load byterev a -> CAA
00034: fc81 0013               	    cp0ld.l %d1,&LDR+CA1                # load byterev b -> CA1
00038: fc86 0014               	    cp0ld.l %d6,&LDR+CA2                # load byterev c -> CA2
0003c: fc87 0015               	    cp0ld.l %d7,&LDR+CA3                # load byterev d -> CA3
                                
00040: 202e 000c               	    mov.l   (12,%a6),%d0                # get 2nd argument: num_blks
                                    align   4
                                cau_md5_hash_n_L%0:
00044: 45fa 0e9a               	    lea     (md5_t.w,%pc),%a2           # pointer to t[*]
                                
                                # 16 rounds with F()
                                
00048: 7207                    	    movq.l  &7,%d1                      # for rotating by 7
0004a: 7a0c                    	    movq.l  &12,%d5                     # for rotating by 12
0004c: 7c11                    	    movq.l  &17,%d6                     # for rotating by 17
0004e: 7e16                    	    movq.l  &22,%d7                     # for rotating by 22
                                
00050: fc80 0120               	    cp0ld.l &HASH+HFF                   # add F(b,c,d)
00054: fc98 0041               	    cp0ld.l (%a0)+,&RADR+CAA            # add byterev x[0]
00058: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[0]
0005c: fc81 0071               	    cp0ld.l %d1,&ROTL+CAA               # rotate by 7
00060: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add b
00064: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
00068: fc80 0120               	    cp0ld.l &HASH+HFF                   # add F(a,b,c)
0006c: fc98 0041               	    cp0ld.l (%a0)+,&RADR+CAA            # add byterev x[1]
00070: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[1]
00074: fc85 0071               	    cp0ld.l %d5,&ROTL+CAA               # rotate by 12
00078: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add a
0007c: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
00080: fc80 0120               	    cp0ld.l &HASH+HFF                   # add F(d,a,b)
00084: fc98 0041               	    cp0ld.l (%a0)+,&RADR+CAA            # add byterev x[2]
00088: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[2]
0008c: fc86 0071               	    cp0ld.l %d6,&ROTL+CAA               # rotate by 17
00090: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add d
00094: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
00098: fc80 0120               	    cp0ld.l &HASH+HFF                   # add F(c,d,a)
0009c: fc98 0041               	    cp0ld.l (%a0)+,&RADR+CAA            # add byterev x[3]
000a0: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[3]
000a4: fc87 0071               	    cp0ld.l %d7,&ROTL+CAA               # rotate by 22
000a8: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add c
000ac: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
000b0: fc80 0120               	    cp0ld.l &HASH+HFF                   # add F(b,c,d)
000b4: fc98 0041               	    cp0ld.l (%a0)+,&RADR+CAA            # add byterev x[4]
000b8: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[4]
000bc: fc81 0071               	    cp0ld.l %d1,&ROTL+CAA               # rotate by 7
000c0: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add b
000c4: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
000c8: fc80 0120               	    cp0ld.l &HASH+HFF                   # add F(a,b,c)
000cc: fc98 0041               	    cp0ld.l (%a0)+,&RADR+CAA            # add byterev x[5]
000d0: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[5]
000d4: fc85 0071               	    cp0ld.l %d5,&ROTL+CAA               # rotate by 12
000d8: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add a
000dc: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
000e0: fc80 0120               	    cp0ld.l &HASH+HFF                   # add F(d,a,b)
000e4: fc98 0041               	    cp0ld.l (%a0)+,&RADR+CAA            # add byterev x[6]
000e8: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[6]
000ec: fc86 0071               	    cp0ld.l %d6,&ROTL+CAA               # rotate by 17
000f0: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add d
000f4: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
000f8: fc80 0120               	    cp0ld.l &HASH+HFF                   # add F(c,d,a)
000fc: fc98 0041               	    cp0ld.l (%a0)+,&RADR+CAA            # add byterev x[7]
00100: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[7]
00104: fc87 0071               	    cp0ld.l %d7,&ROTL+CAA               # rotate by 22
00108: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add c
0010c: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
00110: fc80 0120               	    cp0ld.l &HASH+HFF                   # add F(b,c,d)
00114: fc98 0041               	    cp0ld.l (%a0)+,&RADR+CAA            # add byterev x[8]
00118: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[8]
0011c: fc81 0071               	    cp0ld.l %d1,&ROTL+CAA               # rotate by 7
00120: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add b
00124: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
00128: fc80 0120               	    cp0ld.l &HASH+HFF                   # add F(a,b,c)
0012c: fc98 0041               	    cp0ld.l (%a0)+,&RADR+CAA            # add byterev x[9]
00130: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[9]
00134: fc85 0071               	    cp0ld.l %d5,&ROTL+CAA               # rotate by 12
00138: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add a
0013c: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
00140: fc80 0120               	    cp0ld.l &HASH+HFF                   # add F(d,a,b)
00144: fc98 0041               	    cp0ld.l (%a0)+,&RADR+CAA            # add byterev x[10]
00148: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[10]
0014c: fc86 0071               	    cp0ld.l %d6,&ROTL+CAA               # rotate by 17
00150: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add d
00154: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
00158: fc80 0120               	    cp0ld.l &HASH+HFF                   # add F(c,d,a)
0015c: fc98 0041               	    cp0ld.l (%a0)+,&RADR+CAA            # add byterev x[11]
00160: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[11]
00164: fc87 0071               	    cp0ld.l %d7,&ROTL+CAA               # rotate by 22
00168: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add c
0016c: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
00170: fc80 0120               	    cp0ld.l &HASH+HFF                   # add F(b,c,d)
00174: fc98 0041               	    cp0ld.l (%a0)+,&RADR+CAA            # add byterev x[12]
00178: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[12]
0017c: fc81 0071               	    cp0ld.l %d1,&ROTL+CAA               # rotate by 7
00180: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add b
00184: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
00188: fc80 0120               	    cp0ld.l &HASH+HFF                   # add F(a,b,c)
0018c: fc98 0041               	    cp0ld.l (%a0)+,&RADR+CAA            # add byterev x[13]
00190: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[13]
00194: fc85 0071               	    cp0ld.l %d5,&ROTL+CAA               # rotate by 12
00198: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add a
0019c: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
001a0: fc80 0120               	    cp0ld.l &HASH+HFF                   # add F(d,a,b)
001a4: fc98 0041               	    cp0ld.l (%a0)+,&RADR+CAA            # add byterev x[14]
001a8: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[14]
001ac: fc86 0071               	    cp0ld.l %d6,&ROTL+CAA               # rotate by 17
001b0: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add d
001b4: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
001b8: fc80 0120               	    cp0ld.l &HASH+HFF                   # add F(c,d,a)
001bc: fc98 0041               	    cp0ld.l (%a0)+,&RADR+CAA            # add byterev x[15]
001c0: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[15]
001c4: fc87 0071               	    cp0ld.l %d7,&ROTL+CAA               # rotate by 22
001c8: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add c
001cc: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
                                # 16 rounds with G()
                                
001d0: 41e8 ffc4               	    lea     (-60,%a0),%a0               # adjust pointer to x[1]: base+4
001d4: 7205                    	    movq.l  &5,%d1                      # for rotating by 5
001d6: 7a09                    	    movq.l  &9,%d5                      # for rotating by 9
001d8: 7c0e                    	    movq.l  &14,%d6                     # for rotating by 14
001da: 7e14                    	    movq.l  &20,%d7                     # for rotating by 20
                                
001dc: fc80 0121               	    cp0ld.l &HASH+HFG                   # add G(b,c,d)
001e0: fc90 0041               	    cp0ld.l (%a0),&RADR+CAA             # add byterev x[1]
001e4: 41e8 0014               	    lea     (20,%a0),%a0                # adjust pointer to x[6]: base+24
001e8: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[16]
001ec: fc81 0071               	    cp0ld.l %d1,&ROTL+CAA               # rotate by 5
001f0: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add b
001f4: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
001f8: fc80 0121               	    cp0ld.l &HASH+HFG                   # add G(a,b,c)
001fc: fc90 0041               	    cp0ld.l (%a0),&RADR+CAA             # add byterev x[6]
00200: 41e8 0014               	    lea     (20,%a0),%a0                # adjust pointer to x[11]: base+44
00204: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[17]
00208: fc85 0071               	    cp0ld.l %d5,&ROTL+CAA               # rotate by 9
0020c: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add a
00210: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
00214: fc80 0121               	    cp0ld.l &HASH+HFG                   # add G(d,a,b)
00218: fc90 0041               	    cp0ld.l (%a0),&RADR+CAA             # add byterev x[11]
0021c: 41e8 ffd4               	    lea     (-44,%a0),%a0               # adjust pointer to x[0]: base+0
00220: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[18]
00224: fc86 0071               	    cp0ld.l %d6,&ROTL+CAA               # rotate by 14
00228: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add d
0022c: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
00230: fc80 0121               	    cp0ld.l &HASH+HFG                   # add G(c,d,a)
00234: fc90 0041               	    cp0ld.l (%a0),&RADR+CAA             # add byterev x[0]
00238: 41e8 0014               	    lea     (20,%a0),%a0                # adjust pointer to x[5]: base+20
0023c: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[19]
00240: fc87 0071               	    cp0ld.l %d7,&ROTL+CAA               # rotate by 20
00244: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add c
00248: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
0024c: fc80 0121               	    cp0ld.l &HASH+HFG                   # add G(b,c,d)
00250: fc90 0041               	    cp0ld.l (%a0),&RADR+CAA             # add byterev x[5]
00254: 41e8 0014               	    lea     (20,%a0),%a0                # adjust pointer to x[10]: base+40
00258: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[20]
0025c: fc81 0071               	    cp0ld.l %d1,&ROTL+CAA               # rotate by 5
00260: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add b
00264: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
00268: fc80 0121               	    cp0ld.l &HASH+HFG                   # add G(a,b,c)
0026c: fc90 0041               	    cp0ld.l (%a0),&RADR+CAA             # add byterev x[10]
00270: 41e8 0014               	    lea     (20,%a0),%a0                # adjust pointer to x[15]: base+60
00274: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[21]
00278: fc85 0071               	    cp0ld.l %d5,&ROTL+CAA               # rotate by 9
0027c: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add a
00280: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
00284: fc80 0121               	    cp0ld.l &HASH+HFG                   # add G(d,a,b)
00288: fc90 0041               	    cp0ld.l (%a0),&RADR+CAA             # add byterev x[15]
0028c: 41e8 ffd4               	    lea     (-44,%a0),%a0               # adjust pointer to x[4]: base+16
00290: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[22]
00294: fc86 0071               	    cp0ld.l %d6,&ROTL+CAA               # rotate by 14
00298: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add d
0029c: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
002a0: fc80 0121               	    cp0ld.l &HASH+HFG                   # add G(c,d,a)
002a4: fc90 0041               	    cp0ld.l (%a0),&RADR+CAA             # add byterev x[4]
002a8: 41e8 0014               	    lea     (20,%a0),%a0                # adjust pointer to x[9]: base+36
002ac: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[23]
002b0: fc87 0071               	    cp0ld.l %d7,&ROTL+CAA               # rotate by 20
002b4: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add c
002b8: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
002bc: fc80 0121               	    cp0ld.l &HASH+HFG                   # add G(b,c,d)
002c0: fc90 0041               	    cp0ld.l (%a0),&RADR+CAA             # add byterev x[9]
002c4: 41e8 0014               	    lea     (20,%a0),%a0                # adjust pointer to x[14]: base+56
002c8: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[24]
002cc: fc81 0071               	    cp0ld.l %d1,&ROTL+CAA               # rotate by 5
002d0: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add b
002d4: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
002d8: fc80 0121               	    cp0ld.l &HASH+HFG                   # add G(a,b,c)
002dc: fc90 0041               	    cp0ld.l (%a0),&RADR+CAA             # add byterev x[14]
002e0: 41e8 ffd4               	    lea     (-44,%a0),%a0               # adjust pointer to x[3]: base+12
002e4: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[25]
002e8: fc85 0071               	    cp0ld.l %d5,&ROTL+CAA               # rotate by 9
002ec: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add a
002f0: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
002f4: fc80 0121               	    cp0ld.l &HASH+HFG                   # add G(d,a,b)
002f8: fc90 0041               	    cp0ld.l (%a0),&RADR+CAA             # add byterev x[3]
002fc: 41e8 0014               	    lea     (20,%a0),%a0                # adjust pointer to x[8]: base+32
00300: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[26]
00304: fc86 0071               	    cp0ld.l %d6,&ROTL+CAA               # rotate by 14
00308: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add d
0030c: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
00310: fc80 0121               	    cp0ld.l &HASH+HFG                   # add G(c,d,a)
00314: fc90 0041               	    cp0ld.l (%a0),&RADR+CAA             # add byterev x[8]
00318: 41e8 0014               	    lea     (20,%a0),%a0                # adjust pointer to x[13]: base+52
0031c: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[27]
00320: fc87 0071               	    cp0ld.l %d7,&ROTL+CAA               # rotate by 20
00324: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add c
00328: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
0032c: fc80 0121               	    cp0ld.l &HASH+HFG                   # add G(b,c,d)
00330: fc90 0041               	    cp0ld.l (%a0),&RADR+CAA             # add byterev x[13]
00334: 41e8 ffd4               	    lea     (-44,%a0),%a0               # adjust pointer to x[2]: base+8
00338: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[28]
0033c: fc81 0071               	    cp0ld.l %d1,&ROTL+CAA               # rotate by 5
00340: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add b
00344: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
00348: fc80 0121               	    cp0ld.l &HASH+HFG                   # add G(a,b,c)
0034c: fc90 0041               	    cp0ld.l (%a0),&RADR+CAA             # add byterev x[2]
00350: 41e8 0014               	    lea     (20,%a0),%a0                # adjust pointer to x[7]: base+28
00354: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[29]
00358: fc85 0071               	    cp0ld.l %d5,&ROTL+CAA               # rotate by 9
0035c: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add a
00360: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
00364: fc80 0121               	    cp0ld.l &HASH+HFG                   # add G(d,a,b)
00368: fc90 0041               	    cp0ld.l (%a0),&RADR+CAA             # add byterev x[7]
0036c: 41e8 0014               	    lea     (20,%a0),%a0                # adjust pointer to x[12]: base+48
00370: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[30]
00374: fc86 0071               	    cp0ld.l %d6,&ROTL+CAA               # rotate by 14
00378: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add d
0037c: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
00380: fc80 0121               	    cp0ld.l &HASH+HFG                   # add G(c,d,a)
00384: fc90 0041               	    cp0ld.l (%a0),&RADR+CAA             # add byterev x[12]
00388: 41e8 ffe4               	    lea     (-28,%a0),%a0               # adjust pointer to x[5]: base+20
0038c: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[31]
00390: fc87 0071               	    cp0ld.l %d7,&ROTL+CAA               # rotate by 20
00394: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add c
00398: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
                                # 16 rounds with H()
                                
0039c: 7204                    	    movq.l  &4,%d1                      # for rotating by 4
0039e: 7a0b                    	    movq.l  &11,%d5                     # for rotating by 11
003a0: 7c10                    	    movq.l  &16,%d6                     # for rotating by 16
003a2: 7e17                    	    movq.l  &23,%d7                     # for rotating by 23
                                
003a4: fc80 0122               	    cp0ld.l &HASH+HFH                   # add H(b,c,d)
003a8: fc90 0041               	    cp0ld.l (%a0),&RADR+CAA             # add byterev x[5]
003ac: 41e8 000c               	    lea     (12,%a0),%a0                # adjust pointer to x[8]: base+32
003b0: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[32]
003b4: fc81 0071               	    cp0ld.l %d1,&ROTL+CAA               # rotate by 4
003b8: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add b
003bc: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
003c0: fc80 0122               	    cp0ld.l &HASH+HFH                   # add H(a,b,c)
003c4: fc90 0041               	    cp0ld.l (%a0),&RADR+CAA             # add byterev x[8]
003c8: 41e8 000c               	    lea     (12,%a0),%a0                # adjust pointer to x[11]: base+44
003cc: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[33]
003d0: fc85 0071               	    cp0ld.l %d5,&ROTL+CAA               # rotate by 11
003d4: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add a
003d8: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
003dc: fc80 0122               	    cp0ld.l &HASH+HFH                   # add H(d,a,b)
003e0: fc90 0041               	    cp0ld.l (%a0),&RADR+CAA             # add byterev x[11]
003e4: 41e8 000c               	    lea     (12,%a0),%a0                # adjust pointer to x[14]: base+56
003e8: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[34]
003ec: fc86 0071               	    cp0ld.l %d6,&ROTL+CAA               # rotate by 16
003f0: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add d
003f4: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
003f8: fc80 0122               	    cp0ld.l &HASH+HFH                   # add H(c,d,a)
003fc: fc90 0041               	    cp0ld.l (%a0),&RADR+CAA             # add byterev x[14]
00400: 41e8 ffcc               	    lea     (-52,%a0),%a0               # adjust pointer to x[1]: base+4
00404: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[35]
00408: fc87 0071               	    cp0ld.l %d7,&ROTL+CAA               # rotate by 23
0040c: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add c
00410: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
00414: fc80 0122               	    cp0ld.l &HASH+HFH                   # add H(b,c,d)
00418: fc90 0041               	    cp0ld.l (%a0),&RADR+CAA             # add byterev x[1]
0041c: 41e8 000c               	    lea     (12,%a0),%a0                # adjust pointer to x[4]: base+16
00420: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[36]
00424: fc81 0071               	    cp0ld.l %d1,&ROTL+CAA               # rotate by 4
00428: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add b
0042c: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
00430: fc80 0122               	    cp0ld.l &HASH+HFH                   # add H(a,b,c)
00434: fc90 0041               	    cp0ld.l (%a0),&RADR+CAA             # add byterev x[4]
00438: 41e8 000c               	    lea     (12,%a0),%a0                # adjust pointer to x[7]: base+28
0043c: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[37]
00440: fc85 0071               	    cp0ld.l %d5,&ROTL+CAA               # rotate by 11
00444: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add a
00448: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
0044c: fc80 0122               	    cp0ld.l &HASH+HFH                   # add H(d,a,b)
00450: fc90 0041               	    cp0ld.l (%a0),&RADR+CAA             # add byterev x[7]
00454: 41e8 000c               	    lea     (12,%a0),%a0                # adjust pointer to x[10]: base+40
00458: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[38]
0045c: fc86 0071               	    cp0ld.l %d6,&ROTL+CAA               # rotate by 16
00460: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add d
00464: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
00468: fc80 0122               	    cp0ld.l &HASH+HFH                   # add H(c,d,a)
0046c: fc90 0041               	    cp0ld.l (%a0),&RADR+CAA             # add byterev x[10]
00470: 41e8 000c               	    lea     (12,%a0),%a0                # adjust pointer to x[13]: base+52
00474: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[39]
00478: fc87 0071               	    cp0ld.l %d7,&ROTL+CAA               # rotate by 23
0047c: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add c
00480: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
00484: fc80 0122               	    cp0ld.l &HASH+HFH                   # add H(b,c,d)
00488: fc90 0041               	    cp0ld.l (%a0),&RADR+CAA             # add byterev x[13]
0048c: 41e8 ffcc               	    lea     (-52,%a0),%a0               # adjust pointer to x[0]: base+0
00490: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[40]
00494: fc81 0071               	    cp0ld.l %d1,&ROTL+CAA               # rotate by 4
00498: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add b
0049c: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
004a0: fc80 0122               	    cp0ld.l &HASH+HFH                   # add H(a,b,c)
004a4: fc90 0041               	    cp0ld.l (%a0),&RADR+CAA             # add byterev x[0]
004a8: 41e8 000c               	    lea     (12,%a0),%a0                # adjust pointer to x[3]: base+12
004ac: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[41]
004b0: fc85 0071               	    cp0ld.l %d5,&ROTL+CAA               # rotate by 11
004b4: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add a
004b8: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
004bc: fc80 0122               	    cp0ld.l &HASH+HFH                   # add H(d,a,b)
004c0: fc90 0041               	    cp0ld.l (%a0),&RADR+CAA             # add byterev x[3]
004c4: 41e8 000c               	    lea     (12,%a0),%a0                # adjust pointer to x[6]: base+24
004c8: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[42]
004cc: fc86 0071               	    cp0ld.l %d6,&ROTL+CAA               # rotate by 16
004d0: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add d
004d4: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
004d8: fc80 0122               	    cp0ld.l &HASH+HFH                   # add H(c,d,a)
004dc: fc90 0041               	    cp0ld.l (%a0),&RADR+CAA             # add byterev x[6]
004e0: 41e8 000c               	    lea     (12,%a0),%a0                # adjust pointer to x[9]: base+36
004e4: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[43]
004e8: fc87 0071               	    cp0ld.l %d7,&ROTL+CAA               # rotate by 23
004ec: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add c
004f0: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
004f4: fc80 0122               	    cp0ld.l &HASH+HFH                   # add H(b,c,d)
004f8: fc90 0041               	    cp0ld.l (%a0),&RADR+CAA             # add byterev x[9]
004fc: 41e8 000c               	    lea     (12,%a0),%a0                # adjust pointer to x[12]: base+48
00500: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[44]
00504: fc81 0071               	    cp0ld.l %d1,&ROTL+CAA               # rotate by 4
00508: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add b
0050c: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
00510: fc80 0122               	    cp0ld.l &HASH+HFH                   # add H(a,b,c)
00514: fc90 0041               	    cp0ld.l (%a0),&RADR+CAA             # add byterev x[12]
00518: 41e8 000c               	    lea     (12,%a0),%a0                # adjust pointer to x[15]: base+60
0051c: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[45]
00520: fc85 0071               	    cp0ld.l %d5,&ROTL+CAA               # rotate by 11
00524: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add a
00528: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
0052c: fc80 0122               	    cp0ld.l &HASH+HFH                   # add H(d,a,b)
00530: fc90 0041               	    cp0ld.l (%a0),&RADR+CAA             # add byterev x[15]
00534: 41e8 ffcc               	    lea     (-52,%a0),%a0               # adjust pointer to x[2]: base+8
00538: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[46]
0053c: fc86 0071               	    cp0ld.l %d6,&ROTL+CAA               # rotate by 16
00540: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add d
00544: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
00548: fc80 0122               	    cp0ld.l &HASH+HFH                   # add H(c,d,a)
0054c: fc90 0041               	    cp0ld.l (%a0),&RADR+CAA             # add byterev x[2]
00550: 41e8 fff8               	    lea     (-8,%a0),%a0                # adjust pointer to x[0]: base+0
00554: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[47]
00558: fc87 0071               	    cp0ld.l %d7,&ROTL+CAA               # rotate by 23
0055c: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add c
00560: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
                                # 16 rounds with I()
                                
00564: 7206                    	    movq.l  &6,%d1                      # for rotating by 6
00566: 7a0a                    	    movq.l  &10,%d5                     # for rotating by 10
00568: 7c0f                    	    movq.l  &15,%d6                     # for rotating by 15
0056a: 7e15                    	    movq.l  &21,%d7                     # for rotating by 21
                                
0056c: fc80 0123               	    cp0ld.l &HASH+HFI                   # add I(b,c,d)
00570: fc90 0041               	    cp0ld.l (%a0),&RADR+CAA             # add byterev x[0]
00574: 41e8 001c               	    lea     (28,%a0),%a0                # adjust pointer to x[7]: base+28
00578: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[48]
0057c: fc81 0071               	    cp0ld.l %d1,&ROTL+CAA               # rotate by 6
00580: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add b
00584: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
00588: fc80 0123               	    cp0ld.l &HASH+HFI                   # add I(a,b,c)
0058c: fc90 0041               	    cp0ld.l (%a0),&RADR+CAA             # add byterev x[7]
00590: 41e8 001c               	    lea     (28,%a0),%a0                # adjust pointer to x[14]: base+56
00594: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[49]
00598: fc85 0071               	    cp0ld.l %d5,&ROTL+CAA               # rotate by 10
0059c: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add a
005a0: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
005a4: fc80 0123               	    cp0ld.l &HASH+HFI                   # add I(d,a,b)
005a8: fc90 0041               	    cp0ld.l (%a0),&RADR+CAA             # add byterev x[14]
005ac: 41e8 ffdc               	    lea     (-36,%a0),%a0               # adjust pointer to x[5]: base+20
005b0: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[50]
005b4: fc86 0071               	    cp0ld.l %d6,&ROTL+CAA               # rotate by 15
005b8: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add d
005bc: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
005c0: fc80 0123               	    cp0ld.l &HASH+HFI                   # add I(c,d,a)
005c4: fc90 0041               	    cp0ld.l (%a0),&RADR+CAA             # add byterev x[5]
005c8: 41e8 001c               	    lea     (28,%a0),%a0                # adjust pointer to x[12]: base+48
005cc: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[51]
005d0: fc87 0071               	    cp0ld.l %d7,&ROTL+CAA               # rotate by 21
005d4: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add c
005d8: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
005dc: fc80 0123               	    cp0ld.l &HASH+HFI                   # add I(b,c,d)
005e0: fc90 0041               	    cp0ld.l (%a0),&RADR+CAA             # add byterev x[12]
005e4: 41e8 ffdc               	    lea     (-36,%a0),%a0               # adjust pointer to x[3]: base+12
005e8: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[52]
005ec: fc81 0071               	    cp0ld.l %d1,&ROTL+CAA               # rotate by 6
005f0: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add b
005f4: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
005f8: fc80 0123               	    cp0ld.l &HASH+HFI                   # add I(a,b,c)
005fc: fc90 0041               	    cp0ld.l (%a0),&RADR+CAA             # add byterev x[3]
00600: 41e8 001c               	    lea     (28,%a0),%a0                # adjust pointer to x[10]: base+40
00604: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[53]
00608: fc85 0071               	    cp0ld.l %d5,&ROTL+CAA               # rotate by 10
0060c: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add a
00610: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
00614: fc80 0123               	    cp0ld.l &HASH+HFI                   # add I(d,a,b)
00618: fc90 0041               	    cp0ld.l (%a0),&RADR+CAA             # add byterev x[10]
0061c: 41e8 ffdc               	    lea     (-36,%a0),%a0               # adjust pointer to x[1]: base+4
00620: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[54]
00624: fc86 0071               	    cp0ld.l %d6,&ROTL+CAA               # rotate by 15
00628: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add d
0062c: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
00630: fc80 0123               	    cp0ld.l &HASH+HFI                   # add I(c,d,a)
00634: fc90 0041               	    cp0ld.l (%a0),&RADR+CAA             # add byterev x[1]
00638: 41e8 001c               	    lea     (28,%a0),%a0                # adjust pointer to x[8]: base+32
0063c: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[55]
00640: fc87 0071               	    cp0ld.l %d7,&ROTL+CAA               # rotate by 21
00644: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add c
00648: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
0064c: fc80 0123               	    cp0ld.l &HASH+HFI                   # add I(b,c,d)
00650: fc90 0041               	    cp0ld.l (%a0),&RADR+CAA             # add byterev x[8]
00654: 41e8 001c               	    lea     (28,%a0),%a0                # adjust pointer to x[15]: base+60
00658: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[56]
0065c: fc81 0071               	    cp0ld.l %d1,&ROTL+CAA               # rotate by 6
00660: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add b
00664: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
00668: fc80 0123               	    cp0ld.l &HASH+HFI                   # add I(a,b,c)
0066c: fc90 0041               	    cp0ld.l (%a0),&RADR+CAA             # add byterev x[15]
00670: 41e8 ffdc               	    lea     (-36,%a0),%a0               # adjust pointer to x[6]: base+24
00674: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[57]
00678: fc85 0071               	    cp0ld.l %d5,&ROTL+CAA               # rotate by 10
0067c: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add a
00680: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
00684: fc80 0123               	    cp0ld.l &HASH+HFI                   # add I(d,a,b)
00688: fc90 0041               	    cp0ld.l (%a0),&RADR+CAA             # add byterev x[6]
0068c: 41e8 001c               	    lea     (28,%a0),%a0                # adjust pointer to x[13]: base+52
00690: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[58]
00694: fc86 0071               	    cp0ld.l %d6,&ROTL+CAA               # rotate by 15
00698: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add d
0069c: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
006a0: fc80 0123               	    cp0ld.l &HASH+HFI                   # add I(c,d,a)
006a4: fc90 0041               	    cp0ld.l (%a0),&RADR+CAA             # add byterev x[13]
006a8: 41e8 ffdc               	    lea     (-36,%a0),%a0               # adjust pointer to x[4]: base+16
006ac: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[59]
006b0: fc87 0071               	    cp0ld.l %d7,&ROTL+CAA               # rotate by 21
006b4: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add c
006b8: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
006bc: fc80 0123               	    cp0ld.l &HASH+HFI                   # add I(b,c,d)
006c0: fc90 0041               	    cp0ld.l (%a0),&RADR+CAA             # add byterev x[4]
006c4: 41e8 001c               	    lea     (28,%a0),%a0                # adjust pointer to x[11]: base+44
006c8: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[60]
006cc: fc81 0071               	    cp0ld.l %d1,&ROTL+CAA               # rotate by 6
006d0: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add b
006d4: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
006d8: fc80 0123               	    cp0ld.l &HASH+HFI                   # add I(a,b,c)
006dc: fc90 0041               	    cp0ld.l (%a0),&RADR+CAA             # add byterev x[11]
006e0: 41e8 ffdc               	    lea     (-36,%a0),%a0               # adjust pointer to x[2]: base+8
006e4: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[61]
006e8: fc85 0071               	    cp0ld.l %d5,&ROTL+CAA               # rotate by 10
006ec: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add a
006f0: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
006f4: fc80 0123               	    cp0ld.l &HASH+HFI                   # add I(d,a,b)
006f8: fc90 0041               	    cp0ld.l (%a0),&RADR+CAA             # add byterev x[2]
006fc: 41e8 001c               	    lea     (28,%a0),%a0                # adjust pointer to x[9]: base+36
00700: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[62]
00704: fc86 0071               	    cp0ld.l %d6,&ROTL+CAA               # rotate by 15
00708: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add d
0070c: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
00710: fc80 0123               	    cp0ld.l &HASH+HFI                   # add I(c,d,a)
00714: fc90 0041               	    cp0ld.l (%a0),&RADR+CAA             # add byterev x[9]
00718: 41e8 001c               	    lea     (28,%a0),%a0                # adjust pointer to next msg_data block
0071c: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[63]
00720: fc87 0071               	    cp0ld.l %d7,&ROTL+CAA               # rotate by 21
00724: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add c
00728: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
0072c: fc99 0041               	    cp0ld.l (%a1)+,&RADR+CAA            # add byterev a
00730: fc99 0043               	    cp0ld.l (%a1)+,&RADR+CA1            # add byterev b
00734: fc99 0044               	    cp0ld.l (%a1)+,&RADR+CA2            # add byterev c
00738: fc99 0045               	    cp0ld.l (%a1)+,&RADR+CA3            # add byterev d
                                
0073c: fd81 0021               	    cp0st.l %d1,&STR+CAA                # store a
00740: fd85 0023               	    cp0st.l %d5,&STR+CA1                # store b
00744: fd86 0024               	    cp0st.l %d6,&STR+CA2                # store c
00748: fd87 0025               	    cp0st.l %d7,&STR+CA3                # store d
0074c: 02c1                    	    byterev %d1
0074e: 02c5                    	    byterev %d5
00750: 02c6                    	    byterev %d6
00752: 02c7                    	    byterev %d7
00754: 43e9 fff0               	    lea     (-16,%a1),%a1
00758: 48d1 00e2               	    movm.l  &0x00e2,(%a1)               # store byterev a,b,c,d
                                
0075c: 5380                    	    subq.l  &1,%d0                      # decrement block counter
0075e: 6600 f8e4               	    bne.w   cau_md5_hash_n_L%0
                                
00762: 4cd7 04e0               	    movm.l  (%sp),&0x04e0               # restore d5/d6/d7/a2
00766: 4e5e                    	    unlk    %a6
00768: 4e75                    	    rts
                                
                                
                                #*******************************************************************************
                                #*******************************************************************************
                                #
                                # MD5: Updates MD5 state variables for one or more input message blocks
                                #
                                #   arguments
                                #           *msg_data   pointer to start of input message data
                                #           num_blks    number of 512-bit blocks to process
                                #           *md5_state  pointer to 128-bit block of MD5 state variables:
                                #                           a,b,c,d
                                #
                                #   calling convention
                                #   void    cau_md5_update (const unsigned char *msg_data,
                                #                           const int            num_blks,
                                #                           unsigned char       *md5_state)
                                
                                    global  _cau_md5_update
                                    global  cau_md5_update
                                    align   4
                                _cau_md5_update:
                                cau_md5_update:
0076c: 206f 000c               	    mov.l   (12,%sp),%a0                # get 3rd argument: *md5_state
00770: 43fa 075e               	    lea     (md5_init_h.w,%pc),%a1      # pointer to initial data
                                
                                # copy initial data into hash output buffer (16 bytes = 4 longwords)
00774: 20d9                    	    mov.l   (%a1)+,(%a0)+
00776: 20d9                    	    mov.l   (%a1)+,(%a0)+
00778: 20d9                    	    mov.l   (%a1)+,(%a0)+
0077a: 20d9                    	    mov.l   (%a1)+,(%a0)+
                                
0077c: 6000 f896               	    bra.w   cau_md5_hash_n
                                
                                
                                #*******************************************************************************
                                #*******************************************************************************
                                #
                                # MD5: Perform the hash for one input message block and generate the
                                #      message digest output
                                #
                                #   arguments
                                #           *msg_data   pointer to start of input message data
                                #           *md5_state  pointer to 128-bit block of MD5 state variables: a,b,c,d
                                #
                                #   calling convention
                                #   void    cau_md5_hash (const unsigned char *msg_data,
                                #                         unsigned char       *md5_state)
                                
                                    global  _cau_md5_hash
                                    global  cau_md5_hash
                                    align   4
                                _cau_md5_hash:
                                cau_md5_hash:
00780: 4e56 fff4               	    link    %a6,&-12                    # temp stack space for 3 regs
00784: 48d7 04c0               	    movm.l  &0x04c0,(%sp)               # save d6/d7/a2
00788: 206e 0008               	    mov.l   (8,%a6),%a0                 # get 1st argument: *msg_data
0078c: 226e 000c               	    mov.l   (12,%a6),%a1                # get 2nd argument: *md5_state
                                
00790: 4cd1 00c3               	    movm.l  (%a1),&0x00c3               # load a,b,c,d -> d0/d1/d6/d7
00794: 02c0                    	    byterev %d0
00796: 02c1                    	    byterev %d1
00798: 02c6                    	    byterev %d6
0079a: 02c7                    	    byterev %d7
0079c: fc80 0011               	    cp0ld.l %d0,&LDR+CAA                # load byterev a -> CAA
007a0: fc81 0013               	    cp0ld.l %d1,&LDR+CA1                # load byterev b -> CA1
007a4: fc86 0014               	    cp0ld.l %d6,&LDR+CA2                # load byterev c -> CA2
007a8: fc87 0015               	    cp0ld.l %d7,&LDR+CA3                # load byterev d -> CA3
                                
                                # 16 rounds with F()
                                
007ac: 45fa 0732               	    lea     (md5_t.w,%pc),%a2           # pointer to t[*]
007b0: 7207                    	    movq.l  &7,%d1                      # for rotating by 7
007b2: 700c                    	    movq.l  &12,%d0                     # for rotating by 12
007b4: 7c11                    	    movq.l  &17,%d6                     # for rotating by 17
007b6: 7e16                    	    movq.l  &22,%d7                     # for rotating by 22
                                
007b8: fc80 0120               	    cp0ld.l &HASH+HFF                   # add F(b,c,d)
007bc: fc98 0041               	    cp0ld.l (%a0)+,&RADR+CAA            # add byterev x[0]
007c0: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[0]
007c4: fc81 0071               	    cp0ld.l %d1,&ROTL+CAA               # rotate by 7
007c8: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add b
007cc: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
007d0: fc80 0120               	    cp0ld.l &HASH+HFF                   # add F(a,b,c)
007d4: fc98 0041               	    cp0ld.l (%a0)+,&RADR+CAA            # add byterev x[1]
007d8: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[1]
007dc: fc80 0071               	    cp0ld.l %d0,&ROTL+CAA               # rotate by 12
007e0: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add a
007e4: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
007e8: fc80 0120               	    cp0ld.l &HASH+HFF                   # add F(d,a,b)
007ec: fc98 0041               	    cp0ld.l (%a0)+,&RADR+CAA            # add byterev x[2]
007f0: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[2]
007f4: fc86 0071               	    cp0ld.l %d6,&ROTL+CAA               # rotate by 17
007f8: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add d
007fc: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
00800: fc80 0120               	    cp0ld.l &HASH+HFF                   # add F(c,d,a)
00804: fc98 0041               	    cp0ld.l (%a0)+,&RADR+CAA            # add byterev x[3]
00808: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[3]
0080c: fc87 0071               	    cp0ld.l %d7,&ROTL+CAA               # rotate by 22
00810: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add c
00814: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
00818: fc80 0120               	    cp0ld.l &HASH+HFF                   # add F(b,c,d)
0081c: fc98 0041               	    cp0ld.l (%a0)+,&RADR+CAA            # add byterev x[4]
00820: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[4]
00824: fc81 0071               	    cp0ld.l %d1,&ROTL+CAA               # rotate by 7
00828: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add b
0082c: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
00830: fc80 0120               	    cp0ld.l &HASH+HFF                   # add F(a,b,c)
00834: fc98 0041               	    cp0ld.l (%a0)+,&RADR+CAA            # add byterev x[5]
00838: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[5]
0083c: fc80 0071               	    cp0ld.l %d0,&ROTL+CAA               # rotate by 12
00840: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add a
00844: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
00848: fc80 0120               	    cp0ld.l &HASH+HFF                   # add F(d,a,b)
0084c: fc98 0041               	    cp0ld.l (%a0)+,&RADR+CAA            # add byterev x[6]
00850: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[6]
00854: fc86 0071               	    cp0ld.l %d6,&ROTL+CAA               # rotate by 17
00858: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add d
0085c: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
00860: fc80 0120               	    cp0ld.l &HASH+HFF                   # add F(c,d,a)
00864: fc98 0041               	    cp0ld.l (%a0)+,&RADR+CAA            # add byterev x[7]
00868: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[7]
0086c: fc87 0071               	    cp0ld.l %d7,&ROTL+CAA               # rotate by 22
00870: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add c
00874: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
00878: fc80 0120               	    cp0ld.l &HASH+HFF                   # add F(b,c,d)
0087c: fc98 0041               	    cp0ld.l (%a0)+,&RADR+CAA            # add byterev x[8]
00880: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[8]
00884: fc81 0071               	    cp0ld.l %d1,&ROTL+CAA               # rotate by 7
00888: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add b
0088c: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
00890: fc80 0120               	    cp0ld.l &HASH+HFF                   # add F(a,b,c)
00894: fc98 0041               	    cp0ld.l (%a0)+,&RADR+CAA            # add byterev x[9]
00898: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[9]
0089c: fc80 0071               	    cp0ld.l %d0,&ROTL+CAA               # rotate by 12
008a0: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add a
008a4: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
008a8: fc80 0120               	    cp0ld.l &HASH+HFF                   # add F(d,a,b)
008ac: fc98 0041               	    cp0ld.l (%a0)+,&RADR+CAA            # add byterev x[10]
008b0: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[10]
008b4: fc86 0071               	    cp0ld.l %d6,&ROTL+CAA               # rotate by 17
008b8: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add d
008bc: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
008c0: fc80 0120               	    cp0ld.l &HASH+HFF                   # add F(c,d,a)
008c4: fc98 0041               	    cp0ld.l (%a0)+,&RADR+CAA            # add byterev x[11]
008c8: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[11]
008cc: fc87 0071               	    cp0ld.l %d7,&ROTL+CAA               # rotate by 22
008d0: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add c
008d4: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
008d8: fc80 0120               	    cp0ld.l &HASH+HFF                   # add F(b,c,d)
008dc: fc98 0041               	    cp0ld.l (%a0)+,&RADR+CAA            # add byterev x[12]
008e0: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[12]
008e4: fc81 0071               	    cp0ld.l %d1,&ROTL+CAA               # rotate by 7
008e8: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add b
008ec: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
008f0: fc80 0120               	    cp0ld.l &HASH+HFF                   # add F(a,b,c)
008f4: fc98 0041               	    cp0ld.l (%a0)+,&RADR+CAA            # add byterev x[13]
008f8: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[13]
008fc: fc80 0071               	    cp0ld.l %d0,&ROTL+CAA               # rotate by 12
00900: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add a
00904: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
00908: fc80 0120               	    cp0ld.l &HASH+HFF                   # add F(d,a,b)
0090c: fc98 0041               	    cp0ld.l (%a0)+,&RADR+CAA            # add byterev x[14]
00910: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[14]
00914: fc86 0071               	    cp0ld.l %d6,&ROTL+CAA               # rotate by 17
00918: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add d
0091c: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
00920: fc80 0120               	    cp0ld.l &HASH+HFF                   # add F(c,d,a)
00924: fc98 0041               	    cp0ld.l (%a0)+,&RADR+CAA            # add byterev x[15]
00928: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[15]
0092c: fc87 0071               	    cp0ld.l %d7,&ROTL+CAA               # rotate by 22
00930: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add c
00934: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
                                # 16 rounds with G()
                                
00938: 41e8 ffc4               	    lea     (-60,%a0),%a0               # adjust pointer to x[1]: base+4
0093c: 7205                    	    movq.l  &5,%d1                      # for rotating by 5
0093e: 7009                    	    movq.l  &9,%d0                      # for rotating by 9
00940: 7c0e                    	    movq.l  &14,%d6                     # for rotating by 14
00942: 7e14                    	    movq.l  &20,%d7                     # for rotating by 20
                                
00944: fc80 0121               	    cp0ld.l &HASH+HFG                   # add G(b,c,d)
00948: fc90 0041               	    cp0ld.l (%a0),&RADR+CAA             # add byterev x[1]
0094c: 41e8 0014               	    lea     (20,%a0),%a0                # adjust pointer to x[6]: base+24
00950: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[16]
00954: fc81 0071               	    cp0ld.l %d1,&ROTL+CAA               # rotate by 5
00958: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add b
0095c: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
00960: fc80 0121               	    cp0ld.l &HASH+HFG                   # add G(a,b,c)
00964: fc90 0041               	    cp0ld.l (%a0),&RADR+CAA             # add byterev x[6]
00968: 41e8 0014               	    lea     (20,%a0),%a0                # adjust pointer to x[11]: base+44
0096c: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[17]
00970: fc80 0071               	    cp0ld.l %d0,&ROTL+CAA               # rotate by 9
00974: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add a
00978: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
0097c: fc80 0121               	    cp0ld.l &HASH+HFG                   # add G(d,a,b)
00980: fc90 0041               	    cp0ld.l (%a0),&RADR+CAA             # add byterev x[11]
00984: 41e8 ffd4               	    lea     (-44,%a0),%a0               # adjust pointer to x[0]: base+0
00988: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[18]
0098c: fc86 0071               	    cp0ld.l %d6,&ROTL+CAA               # rotate by 14
00990: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add d
00994: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
00998: fc80 0121               	    cp0ld.l &HASH+HFG                   # add G(c,d,a)
0099c: fc90 0041               	    cp0ld.l (%a0),&RADR+CAA             # add byterev x[0]
009a0: 41e8 0014               	    lea     (20,%a0),%a0                # adjust pointer to x[5]: base+20
009a4: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[19]
009a8: fc87 0071               	    cp0ld.l %d7,&ROTL+CAA               # rotate by 20
009ac: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add c
009b0: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
009b4: fc80 0121               	    cp0ld.l &HASH+HFG                   # add G(b,c,d)
009b8: fc90 0041               	    cp0ld.l (%a0),&RADR+CAA             # add byterev x[5]
009bc: 41e8 0014               	    lea     (20,%a0),%a0                # adjust pointer to x[10]: base+40
009c0: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[20]
009c4: fc81 0071               	    cp0ld.l %d1,&ROTL+CAA               # rotate by 5
009c8: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add b
009cc: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
009d0: fc80 0121               	    cp0ld.l &HASH+HFG                   # add G(a,b,c)
009d4: fc90 0041               	    cp0ld.l (%a0),&RADR+CAA             # add byterev x[10]
009d8: 41e8 0014               	    lea     (20,%a0),%a0                # adjust pointer to x[15]: base+60
009dc: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[21]
009e0: fc80 0071               	    cp0ld.l %d0,&ROTL+CAA               # rotate by 9
009e4: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add a
009e8: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
009ec: fc80 0121               	    cp0ld.l &HASH+HFG                   # add G(d,a,b)
009f0: fc90 0041               	    cp0ld.l (%a0),&RADR+CAA             # add byterev x[15]
009f4: 41e8 ffd4               	    lea     (-44,%a0),%a0               # adjust pointer to x[4]: base+16
009f8: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[22]
009fc: fc86 0071               	    cp0ld.l %d6,&ROTL+CAA               # rotate by 14
00a00: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add d
00a04: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
00a08: fc80 0121               	    cp0ld.l &HASH+HFG                   # add G(c,d,a)
00a0c: fc90 0041               	    cp0ld.l (%a0),&RADR+CAA             # add byterev x[4]
00a10: 41e8 0014               	    lea     (20,%a0),%a0                # adjust pointer to x[9]: base+36
00a14: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[23]
00a18: fc87 0071               	    cp0ld.l %d7,&ROTL+CAA               # rotate by 20
00a1c: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add c
00a20: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
00a24: fc80 0121               	    cp0ld.l &HASH+HFG                   # add G(b,c,d)
00a28: fc90 0041               	    cp0ld.l (%a0),&RADR+CAA             # add byterev x[9]
00a2c: 41e8 0014               	    lea     (20,%a0),%a0                # adjust pointer to x[14]: base+56
00a30: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[24]
00a34: fc81 0071               	    cp0ld.l %d1,&ROTL+CAA               # rotate by 5
00a38: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add b
00a3c: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
00a40: fc80 0121               	    cp0ld.l &HASH+HFG                   # add G(a,b,c)
00a44: fc90 0041               	    cp0ld.l (%a0),&RADR+CAA             # add byterev x[14]
00a48: 41e8 ffd4               	    lea     (-44,%a0),%a0               # adjust pointer to x[3]: base+12
00a4c: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[25]
00a50: fc80 0071               	    cp0ld.l %d0,&ROTL+CAA               # rotate by 9
00a54: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add a
00a58: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
00a5c: fc80 0121               	    cp0ld.l &HASH+HFG                   # add G(d,a,b)
00a60: fc90 0041               	    cp0ld.l (%a0),&RADR+CAA             # add byterev x[3]
00a64: 41e8 0014               	    lea     (20,%a0),%a0                # adjust pointer to x[8]: base+32
00a68: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[26]
00a6c: fc86 0071               	    cp0ld.l %d6,&ROTL+CAA               # rotate by 14
00a70: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add d
00a74: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
00a78: fc80 0121               	    cp0ld.l &HASH+HFG                   # add G(c,d,a)
00a7c: fc90 0041               	    cp0ld.l (%a0),&RADR+CAA             # add byterev x[8]
00a80: 41e8 0014               	    lea     (20,%a0),%a0                # adjust pointer to x[13]: base+52
00a84: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[27]
00a88: fc87 0071               	    cp0ld.l %d7,&ROTL+CAA               # rotate by 20
00a8c: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add c
00a90: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
00a94: fc80 0121               	    cp0ld.l &HASH+HFG                   # add G(b,c,d)
00a98: fc90 0041               	    cp0ld.l (%a0),&RADR+CAA             # add byterev x[13]
00a9c: 41e8 ffd4               	    lea     (-44,%a0),%a0               # adjust pointer to x[2]: base+8
00aa0: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[28]
00aa4: fc81 0071               	    cp0ld.l %d1,&ROTL+CAA               # rotate by 5
00aa8: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add b
00aac: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
00ab0: fc80 0121               	    cp0ld.l &HASH+HFG                   # add G(a,b,c)
00ab4: fc90 0041               	    cp0ld.l (%a0),&RADR+CAA             # add byterev x[2]
00ab8: 41e8 0014               	    lea     (20,%a0),%a0                # adjust pointer to x[7]: base+28
00abc: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[29]
00ac0: fc80 0071               	    cp0ld.l %d0,&ROTL+CAA               # rotate by 9
00ac4: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add a
00ac8: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
00acc: fc80 0121               	    cp0ld.l &HASH+HFG                   # add G(d,a,b)
00ad0: fc90 0041               	    cp0ld.l (%a0),&RADR+CAA             # add byterev x[7]
00ad4: 41e8 0014               	    lea     (20,%a0),%a0                # adjust pointer to x[12]: base+48
00ad8: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[30]
00adc: fc86 0071               	    cp0ld.l %d6,&ROTL+CAA               # rotate by 14
00ae0: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add d
00ae4: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
00ae8: fc80 0121               	    cp0ld.l &HASH+HFG                   # add G(c,d,a)
00aec: fc90 0041               	    cp0ld.l (%a0),&RADR+CAA             # add byterev x[12]
00af0: 41e8 ffe4               	    lea     (-28,%a0),%a0               # adjust pointer to x[5]: base+20
00af4: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[31]
00af8: fc87 0071               	    cp0ld.l %d7,&ROTL+CAA               # rotate by 20
00afc: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add c
00b00: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
                                # 16 rounds with H()
                                
00b04: 7204                    	    movq.l  &4,%d1                      # for rotating by 4
00b06: 700b                    	    movq.l  &11,%d0                     # for rotating by 11
00b08: 7c10                    	    movq.l  &16,%d6                     # for rotating by 16
00b0a: 7e17                    	    movq.l  &23,%d7                     # for rotating by 23
                                
00b0c: fc80 0122               	    cp0ld.l &HASH+HFH                   # add H(b,c,d)
00b10: fc90 0041               	    cp0ld.l (%a0),&RADR+CAA             # add byterev x[5]
00b14: 41e8 000c               	    lea     (12,%a0),%a0                # adjust pointer to x[8]: base+32
00b18: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[32]
00b1c: fc81 0071               	    cp0ld.l %d1,&ROTL+CAA               # rotate by 4
00b20: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add b
00b24: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
00b28: fc80 0122               	    cp0ld.l &HASH+HFH                   # add H(a,b,c)
00b2c: fc90 0041               	    cp0ld.l (%a0),&RADR+CAA             # add byterev x[8]
00b30: 41e8 000c               	    lea     (12,%a0),%a0                # adjust pointer to x[11]: base+44
00b34: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[33]
00b38: fc80 0071               	    cp0ld.l %d0,&ROTL+CAA               # rotate by 11
00b3c: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add a
00b40: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
00b44: fc80 0122               	    cp0ld.l &HASH+HFH                   # add H(d,a,b)
00b48: fc90 0041               	    cp0ld.l (%a0),&RADR+CAA             # add byterev x[11]
00b4c: 41e8 000c               	    lea     (12,%a0),%a0                # adjust pointer to x[14]: base+56
00b50: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[34]
00b54: fc86 0071               	    cp0ld.l %d6,&ROTL+CAA               # rotate by 16
00b58: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add d
00b5c: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
00b60: fc80 0122               	    cp0ld.l &HASH+HFH                   # add H(c,d,a)
00b64: fc90 0041               	    cp0ld.l (%a0),&RADR+CAA             # add byterev x[14]
00b68: 41e8 ffcc               	    lea     (-52,%a0),%a0               # adjust pointer to x[1]: base+4
00b6c: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[35]
00b70: fc87 0071               	    cp0ld.l %d7,&ROTL+CAA               # rotate by 23
00b74: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add c
00b78: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
00b7c: fc80 0122               	    cp0ld.l &HASH+HFH                   # add H(b,c,d)
00b80: fc90 0041               	    cp0ld.l (%a0),&RADR+CAA             # add byterev x[1]
00b84: 41e8 000c               	    lea     (12,%a0),%a0                # adjust pointer to x[4]: base+16
00b88: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[36]
00b8c: fc81 0071               	    cp0ld.l %d1,&ROTL+CAA               # rotate by 4
00b90: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add b
00b94: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
00b98: fc80 0122               	    cp0ld.l &HASH+HFH                   # add H(a,b,c)
00b9c: fc90 0041               	    cp0ld.l (%a0),&RADR+CAA             # add byterev x[4]
00ba0: 41e8 000c               	    lea     (12,%a0),%a0                # adjust pointer to x[7]: base+28
00ba4: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[37]
00ba8: fc80 0071               	    cp0ld.l %d0,&ROTL+CAA               # rotate by 11
00bac: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add a
00bb0: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
00bb4: fc80 0122               	    cp0ld.l &HASH+HFH                   # add H(d,a,b)
00bb8: fc90 0041               	    cp0ld.l (%a0),&RADR+CAA             # add byterev x[7]
00bbc: 41e8 000c               	    lea     (12,%a0),%a0                # adjust pointer to x[10]: base+40
00bc0: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[38]
00bc4: fc86 0071               	    cp0ld.l %d6,&ROTL+CAA               # rotate by 16
00bc8: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add d
00bcc: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
00bd0: fc80 0122               	    cp0ld.l &HASH+HFH                   # add H(c,d,a)
00bd4: fc90 0041               	    cp0ld.l (%a0),&RADR+CAA             # add byterev x[10]
00bd8: 41e8 000c               	    lea     (12,%a0),%a0                # adjust pointer to x[13]: base+52
00bdc: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[39]
00be0: fc87 0071               	    cp0ld.l %d7,&ROTL+CAA               # rotate by 23
00be4: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add c
00be8: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
00bec: fc80 0122               	    cp0ld.l &HASH+HFH                   # add H(b,c,d)
00bf0: fc90 0041               	    cp0ld.l (%a0),&RADR+CAA             # add byterev x[13]
00bf4: 41e8 ffcc               	    lea     (-52,%a0),%a0               # adjust pointer to x[0]: base+0
00bf8: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[40]
00bfc: fc81 0071               	    cp0ld.l %d1,&ROTL+CAA               # rotate by 4
00c00: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add b
00c04: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
00c08: fc80 0122               	    cp0ld.l &HASH+HFH                   # add H(a,b,c)
00c0c: fc90 0041               	    cp0ld.l (%a0),&RADR+CAA             # add byterev x[0]
00c10: 41e8 000c               	    lea     (12,%a0),%a0                # adjust pointer to x[3]: base+12
00c14: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[41]
00c18: fc80 0071               	    cp0ld.l %d0,&ROTL+CAA               # rotate by 11
00c1c: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add a
00c20: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
00c24: fc80 0122               	    cp0ld.l &HASH+HFH                   # add H(d,a,b)
00c28: fc90 0041               	    cp0ld.l (%a0),&RADR+CAA             # add byterev x[3]
00c2c: 41e8 000c               	    lea     (12,%a0),%a0                # adjust pointer to x[6]: base+24
00c30: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[42]
00c34: fc86 0071               	    cp0ld.l %d6,&ROTL+CAA               # rotate by 16
00c38: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add d
00c3c: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
00c40: fc80 0122               	    cp0ld.l &HASH+HFH                   # add H(c,d,a)
00c44: fc90 0041               	    cp0ld.l (%a0),&RADR+CAA             # add byterev x[6]
00c48: 41e8 000c               	    lea     (12,%a0),%a0                # adjust pointer to x[9]: base+36
00c4c: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[43]
00c50: fc87 0071               	    cp0ld.l %d7,&ROTL+CAA               # rotate by 23
00c54: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add c
00c58: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
00c5c: fc80 0122               	    cp0ld.l &HASH+HFH                   # add H(b,c,d)
00c60: fc90 0041               	    cp0ld.l (%a0),&RADR+CAA             # add byterev x[9]
00c64: 41e8 000c               	    lea     (12,%a0),%a0                # adjust pointer to x[12]: base+48
00c68: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[44]
00c6c: fc81 0071               	    cp0ld.l %d1,&ROTL+CAA               # rotate by 4
00c70: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add b
00c74: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
00c78: fc80 0122               	    cp0ld.l &HASH+HFH                   # add H(a,b,c)
00c7c: fc90 0041               	    cp0ld.l (%a0),&RADR+CAA             # add byterev x[12]
00c80: 41e8 000c               	    lea     (12,%a0),%a0                # adjust pointer to x[15]: base+60
00c84: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[45]
00c88: fc80 0071               	    cp0ld.l %d0,&ROTL+CAA               # rotate by 11
00c8c: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add a
00c90: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
00c94: fc80 0122               	    cp0ld.l &HASH+HFH                   # add H(d,a,b)
00c98: fc90 0041               	    cp0ld.l (%a0),&RADR+CAA             # add byterev x[15]
00c9c: 41e8 ffcc               	    lea     (-52,%a0),%a0               # adjust pointer to x[2]: base+8
00ca0: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[46]
00ca4: fc86 0071               	    cp0ld.l %d6,&ROTL+CAA               # rotate by 16
00ca8: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add d
00cac: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
00cb0: fc80 0122               	    cp0ld.l &HASH+HFH                   # add H(c,d,a)
00cb4: fc90 0041               	    cp0ld.l (%a0),&RADR+CAA             # add byterev x[2]
00cb8: 41e8 fff8               	    lea     (-8,%a0),%a0                # adjust pointer to x[0]: base+0
00cbc: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[47]
00cc0: fc87 0071               	    cp0ld.l %d7,&ROTL+CAA               # rotate by 23
00cc4: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add c
00cc8: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
                                # 16 rounds with I()
                                
00ccc: 7206                    	    movq.l  &6,%d1                      # for rotating by 6
00cce: 700a                    	    movq.l  &10,%d0                     # for rotating by 10
00cd0: 7c0f                    	    movq.l  &15,%d6                     # for rotating by 15
00cd2: 7e15                    	    movq.l  &21,%d7                     # for rotating by 21
                                
00cd4: fc80 0123               	    cp0ld.l &HASH+HFI                   # add I(b,c,d)
00cd8: fc90 0041               	    cp0ld.l (%a0),&RADR+CAA             # add byterev x[0]
00cdc: 41e8 001c               	    lea     (28,%a0),%a0                # adjust pointer to x[7]: base+28
00ce0: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[48]
00ce4: fc81 0071               	    cp0ld.l %d1,&ROTL+CAA               # rotate by 6
00ce8: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add b
00cec: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
00cf0: fc80 0123               	    cp0ld.l &HASH+HFI                   # add I(a,b,c)
00cf4: fc90 0041               	    cp0ld.l (%a0),&RADR+CAA             # add byterev x[7]
00cf8: 41e8 001c               	    lea     (28,%a0),%a0                # adjust pointer to x[14]: base+56
00cfc: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[49]
00d00: fc80 0071               	    cp0ld.l %d0,&ROTL+CAA               # rotate by 10
00d04: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add a
00d08: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
00d0c: fc80 0123               	    cp0ld.l &HASH+HFI                   # add I(d,a,b)
00d10: fc90 0041               	    cp0ld.l (%a0),&RADR+CAA             # add byterev x[14]
00d14: 41e8 ffdc               	    lea     (-36,%a0),%a0               # adjust pointer to x[5]: base+20
00d18: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[50]
00d1c: fc86 0071               	    cp0ld.l %d6,&ROTL+CAA               # rotate by 15
00d20: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add d
00d24: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
00d28: fc80 0123               	    cp0ld.l &HASH+HFI                   # add I(c,d,a)
00d2c: fc90 0041               	    cp0ld.l (%a0),&RADR+CAA             # add byterev x[5]
00d30: 41e8 001c               	    lea     (28,%a0),%a0                # adjust pointer to x[12]: base+48
00d34: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[51]
00d38: fc87 0071               	    cp0ld.l %d7,&ROTL+CAA               # rotate by 21
00d3c: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add c
00d40: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
00d44: fc80 0123               	    cp0ld.l &HASH+HFI                   # add I(b,c,d)
00d48: fc90 0041               	    cp0ld.l (%a0),&RADR+CAA             # add byterev x[12]
00d4c: 41e8 ffdc               	    lea     (-36,%a0),%a0               # adjust pointer to x[3]: base+12
00d50: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[52]
00d54: fc81 0071               	    cp0ld.l %d1,&ROTL+CAA               # rotate by 6
00d58: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add b
00d5c: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
00d60: fc80 0123               	    cp0ld.l &HASH+HFI                   # add I(a,b,c)
00d64: fc90 0041               	    cp0ld.l (%a0),&RADR+CAA             # add byterev x[3]
00d68: 41e8 001c               	    lea     (28,%a0),%a0                # adjust pointer to x[10]: base+40
00d6c: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[53]
00d70: fc80 0071               	    cp0ld.l %d0,&ROTL+CAA               # rotate by 10
00d74: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add a
00d78: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
00d7c: fc80 0123               	    cp0ld.l &HASH+HFI                   # add I(d,a,b)
00d80: fc90 0041               	    cp0ld.l (%a0),&RADR+CAA             # add byterev x[10]
00d84: 41e8 ffdc               	    lea     (-36,%a0),%a0               # adjust pointer to x[1]: base+4
00d88: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[54]
00d8c: fc86 0071               	    cp0ld.l %d6,&ROTL+CAA               # rotate by 15
00d90: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add d
00d94: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
00d98: fc80 0123               	    cp0ld.l &HASH+HFI                   # add I(c,d,a)
00d9c: fc90 0041               	    cp0ld.l (%a0),&RADR+CAA             # add byterev x[1]
00da0: 41e8 001c               	    lea     (28,%a0),%a0                # adjust pointer to x[8]: base+32
00da4: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[55]
00da8: fc87 0071               	    cp0ld.l %d7,&ROTL+CAA               # rotate by 21
00dac: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add c
00db0: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
00db4: fc80 0123               	    cp0ld.l &HASH+HFI                   # add I(b,c,d)
00db8: fc90 0041               	    cp0ld.l (%a0),&RADR+CAA             # add byterev x[8]
00dbc: 41e8 001c               	    lea     (28,%a0),%a0                # adjust pointer to x[15]: base+60
00dc0: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[56]
00dc4: fc81 0071               	    cp0ld.l %d1,&ROTL+CAA               # rotate by 6
00dc8: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add b
00dcc: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
00dd0: fc80 0123               	    cp0ld.l &HASH+HFI                   # add I(a,b,c)
00dd4: fc90 0041               	    cp0ld.l (%a0),&RADR+CAA             # add byterev x[15]
00dd8: 41e8 ffdc               	    lea     (-36,%a0),%a0               # adjust pointer to x[6]: base+24
00ddc: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[57]
00de0: fc80 0071               	    cp0ld.l %d0,&ROTL+CAA               # rotate by 10
00de4: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add a
00de8: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
00dec: fc80 0123               	    cp0ld.l &HASH+HFI                   # add I(d,a,b)
00df0: fc90 0041               	    cp0ld.l (%a0),&RADR+CAA             # add byterev x[6]
00df4: 41e8 001c               	    lea     (28,%a0),%a0                # adjust pointer to x[13]: base+52
00df8: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[58]
00dfc: fc86 0071               	    cp0ld.l %d6,&ROTL+CAA               # rotate by 15
00e00: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add d
00e04: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
00e08: fc80 0123               	    cp0ld.l &HASH+HFI                   # add I(c,d,a)
00e0c: fc90 0041               	    cp0ld.l (%a0),&RADR+CAA             # add byterev x[13]
00e10: 41e8 ffdc               	    lea     (-36,%a0),%a0               # adjust pointer to x[4]: base+16
00e14: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[59]
00e18: fc87 0071               	    cp0ld.l %d7,&ROTL+CAA               # rotate by 21
00e1c: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add c
00e20: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
00e24: fc80 0123               	    cp0ld.l &HASH+HFI                   # add I(b,c,d)
00e28: fc90 0041               	    cp0ld.l (%a0),&RADR+CAA             # add byterev x[4]
00e2c: 41e8 001c               	    lea     (28,%a0),%a0                # adjust pointer to x[11]: base+44
00e30: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[60]
00e34: fc81 0071               	    cp0ld.l %d1,&ROTL+CAA               # rotate by 6
00e38: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add b
00e3c: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
00e40: fc80 0123               	    cp0ld.l &HASH+HFI                   # add I(a,b,c)
00e44: fc90 0041               	    cp0ld.l (%a0),&RADR+CAA             # add byterev x[11]
00e48: 41e8 ffdc               	    lea     (-36,%a0),%a0               # adjust pointer to x[2]: base+8
00e4c: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[61]
00e50: fc80 0071               	    cp0ld.l %d0,&ROTL+CAA               # rotate by 10
00e54: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add a
00e58: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
00e5c: fc80 0123               	    cp0ld.l &HASH+HFI                   # add I(d,a,b)
00e60: fc90 0041               	    cp0ld.l (%a0),&RADR+CAA             # add byterev x[2]
00e64: 41e8 001c               	    lea     (28,%a0),%a0                # adjust pointer to x[9]: base+36
00e68: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[62]
00e6c: fc86 0071               	    cp0ld.l %d6,&ROTL+CAA               # rotate by 15
00e70: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add d
00e74: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
00e78: fc80 0123               	    cp0ld.l &HASH+HFI                   # add I(c,d,a)
00e7c: fc90 0041               	    cp0ld.l (%a0),&RADR+CAA             # add byterev x[9]
00e80: 41e8 001c               	    lea     (28,%a0),%a0                # adjust pointer to next msg_data block
00e84: fc9a 0031               	    cp0ld.l (%a2)+,&ADR+CAA             # add t[63]
00e88: fc87 0071               	    cp0ld.l %d7,&ROTL+CAA               # rotate by 21
00e8c: fc80 0053               	    cp0ld.l &ADRA+CA1                   # add c
00e90: fc80 0140               	    cp0ld.l &MDS                        # shift registers
                                    
00e94: fc99 0041               	    cp0ld.l (%a1)+,&RADR+CAA            # add byterev a
00e98: fc99 0043               	    cp0ld.l (%a1)+,&RADR+CA1            # add byterev b
00e9c: fc99 0044               	    cp0ld.l (%a1)+,&RADR+CA2            # add byterev c
00ea0: fc99 0045               	    cp0ld.l (%a1)+,&RADR+CA3            # add byterev d
                                
00ea4: fd80 0021               	    cp0st.l %d0,&STR+CAA                # store a
00ea8: fd81 0023               	    cp0st.l %d1,&STR+CA1                # store b
00eac: fd86 0024               	    cp0st.l %d6,&STR+CA2                # store c
00eb0: fd87 0025               	    cp0st.l %d7,&STR+CA3                # store d
00eb4: 02c0                    	    byterev %d0
00eb6: 02c1                    	    byterev %d1
00eb8: 02c6                    	    byterev %d6
00eba: 02c7                    	    byterev %d7
00ebc: 43e9 fff0               	    lea     (-16,%a1),%a1
00ec0: 48d1 00c3               	    movm.l  &0x00c3,(%a1)               # store byterev a,b,c,d
                                
00ec4: 4cd7 04c0               	    movm.l  (%sp),&0x04c0               # restore d6/d7/a2
00ec8: 4e5e                    	    unlk    %a6
00eca: 4e75                    	    rts
                                
                                
                                #*******************************************************************************
                                #*******************************************************************************
                                #
                                # CAU Constant Data
                                
                                    align   16
                                md5_init_h:
00ed0: 01234567                     long    0x01234567                  # initialize a
00ed4: 89abcdef                     long    0x89abcdef                  # initialize b
00ed8: fedcba98                     long    0xfedcba98                  # initialize c
00edc: 76543210                     long    0x76543210                  # initialize d
                                
                                    align   16
                                md5_t:
00ee0: d76aa478 e8c7b756            long    0xd76aa478, 0xe8c7b756, 0x242070db, 0xc1bdceee
00ee8: 242070db c1bdceee
00ef0: f57c0faf 4787c62a            long    0xf57c0faf, 0x4787c62a, 0xa8304613, 0xfd469501
00ef8: a8304613 fd469501
00f00: 698098d8 8b44f7af            long    0x698098d8, 0x8b44f7af, 0xffff5bb1, 0x895cd7be
00f08: ffff5bb1 895cd7be
00f10: 6b901122 fd987193            long    0x6b901122, 0xfd987193, 0xa679438e, 0x49b40821
00f18: a679438e 49b40821
00f20: f61e2562 c040b340            long    0xf61e2562, 0xc040b340, 0x265e5a51, 0xe9b6c7aa
00f28: 265e5a51 e9b6c7aa
00f30: d62f105d 02441453            long    0xd62f105d, 0x02441453, 0xd8a1e681, 0xe7d3fbc8
00f38: d8a1e681 e7d3fbc8
00f40: 21e1cde6 c33707d6            long    0x21e1cde6, 0xc33707d6, 0xf4d50d87, 0x455a14ed
00f48: f4d50d87 455a14ed
00f50: a9e3e905 fcefa3f8            long    0xa9e3e905, 0xfcefa3f8, 0x676f02d9, 0x8d2a4c8a
00f58: 676f02d9 8d2a4c8a
00f60: fffa3942 8771f681            long    0xfffa3942, 0x8771f681, 0x6d9d6122, 0xfde5380c
00f68: 6d9d6122 fde5380c
00f70: a4beea44 4bdecfa9            long    0xa4beea44, 0x4bdecfa9, 0xf6bb4b60, 0xbebfbc70
00f78: f6bb4b60 bebfbc70
00f80: 289b7ec6 eaa127fa            long    0x289b7ec6, 0xeaa127fa, 0xd4ef3085, 0x04881d05
00f88: d4ef3085 04881d05
00f90: d9d4d039 e6db99e5            long    0xd9d4d039, 0xe6db99e5, 0x1fa27cf8, 0xc4ac5665
00f98: 1fa27cf8 c4ac5665
00fa0: f4292244 432aff97            long    0xf4292244, 0x432aff97, 0xab9423a7, 0xfc93a039
00fa8: ab9423a7 fc93a039
00fb0: 655b59c3 8f0ccc92            long    0x655b59c3, 0x8f0ccc92, 0xffeff47d, 0x85845dd1
00fb8: ffeff47d 85845dd1
00fc0: 6fa87e4f fe2ce6e0            long    0x6fa87e4f, 0xfe2ce6e0, 0xa3014314, 0x4e0811a1
00fc8: a3014314 4e0811a1
00fd0: f7537e82 bd3af235            long    0xf7537e82, 0xbd3af235, 0x2ad7d2bb, 0xeb86d391
00fd8: 2ad7d2bb eb86d391
