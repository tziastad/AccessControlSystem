ARM GAS  src/mmcau_md5_functions.s 			page 1


   1              	# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
   2              	#
   3              	# Copyright (c) Freescale Semiconductor, Inc 2013.
   4              	#
   5              	# FILE NAME         : mmcau_md5_functions.s
   6              	# VERSION           : $Id:  $
   7              	# TYPE              : Source Cortex-M0+ assembly library code
   8              	# DEPARTMENT        : MCG R&D Core and Platforms
   9              	# AUTHOR            : Anthony (Teejay) Ciancio
  10              	# AUTHOR EMAIL      : teejay.ciancio@freescale.com
  11              	#
  12              	#  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #
  13              	#
  14              	# VERSION   DATE        AUTHOR          DESCRIPTION
  15              	# *******   ****        ******          ***********
  16              	# 1.0       2013-11     Ciancio         initial release, using the ARMv6-M ISA
  17              	#
  18              	# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
  19              	
  20              	
  21              	    .include "cau2_defines.hdr"
   1              	#ifndef _MMCAU_H_
   2              	#define _MMCAU_H_
   3              	
   4              	    .equ    TL,0
   5              	    .equ    TS,0
   6              	    .equ    CASR,0
   7              	    .equ    CAA,1
   8              	    .equ    CA0,2
   9              	    .equ    CA1,3
  10              	    .equ    CA2,4
  11              	    .equ    CA3,5
  12              	    .equ    CA4,6
  13              	    .equ    CA5,7
  14              	    .equ    CA6,8
  15              	    .equ    CA7,9
  16              	    .equ    CA8,10
  17              	    .equ    CNOP,0x000
  18              	    .equ    LDR,0x010
  19              	    .equ    STR,0x020
  20              	    .equ    ADR,0x030
  21              	    .equ    RADR,0x040
  22              	    .equ    ADRA,0x050
  23              	    .equ    XOR,0x060
  24              	    .equ    ROTL,0x070
  25              	    .equ    MVRA,0x080
  26              	    .equ    MVAR,0x090
  27              	    .equ    AESS,0x0a0
  28              	    .equ    AESIS,0x0b0
  29              	    .equ    AESC,0x0c0
  30              	    .equ    AESIC,0x0d0
  31              	    .equ    AESR,0x0e0
  32              	    .equ    AESIR,0x0f0
  33              	    .equ    DESR,0x100
  34              	    .equ    DESK,0x110
  35              	    .equ    HASH,0x120
  36              	    .equ    SHS,0x130
ARM GAS  src/mmcau_md5_functions.s 			page 2


  37              	    .equ    MDS,0x140
  38              	    .equ    SHS2,0x150
  39              	    .equ    ILL,0x1f0
  40              	    .equ    IP,8
  41              	    .equ    FP,4
  42              	    .equ    DC,1
  43              	    .equ    CP,2
  44              	    .equ    KSL1,0
  45              	    .equ    KSL2,1
  46              	    .equ    KSR1,2
  47              	    .equ    KSR2,3
  48              	    .equ    HFF,0
  49              	    .equ    HFG,1
  50              	    .equ    HFH,2
  51              	    .equ    HFI,3
  52              	    .equ    HFP,2
  53              	    .equ    HFC,4
  54              	    .equ    HFM,5
  55              	    .equ    HF2C,6
  56              	    .equ    HF2M,7
  57              	    .equ    HF2S,8
  58              	    .equ    HF2T,9
  59              	    .equ    HF2U,10
  60              	    .equ    HF2V,11
  61              	
  62              	#endif
  22              	    .syntax unified
  23              	
  24              	
  25              	    .equ      MMCAU_PPB_DIRECT, 0xf0005000
  26              	    .equ    MMCAU_PPB_INDIRECT, 0xf0005800
  27              	
  28              	
  29              	# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
  30              	#
  31              	#   MMCAU_MD5_INITIALIZE_OUTPUT
  32              	#   Initializes the MD5 state variables
  33              	#
  34              	#   ARGUMENTS
  35              	#   *md5_state      pointer to 120-bit block of md5 state variables: a,b,c,d
  36              	#
  37              	#   CALLING CONVENTION
  38              	#   void mmcau_md5_initialize_output (const unsigned int *md5_state)
  39              	#
  40              	#  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #
  41              	#
  42              	#    REGISTER  |  ALLOCATION (at the start of mmcau_md5_initialize_output)
  43              	#   -----------+------------------------------------------------------------
  44              	#          r0  |  *md5_state    (arg0)
  45              	#              |
  46              	#        > r0  |  irrelevant
  47              	#
  48              	# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
  49              	
  50              	    .global _mmcau_md5_initialize_output
  51              	    .global mmcau_md5_initialize_output
  52              	    .type   mmcau_md5_initialize_output, %function
ARM GAS  src/mmcau_md5_functions.s 			page 3


  53              	    .align  4
  54              	
  55              	_mmcau_md5_initialize_output:
  56              	mmcau_md5_initialize_output:
  57              	
  58              	# store reg r4, we need to restore it at the end of the routine
  59 0000 10B4     	    push    {r4}                            @ store reg
  60              	
  61 0002 0549     	    ldr     r1, =md5_initial_h
  62 0004 1EC9     	    ldmia   r1, {r1-r4}                     @ load md5_initial_h[0-3]
  63 0006 1EC0     	    stmia   r0!, {r1-r4}                    @ store in md5_state[0-3]
  64              	
  65 0008 10BC     	    pop     {r4}                            @ restore reg
  66 000a 7047     	    bx      lr                              @ exit routine
  67              	
  68              	
  69              	# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
  70              	#
  71              	#   MMCAU_MD5_HASH_N
  72              	#   Updates MD5 state variables for one or more input message blocks
  73              	#
  74              	#   ARGUMENTS
  75              	#   *msg_data       pointer to start of input message data
  76              	#   num_blks        number of 512-bit blocks to process
  77              	#   *md5_state      pointer to 128-bit block of MD5 state variables: a,b,c,d
  78              	#
  79              	#   CALLING CONVENTION
  80              	#   void mmucau_md5_hash_n     (const unsigned char     *msg_data,
  81              	#                               const int                num_blks,
  82              	#                               unsigned char           *md5_state)
  83              	#
  84              	#  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #
  85              	#
  86              	#    REGISTER  |  ALLOCATION (at the start of mmcau_md5_hash_n)
  87              	#   -----------+------------------------------------------------------------
  88              	#          r0  |  *msg_data     (arg0)
  89              	#          r1  |  num_blks      (arg1)
  90              	#          r2  |  *md5_state    (arg2)
  91              	#              |
  92              	#        > r2  |  irrelevant
  93              	#
  94              	# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
  95              	
  96              	    .global _mmcau_md5_hash_n
  97              	    .global mmcau_md5_hash_n
  98              	    .type   mmcau_md5_hash_n, %function
  99 000c C046C046 	    .align  4
 100              	
 101              	_mmcau_md5_hash_n:
 102              	mmcau_md5_hash_n:
 103              	
 104              	# store num_blks and *md5_state, we need them later in the routine
 105              	# store regs r4-r7, we need to restore them at the end of the routine
 106 0010 F6B4     	    push    {r1-r2, r4-r7}                  @ store num_blks, *md5_state, regs
 107              	
 108              	# initialize CAU data regs with current contents of md5_state[0-3]
 109 0012 1ECA     	    ldmia   r2, {r1-r4}                     @ load md5_state[0-3]
ARM GAS  src/mmcau_md5_functions.s 			page 4


 110              	
 111 0014 014F     	    ldr     r7, =md5_t                      @ set *md5_t
 112 0016 03E0     	    b       next_blk
 113 0018 00000000 	    .ltorg
 113      10000000 
 114              	
 115              	
 116              	    .align  2
 117              	next_blk:
 118              	
 119              	#    REGISTER  |  ALLOCATION (throughout next_blk)
 120              	#   -----------+------------------------------------------------------------
 121              	#          r0  |  *msg_data (arg0)
 122              	#          r1  |  a / num_blks (arg1)
 123              	#          r2  |  b / *md5_state (arg2)
 124              	#          r3  |  c
 125              	#          r4  |  d
 126              	#          r5  |  scratch
 127              	#          r6  |  scratch
 128              	#          r7  |  *md5_t
 129              	
 130              	# 16 rounds of F(x,y,z) = (x & y) | (~x & z)
 131              	# ******************************************
 132 0020 1546     	    mov     r5, r2                          @ b
 133 0022 D643     	    mvns    r6, r2                          @ ~b
 134 0024 1D40     	    ands    r5, r3                          @ b & c
 135 0026 2640     	    ands    r6, r4                          @ ~b & d
 136 0028 3543     	    orrs    r5, r6                          @ F(b,c,d)
 137 002a 2944     	    add     r1, r5                          @ a += F(b,c,d)
 138 002c 0668     	    ldr     r6, [r0, #0<<2]                 @ load msg_data[0]
 139 002e 3144     	    add     r1, r6                          @ a += msg_data[0]
 140 0030 20CF     	    ldmia   r7!, {r5}                       @ load md5_t[0], *md5_t++
 141 0032 2944     	    add     r1, r5                          @ a += md5_t[0]
 142 0034 1926     	    movs    r6, #25                         @ amount to rotate
 143 0036 F141     	    rors    r1, r6                          @ ROTL(a,7)
 144 0038 1144     	    add     r1, r2                          @ a = b + ROTL(a,7)
 145              	
 146 003a 0D46     	    mov     r5, r1                          @ a
 147 003c CE43     	    mvns    r6, r1                          @ ~a
 148 003e 1540     	    ands    r5, r2                          @ a & b
 149 0040 1E40     	    ands    r6, r3                          @ ~a & c
 150 0042 3543     	    orrs    r5, r6                          @ F(a,b,c)
 151 0044 2C44     	    add     r4, r5                          @ d += F(a,b,c)
 152 0046 4668     	    ldr     r6, [r0, #1<<2]                 @ load msg_data[1]
 153 0048 3444     	    add     r4, r6                          @ d += msg_data[1]
 154 004a 20CF     	    ldmia   r7!, {r5}                       @ load md5_t[1], *md5_t++
 155 004c 2C44     	    add     r4, r5                          @ d += md5_t[1]
 156 004e 1426     	    movs    r6, #20                         @ amount to rotate
 157 0050 F441     	    rors    r4, r6                          @ ROTL(d,12)
 158 0052 0C44     	    add     r4, r1                          @ d = a + ROTL(d,12)
 159              	
 160 0054 2546     	    mov     r5, r4                          @ d
 161 0056 E643     	    mvns    r6, r4                          @ ~d
 162 0058 0D40     	    ands    r5, r1                          @ d & a
 163 005a 1640     	    ands    r6, r2                          @ ~d & b
 164 005c 3543     	    orrs    r5, r6                          @ F(d,a,b)
 165 005e 2B44     	    add     r3, r5                          @ c += F(d,a,b)
ARM GAS  src/mmcau_md5_functions.s 			page 5


 166 0060 8668     	    ldr     r6, [r0, #2<<2]                 @ load msg_data[2]
 167 0062 3344     	    add     r3, r6                          @ c += msg_data[2]
 168 0064 20CF     	    ldmia   r7!, {r5}                       @ load md5_t[2], *md5_t++
 169 0066 2B44     	    add     r3, r5                          @ c += md5_t[2]
 170 0068 0F26     	    movs    r6, #15                         @ amount to rotate
 171 006a F341     	    rors    r3, r6                          @ ROTL(c,17)
 172 006c 2344     	    add     r3, r4                          @ c = d + ROTL(c,17)
 173              	
 174 006e 1D46     	    mov     r5, r3                          @ c
 175 0070 DE43     	    mvns    r6, r3                          @ ~c
 176 0072 2540     	    ands    r5, r4                          @ c & d
 177 0074 0E40     	    ands    r6, r1                          @ ~c & a
 178 0076 3543     	    orrs    r5, r6                          @ F(c,d,a)
 179 0078 2A44     	    add     r2, r5                          @ b += F(c,d,a)
 180 007a C668     	    ldr     r6, [r0, #3<<2]                 @ load msg_data[3]
 181 007c 3244     	    add     r2, r6                          @ b += msg_data[3]
 182 007e 20CF     	    ldmia   r7!, {r5}                       @ load md5_t[3], *md5_t++
 183 0080 2A44     	    add     r2, r5                          @ b += md5_t[3]
 184 0082 0A26     	    movs    r6, #10                         @ amount to rotate
 185 0084 F241     	    rors    r2, r6                          @ ROTL(b,22)
 186 0086 1A44     	    add     r2, r3                          @ b = c + ROTL(b,22)
 187              	
 188 0088 1546     	    mov     r5, r2                          @ b
 189 008a D643     	    mvns    r6, r2                          @ ~b
 190 008c 1D40     	    ands    r5, r3                          @ b & c
 191 008e 2640     	    ands    r6, r4                          @ ~b & d
 192 0090 3543     	    orrs    r5, r6                          @ F(b,c,d)
 193 0092 2944     	    add     r1, r5                          @ a += F(b,c,d)
 194 0094 0669     	    ldr     r6, [r0, #4<<2]                 @ load msg_data[4]
 195 0096 3144     	    add     r1, r6                          @ a += msg_data[4]
 196 0098 20CF     	    ldmia   r7!, {r5}                       @ load md5_t[4], *md5_t++
 197 009a 2944     	    add     r1, r5                          @ a += md5_t[4]
 198 009c 1926     	    movs    r6, #25                         @ amount to rotate
 199 009e F141     	    rors    r1, r6                          @ ROTL(a,7)
 200 00a0 1144     	    add     r1, r2                          @ a = b + ROTL(a,7)
 201              	
 202 00a2 0D46     	    mov     r5, r1                          @ a
 203 00a4 CE43     	    mvns    r6, r1                          @ ~a
 204 00a6 1540     	    ands    r5, r2                          @ a & b
 205 00a8 1E40     	    ands    r6, r3                          @ ~a & c
 206 00aa 3543     	    orrs    r5, r6                          @ F(a,b,c)
 207 00ac 2C44     	    add     r4, r5                          @ d += F(a,b,c)
 208 00ae 4669     	    ldr     r6, [r0, #5<<2]                 @ load msg_data[5]
 209 00b0 3444     	    add     r4, r6                          @ d += msg_data[5]
 210 00b2 20CF     	    ldmia   r7!, {r5}                       @ load md5_t[5], *md5_t++
 211 00b4 2C44     	    add     r4, r5                          @ d += md5_t[5]
 212 00b6 1426     	    movs    r6, #20                         @ amount to rotate
 213 00b8 F441     	    rors    r4, r6                          @ ROTL(d,12)
 214 00ba 0C44     	    add     r4, r1                          @ d = a + ROTL(d,12)
 215              	
 216 00bc 2546     	    mov     r5, r4                          @ d
 217 00be E643     	    mvns    r6, r4                          @ ~d
 218 00c0 0D40     	    ands    r5, r1                          @ d & a
 219 00c2 1640     	    ands    r6, r2                          @ ~d & b
 220 00c4 3543     	    orrs    r5, r6                          @ F(d,a,b)
 221 00c6 2B44     	    add     r3, r5                          @ c += F(d,a,b)
 222 00c8 8669     	    ldr     r6, [r0, #6<<2]                 @ load msg_data[6]
ARM GAS  src/mmcau_md5_functions.s 			page 6


 223 00ca 3344     	    add     r3, r6                          @ c += msg_data[6]
 224 00cc 20CF     	    ldmia   r7!, {r5}                       @ load md5_t[6], *md5_t++
 225 00ce 2B44     	    add     r3, r5                          @ c += md5_t[6]
 226 00d0 0F26     	    movs    r6, #15                         @ amount to rotate
 227 00d2 F341     	    rors    r3, r6                          @ ROTL(c,17)
 228 00d4 2344     	    add     r3, r4                          @ c = d + ROTL(c,17)
 229              	
 230 00d6 1D46     	    mov     r5, r3                          @ c
 231 00d8 DE43     	    mvns    r6, r3                          @ ~c
 232 00da 2540     	    ands    r5, r4                          @ c & d
 233 00dc 0E40     	    ands    r6, r1                          @ ~c & a
 234 00de 3543     	    orrs    r5, r6                          @ F(c,d,a)
 235 00e0 2A44     	    add     r2, r5                          @ b += F(c,d,a)
 236 00e2 C669     	    ldr     r6, [r0, #7<<2]                 @ load msg_data[7]
 237 00e4 3244     	    add     r2, r6                          @ b += msg_data[7]
 238 00e6 20CF     	    ldmia   r7!, {r5}                       @ load md5_t[7], *md5_t++
 239 00e8 2A44     	    add     r2, r5                          @ b += md5_t[7]
 240 00ea 0A26     	    movs    r6, #10                         @ amount to rotate
 241 00ec F241     	    rors    r2, r6                          @ ROTL(b,22)
 242 00ee 1A44     	    add     r2, r3                          @ b = c + ROTL(b,22)
 243              	
 244 00f0 1546     	    mov     r5, r2                          @ b
 245 00f2 D643     	    mvns    r6, r2                          @ ~b
 246 00f4 1D40     	    ands    r5, r3                          @ b & c
 247 00f6 2640     	    ands    r6, r4                          @ ~b & d
 248 00f8 3543     	    orrs    r5, r6                          @ F(b,c,d)
 249 00fa 2944     	    add     r1, r5                          @ a += F(b,c,d)
 250 00fc 066A     	    ldr     r6, [r0, #8<<2]                 @ load msg_data[8]
 251 00fe 3144     	    add     r1, r6                          @ a += msg_data[8]
 252 0100 20CF     	    ldmia   r7!, {r5}                       @ load md5_t[8], *md5_t++
 253 0102 2944     	    add     r1, r5                          @ a += md5_t[8]
 254 0104 1926     	    movs    r6, #25                         @ amount to rotate
 255 0106 F141     	    rors    r1, r6                          @ ROTL(a,7)
 256 0108 1144     	    add     r1, r2                          @ a = b + ROTL(a,7)
 257              	
 258 010a 0D46     	    mov     r5, r1                          @ a
 259 010c CE43     	    mvns    r6, r1                          @ ~a
 260 010e 1540     	    ands    r5, r2                          @ a & b
 261 0110 1E40     	    ands    r6, r3                          @ ~a & c
 262 0112 3543     	    orrs    r5, r6                          @ F(a,b,c)
 263 0114 2C44     	    add     r4, r5                          @ d += F(a,b,c)
 264 0116 466A     	    ldr     r6, [r0, #9<<2]                 @ load msg_data[9]
 265 0118 3444     	    add     r4, r6                          @ d += msg_data[9]
 266 011a 20CF     	    ldmia   r7!, {r5}                       @ load md5_t[9], *md5_t++
 267 011c 2C44     	    add     r4, r5                          @ d += md5_t[9]
 268 011e 1426     	    movs    r6, #20                         @ amount to rotate
 269 0120 F441     	    rors    r4, r6                          @ ROTL(d,12)
 270 0122 0C44     	    add     r4, r1                          @ d = a + ROTL(d,12)
 271              	
 272 0124 2546     	    mov     r5, r4                          @ d
 273 0126 E643     	    mvns    r6, r4                          @ ~d
 274 0128 0D40     	    ands    r5, r1                          @ d & a
 275 012a 1640     	    ands    r6, r2                          @ ~d & b
 276 012c 3543     	    orrs    r5, r6                          @ F(d,a,b)
 277 012e 2B44     	    add     r3, r5                          @ c += F(d,a,b)
 278 0130 866A     	    ldr     r6, [r0, #10<<2]                @ load msg_data[10]
 279 0132 3344     	    add     r3, r6                          @ c += msg_data[10]
ARM GAS  src/mmcau_md5_functions.s 			page 7


 280 0134 20CF     	    ldmia   r7!, {r5}                       @ load md5_t[10], *md5_t++
 281 0136 2B44     	    add     r3, r5                          @ c += md5_t[10]
 282 0138 0F26     	    movs    r6, #15                         @ amount to rotate
 283 013a F341     	    rors    r3, r6                          @ ROTL(c,17)
 284 013c 2344     	    add     r3, r4                          @ c = d + ROTL(c,17)
 285              	
 286 013e 1D46     	    mov     r5, r3                          @ c
 287 0140 DE43     	    mvns    r6, r3                          @ ~c
 288 0142 2540     	    ands    r5, r4                          @ c & d
 289 0144 0E40     	    ands    r6, r1                          @ ~c & a
 290 0146 3543     	    orrs    r5, r6                          @ F(c,d,a)
 291 0148 2A44     	    add     r2, r5                          @ b += F(c,d,a)
 292 014a C66A     	    ldr     r6, [r0, #11<<2]                @ load msg_data[11]
 293 014c 3244     	    add     r2, r6                          @ b += msg_data[11]
 294 014e 20CF     	    ldmia   r7!, {r5}                       @ load md5_t[11], *md5_t++
 295 0150 2A44     	    add     r2, r5                          @ b += md5_t[11]
 296 0152 0A26     	    movs    r6, #10                         @ amount to rotate
 297 0154 F241     	    rors    r2, r6                          @ ROTL(b,22)
 298 0156 1A44     	    add     r2, r3                          @ b = c + ROTL(b,22)
 299              	
 300 0158 1546     	    mov     r5, r2                          @ b
 301 015a D643     	    mvns    r6, r2                          @ ~b
 302 015c 1D40     	    ands    r5, r3                          @ b & c
 303 015e 2640     	    ands    r6, r4                          @ ~b & d
 304 0160 3543     	    orrs    r5, r6                          @ F(b,c,d)
 305 0162 2944     	    add     r1, r5                          @ a += F(b,c,d)
 306 0164 066B     	    ldr     r6, [r0, #12<<2]                @ load msg_data[12]
 307 0166 3144     	    add     r1, r6                          @ a += msg_data[12]
 308 0168 20CF     	    ldmia   r7!, {r5}                       @ load md5_t[12], *md5_t++
 309 016a 2944     	    add     r1, r5                          @ a += md5_t[12]
 310 016c 1926     	    movs    r6, #25                         @ amount to rotate
 311 016e F141     	    rors    r1, r6                          @ ROTL(a,7)
 312 0170 1144     	    add     r1, r2                          @ a = b + ROTL(a,7)
 313              	
 314 0172 0D46     	    mov     r5, r1                          @ a
 315 0174 CE43     	    mvns    r6, r1                          @ ~a
 316 0176 1540     	    ands    r5, r2                          @ a & b
 317 0178 1E40     	    ands    r6, r3                          @ ~a & c
 318 017a 3543     	    orrs    r5, r6                          @ F(a,b,c)
 319 017c 2C44     	    add     r4, r5                          @ d += F(a,b,c)
 320 017e 466B     	    ldr     r6, [r0, #13<<2]                @ load msg_data[13]
 321 0180 3444     	    add     r4, r6                          @ d += msg_data[13]
 322 0182 20CF     	    ldmia   r7!, {r5}                       @ load md5_t[13], *md5_t++
 323 0184 2C44     	    add     r4, r5                          @ d += md5_t[13]
 324 0186 1426     	    movs    r6, #20                         @ amount to rotate
 325 0188 F441     	    rors    r4, r6                          @ ROTL(d,12)
 326 018a 0C44     	    add     r4, r1                          @ d = a + ROTL(d,12)
 327              	
 328 018c 2546     	    mov     r5, r4                          @ d
 329 018e E643     	    mvns    r6, r4                          @ ~d
 330 0190 0D40     	    ands    r5, r1                          @ d & a
 331 0192 1640     	    ands    r6, r2                          @ ~d & b
 332 0194 3543     	    orrs    r5, r6                          @ F(d,a,b)
 333 0196 2B44     	    add     r3, r5                          @ c += F(d,a,b)
 334 0198 866B     	    ldr     r6, [r0, #14<<2]                @ load msg_data[14]
 335 019a 3344     	    add     r3, r6                          @ c += msg_data[14]
 336 019c 20CF     	    ldmia   r7!, {r5}                       @ load md5_t[14], *md5_t++
ARM GAS  src/mmcau_md5_functions.s 			page 8


 337 019e 2B44     	    add     r3, r5                          @ c += md5_t[14]
 338 01a0 0F26     	    movs    r6, #15                         @ amount to rotate
 339 01a2 F341     	    rors    r3, r6                          @ ROTL(c,17)
 340 01a4 2344     	    add     r3, r4                          @ c = d + ROTL(c,17)
 341              	
 342 01a6 1D46     	    mov     r5, r3                          @ c
 343 01a8 DE43     	    mvns    r6, r3                          @ ~c
 344 01aa 2540     	    ands    r5, r4                          @ c & d
 345 01ac 0E40     	    ands    r6, r1                          @ ~c & a
 346 01ae 3543     	    orrs    r5, r6                          @ F(c,d,a)
 347 01b0 2A44     	    add     r2, r5                          @ b += F(c,d,a)
 348 01b2 C66B     	    ldr     r6, [r0, #15<<2]                @ load msg_data[15]
 349 01b4 3244     	    add     r2, r6                          @ b += msg_data[15]
 350 01b6 20CF     	    ldmia   r7!, {r5}                       @ load md5_t[15], *md5_t++
 351 01b8 2A44     	    add     r2, r5                          @ b += md5_t[15]
 352 01ba 0A26     	    movs    r6, #10                         @ amount to rotate
 353 01bc F241     	    rors    r2, r6                          @ ROTL(b,22)
 354 01be 1A44     	    add     r2, r3                          @ b = c + ROTL(b,22)
 355              	
 356              	# 16 rounds of G(x,y,z) = (x & z) | (y & ~z)
 357              	# ******************************************
 358 01c0 2546     	    mov     r5, r4                          @ d
 359 01c2 E643     	    mvns    r6, r4                          @ ~d
 360 01c4 1540     	    ands    r5, r2                          @ b & d
 361 01c6 1E40     	    ands    r6, r3                          @ c & ~d
 362 01c8 3543     	    orrs    r5, r6                          @ G(b,c,d)
 363 01ca 2944     	    add     r1, r5                          @ a += G(b,c,d)
 364 01cc 4668     	    ldr     r6, [r0, #1<<2]                 @ load msg_data[1]
 365 01ce 3144     	    add     r1, r6                          @ a += msg_data[1]
 366 01d0 20CF     	    ldmia   r7!, {r5}                       @ load md5_t[16], *md5_t++
 367 01d2 2944     	    add     r1, r5                          @ a += md5_t[16]
 368 01d4 1B26     	    movs    r6, #27                         @ amount to rotate
 369 01d6 F141     	    rors    r1, r6                          @ ROTL(a,5)
 370 01d8 1144     	    add     r1, r2                          @ a = b + ROTL(a,5)
 371              	
 372 01da 1D46     	    mov     r5, r3                          @ c
 373 01dc DE43     	    mvns    r6, r3                          @ ~c
 374 01de 0D40     	    ands    r5, r1                          @ c & a
 375 01e0 1640     	    ands    r6, r2                          @ b & ~c
 376 01e2 3543     	    orrs    r5, r6                          @ G(a,b,c)
 377 01e4 2C44     	    add     r4, r5                          @ d += G(a,b,c)
 378 01e6 8669     	    ldr     r6, [r0, #6<<2]                 @ load msg_data[6]
 379 01e8 3444     	    add     r4, r6                          @ d += msg_data[6]
 380 01ea 20CF     	    ldmia   r7!, {r5}                       @ load md5_t[17], *md5_t++
 381 01ec 2C44     	    add     r4, r5                          @ d += md5_t[17]
 382 01ee 1726     	    movs    r6, #23                         @ amount to rotate
 383 01f0 F441     	    rors    r4, r6                          @ ROTL(d,9)
 384 01f2 0C44     	    add     r4, r1                          @ d = a + ROTL(d,9)
 385              	
 386 01f4 1546     	    mov     r5, r2                          @ b
 387 01f6 D643     	    mvns    r6, r2                          @ ~b
 388 01f8 2540     	    ands    r5, r4                          @ b & d
 389 01fa 0E40     	    ands    r6, r1                          @ a & ~b
 390 01fc 3543     	    orrs    r5, r6                          @ G(d,a,b)
 391 01fe 2B44     	    add     r3, r5                          @ c += G(d,a,b)
 392 0200 C66A     	    ldr     r6, [r0, #11<<2]                @ load msg_data[11]
 393 0202 3344     	    add     r3, r6                          @ c += msg_data[11]
ARM GAS  src/mmcau_md5_functions.s 			page 9


 394 0204 20CF     	    ldmia   r7!, {r5}                       @ load md5_t[18], *md5_t++
 395 0206 2B44     	    add     r3, r5                          @ c += md5_t[18]
 396 0208 1226     	    movs    r6, #18                         @ amount to rotate
 397 020a F341     	    rors    r3, r6                          @ ROTL(c,14)
 398 020c 2344     	    add     r3, r4                          @ c = d + ROTL(c,14)
 399              	
 400 020e 0D46     	    mov     r5, r1                          @ a
 401 0210 CE43     	    mvns    r6, r1                          @ ~a
 402 0212 1D40     	    ands    r5, r3                          @ a & c
 403 0214 2640     	    ands    r6, r4                          @ d & ~a
 404 0216 3543     	    orrs    r5, r6                          @ G(c,d,a)
 405 0218 2A44     	    add     r2, r5                          @ b += G(c,d,a)
 406 021a 0668     	    ldr     r6, [r0, #0<<2]                 @ load msg_data[0]
 407 021c 3244     	    add     r2, r6                          @ b += msg_data[0]
 408 021e 20CF     	    ldmia   r7!, {r5}                       @ load md5_t[19], *md5_t++
 409 0220 2A44     	    add     r2, r5                          @ b += md5_t[19]
 410 0222 0C26     	    movs    r6, #12                         @ amount to rotate
 411 0224 F241     	    rors    r2, r6                          @ ROTL(b,20)
 412 0226 1A44     	    add     r2, r3                          @ b = c + ROTL(b,20)
 413              	
 414 0228 2546     	    mov     r5, r4                          @ d
 415 022a E643     	    mvns    r6, r4                          @ ~d
 416 022c 1540     	    ands    r5, r2                          @ b & d
 417 022e 1E40     	    ands    r6, r3                          @ c & ~d
 418 0230 3543     	    orrs    r5, r6                          @ G(b,c,d)
 419 0232 2944     	    add     r1, r5                          @ a += G(b,c,d)
 420 0234 4669     	    ldr     r6, [r0, #5<<2]                 @ load msg_data[5]
 421 0236 3144     	    add     r1, r6                          @ a += msg_data[5]
 422 0238 20CF     	    ldmia   r7!, {r5}                       @ load md5_t[20], *md5_t++
 423 023a 2944     	    add     r1, r5                          @ a += md5_t[20]
 424 023c 1B26     	    movs    r6, #27                         @ amount to rotate
 425 023e F141     	    rors    r1, r6                          @ ROTL(a,5)
 426 0240 1144     	    add     r1, r2                          @ a = b + ROTL(a,5)
 427              	
 428 0242 1D46     	    mov     r5, r3                          @ c
 429 0244 DE43     	    mvns    r6, r3                          @ ~c
 430 0246 0D40     	    ands    r5, r1                          @ c & a
 431 0248 1640     	    ands    r6, r2                          @ b & ~c
 432 024a 3543     	    orrs    r5, r6                          @ G(a,b,c)
 433 024c 2C44     	    add     r4, r5                          @ d += G(a,b,c)
 434 024e 866A     	    ldr     r6, [r0, #10<<2]                @ load msg_data[10]
 435 0250 3444     	    add     r4, r6                          @ d += msg_data[10]
 436 0252 20CF     	    ldmia   r7!, {r5}                       @ load md5_t[21], *md5_t++
 437 0254 2C44     	    add     r4, r5                          @ d += md5_t[21]
 438 0256 1726     	    movs    r6, #23                         @ amount to rotate
 439 0258 F441     	    rors    r4, r6                          @ ROTL(d,9)
 440 025a 0C44     	    add     r4, r1                          @ d = a + ROTL(d,9)
 441              	
 442 025c 1546     	    mov     r5, r2                          @ b
 443 025e D643     	    mvns    r6, r2                          @ ~b
 444 0260 2540     	    ands    r5, r4                          @ b & d
 445 0262 0E40     	    ands    r6, r1                          @ a & ~b
 446 0264 3543     	    orrs    r5, r6                          @ G(d,a,b)
 447 0266 2B44     	    add     r3, r5                          @ c += G(d,a,b)
 448 0268 C66B     	    ldr     r6, [r0, #15<<2]                @ load msg_data[15]
 449 026a 3344     	    add     r3, r6                          @ c += msg_data[15]
 450 026c 20CF     	    ldmia   r7!, {r5}                       @ load md5_t[22], *md5_t++
ARM GAS  src/mmcau_md5_functions.s 			page 10


 451 026e 2B44     	    add     r3, r5                          @ c += md5_t[22]
 452 0270 1226     	    movs    r6, #18                         @ amount to rotate
 453 0272 F341     	    rors    r3, r6                          @ ROTL(c,14)
 454 0274 2344     	    add     r3, r4                          @ c = d + ROTL(c,14)
 455              	
 456 0276 0D46     	    mov     r5, r1                          @ a
 457 0278 CE43     	    mvns    r6, r1                          @ ~a
 458 027a 1D40     	    ands    r5, r3                          @ a & c
 459 027c 2640     	    ands    r6, r4                          @ d & ~a
 460 027e 3543     	    orrs    r5, r6                          @ G(c,d,a)
 461 0280 2A44     	    add     r2, r5                          @ b += G(c,d,a)
 462 0282 0669     	    ldr     r6, [r0, #4<<2]                 @ load msg_data[4]
 463 0284 3244     	    add     r2, r6                          @ b += msg_data[4]
 464 0286 20CF     	    ldmia   r7!, {r5}                       @ load md5_t[23], *md5_t++
 465 0288 2A44     	    add     r2, r5                          @ b += md5_t[23]
 466 028a 0C26     	    movs    r6, #12                         @ amount to rotate
 467 028c F241     	    rors    r2, r6                          @ ROTL(b,20)
 468 028e 1A44     	    add     r2, r3                          @ b = c + ROTL(b,20)
 469              	
 470 0290 2546     	    mov     r5, r4                          @ d
 471 0292 E643     	    mvns    r6, r4                          @ ~d
 472 0294 1540     	    ands    r5, r2                          @ b & d
 473 0296 1E40     	    ands    r6, r3                          @ c & ~d
 474 0298 3543     	    orrs    r5, r6                          @ G(b,c,d)
 475 029a 2944     	    add     r1, r5                          @ a += G(b,c,d)
 476 029c 466A     	    ldr     r6, [r0, #9<<2]                 @ load msg_data[9]
 477 029e 3144     	    add     r1, r6                          @ a += msg_data[9]
 478 02a0 20CF     	    ldmia   r7!, {r5}                       @ load md5_t[24], *md5_t++
 479 02a2 2944     	    add     r1, r5                          @ a += md5_t[24]
 480 02a4 1B26     	    movs    r6, #27                         @ amount to rotate
 481 02a6 F141     	    rors    r1, r6                          @ ROTL(a,5)
 482 02a8 1144     	    add     r1, r2                          @ a = b + ROTL(a,5)
 483              	
 484 02aa 1D46     	    mov     r5, r3                          @ c
 485 02ac DE43     	    mvns    r6, r3                          @ ~c
 486 02ae 0D40     	    ands    r5, r1                          @ c & a
 487 02b0 1640     	    ands    r6, r2                          @ b & ~c
 488 02b2 3543     	    orrs    r5, r6                          @ G(a,b,c)
 489 02b4 2C44     	    add     r4, r5                          @ d += G(a,b,c)
 490 02b6 866B     	    ldr     r6, [r0, #14<<2]                @ load msg_data[14]
 491 02b8 3444     	    add     r4, r6                          @ d += msg_data[14]
 492 02ba 20CF     	    ldmia   r7!, {r5}                       @ load md5_t[25], *md5_t++
 493 02bc 2C44     	    add     r4, r5                          @ d += md5_t[25]
 494 02be 1726     	    movs    r6, #23                         @ amount to rotate
 495 02c0 F441     	    rors    r4, r6                          @ ROTL(d,9)
 496 02c2 0C44     	    add     r4, r1                          @ d = a + ROTL(d,9)
 497              	
 498 02c4 1546     	    mov     r5, r2                          @ b
 499 02c6 D643     	    mvns    r6, r2                          @ ~b
 500 02c8 2540     	    ands    r5, r4                          @ b & d
 501 02ca 0E40     	    ands    r6, r1                          @ a & ~b
 502 02cc 3543     	    orrs    r5, r6                          @ G(d,a,b)
 503 02ce 2B44     	    add     r3, r5                          @ c += G(d,a,b)
 504 02d0 C668     	    ldr     r6, [r0, #3<<2]                 @ load msg_data[3]
 505 02d2 3344     	    add     r3, r6                          @ c += msg_data[3]
 506 02d4 20CF     	    ldmia   r7!, {r5}                       @ load md5_t[26], *md5_t++
 507 02d6 2B44     	    add     r3, r5                          @ c += md5_t[26]
ARM GAS  src/mmcau_md5_functions.s 			page 11


 508 02d8 1226     	    movs    r6, #18                         @ amount to rotate
 509 02da F341     	    rors    r3, r6                          @ ROTL(c,14)
 510 02dc 2344     	    add     r3, r4                          @ c = d + ROTL(c,14)
 511              	
 512 02de 0D46     	    mov     r5, r1                          @ a
 513 02e0 CE43     	    mvns    r6, r1                          @ ~a
 514 02e2 1D40     	    ands    r5, r3                          @ a & c
 515 02e4 2640     	    ands    r6, r4                          @ d & ~a
 516 02e6 3543     	    orrs    r5, r6                          @ G(c,d,a)
 517 02e8 2A44     	    add     r2, r5                          @ b += G(c,d,a)
 518 02ea 066A     	    ldr     r6, [r0, #8<<2]                 @ load msg_data[8]
 519 02ec 3244     	    add     r2, r6                          @ b += msg_data[8]
 520 02ee 20CF     	    ldmia   r7!, {r5}                       @ load md5_t[27], *md5_t++
 521 02f0 2A44     	    add     r2, r5                          @ b += md5_t[27]
 522 02f2 0C26     	    movs    r6, #12                         @ amount to rotate
 523 02f4 F241     	    rors    r2, r6                          @ ROTL(b,20)
 524 02f6 1A44     	    add     r2, r3                          @ b = c + ROTL(b,20)
 525              	
 526 02f8 2546     	    mov     r5, r4                          @ d
 527 02fa E643     	    mvns    r6, r4                          @ ~d
 528 02fc 1540     	    ands    r5, r2                          @ b & d
 529 02fe 1E40     	    ands    r6, r3                          @ c & ~d
 530 0300 3543     	    orrs    r5, r6                          @ G(b,c,d)
 531 0302 2944     	    add     r1, r5                          @ a += G(b,c,d)
 532 0304 466B     	    ldr     r6, [r0, #13<<2]                @ load msg_data[13]
 533 0306 3144     	    add     r1, r6                          @ a += msg_data[13]
 534 0308 20CF     	    ldmia   r7!, {r5}                       @ load md5_t[28], *md5_t++
 535 030a 2944     	    add     r1, r5                          @ a += md5_t[28]
 536 030c 1B26     	    movs    r6, #27                         @ amount to rotate
 537 030e F141     	    rors    r1, r6                          @ ROTL(a,5)
 538 0310 1144     	    add     r1, r2                          @ a = b + ROTL(a,5)
 539              	
 540 0312 1D46     	    mov     r5, r3                          @ c
 541 0314 DE43     	    mvns    r6, r3                          @ ~c
 542 0316 0D40     	    ands    r5, r1                          @ c & a
 543 0318 1640     	    ands    r6, r2                          @ b & ~c
 544 031a 3543     	    orrs    r5, r6                          @ G(a,b,c)
 545 031c 2C44     	    add     r4, r5                          @ d += G(a,b,c)
 546 031e 8668     	    ldr     r6, [r0, #2<<2]                 @ load msg_data[2]
 547 0320 3444     	    add     r4, r6                          @ d += msg_data[2]
 548 0322 20CF     	    ldmia   r7!, {r5}                       @ load md5_t[29], *md5_t++
 549 0324 2C44     	    add     r4, r5                          @ d += md5_t[29]
 550 0326 1726     	    movs    r6, #23                         @ amount to rotate
 551 0328 F441     	    rors    r4, r6                          @ ROTL(d,9)
 552 032a 0C44     	    add     r4, r1                          @ d = a + ROTL(d,9)
 553              	
 554 032c 1546     	    mov     r5, r2                          @ b
 555 032e D643     	    mvns    r6, r2                          @ ~b
 556 0330 2540     	    ands    r5, r4                          @ b & d
 557 0332 0E40     	    ands    r6, r1                          @ a & ~b
 558 0334 3543     	    orrs    r5, r6                          @ G(d,a,b)
 559 0336 2B44     	    add     r3, r5                          @ c += G(d,a,b)
 560 0338 C669     	    ldr     r6, [r0, #7<<2]                 @ load msg_data[7]
 561 033a 3344     	    add     r3, r6                          @ c += msg_data[7]
 562 033c 20CF     	    ldmia   r7!, {r5}                       @ load md5_t[30], *md5_t++
 563 033e 2B44     	    add     r3, r5                          @ c += md5_t[30]
 564 0340 1226     	    movs    r6, #18                         @ amount to rotate
ARM GAS  src/mmcau_md5_functions.s 			page 12


 565 0342 F341     	    rors    r3, r6                          @ ROTL(c,14)
 566 0344 2344     	    add     r3, r4                          @ c = d + ROTL(c,14)
 567              	
 568 0346 0D46     	    mov     r5, r1                          @ a
 569 0348 CE43     	    mvns    r6, r1                          @ ~a
 570 034a 1D40     	    ands    r5, r3                          @ a & c
 571 034c 2640     	    ands    r6, r4                          @ d & ~a
 572 034e 3543     	    orrs    r5, r6                          @ G(c,d,a)
 573 0350 2A44     	    add     r2, r5                          @ b += G(c,d,a)
 574 0352 066B     	    ldr     r6, [r0, #12<<2]                @ load msg_data[12]
 575 0354 3244     	    add     r2, r6                          @ b += msg_data[12]
 576 0356 20CF     	    ldmia   r7!, {r5}                       @ load md5_t[31], *md5_t++
 577 0358 2A44     	    add     r2, r5                          @ b += md5_t[31]
 578 035a 0C26     	    movs    r6, #12                         @ amount to rotate
 579 035c F241     	    rors    r2, r6                          @ ROTL(b,20)
 580 035e 1A44     	    add     r2, r3                          @ b = c + ROTL(b,20)
 581              	
 582              	# 16 rounds of H(x,y,z) = x ^ y ^ z
 583              	# *********************************
 584 0360 1546     	    mov     r5, r2                          @ b
 585 0362 5D40     	    eors    r5, r3                          @ b ^ c
 586 0364 6540     	    eors    r5, r4                          @ H(b,c,d)
 587 0366 2944     	    add     r1, r5                          @ a += H(b,c,d)
 588 0368 4669     	    ldr     r6, [r0, #5<<2]                 @ load msg_data[5]
 589 036a 3144     	    add     r1, r6                          @ a += msg_data[5]
 590 036c 20CF     	    ldmia   r7!, {r5}                       @ load md5_t[32], *md5_t++
 591 036e 2944     	    add     r1, r5                          @ a += md5_t[32]
 592 0370 1C26     	    movs    r6, #28                         @ amount to rotate
 593 0372 F141     	    rors    r1, r6                          @ ROTL(a,4)
 594 0374 1144     	    add     r1, r2                          @ a = b + ROTL(a,4)
 595              	
 596 0376 0D46     	    mov     r5, r1                          @ a
 597 0378 5540     	    eors    r5, r2                          @ a ^ b
 598 037a 5D40     	    eors    r5, r3                          @ H(a,b,c)
 599 037c 2C44     	    add     r4, r5                          @ d += H(a,b,c)
 600 037e 066A     	    ldr     r6, [r0, #8<<2]                 @ load msg_data[8]
 601 0380 3444     	    add     r4, r6                          @ d += msg_data[8]
 602 0382 20CF     	    ldmia   r7!, {r5}                       @ load md5_t[33], *md5_t++
 603 0384 2C44     	    add     r4, r5                          @ d += md5_t[33]
 604 0386 1526     	    movs    r6, #21                         @ amount to rotate
 605 0388 F441     	    rors    r4, r6                          @ ROTL(d,11)
 606 038a 0C44     	    add     r4, r1                          @ d = a + ROTL(d,11)
 607              	
 608 038c 2546     	    mov     r5, r4                          @ d
 609 038e 4D40     	    eors    r5, r1                          @ d ^ a
 610 0390 5540     	    eors    r5, r2                          @ H(d,a,b)
 611 0392 2B44     	    add     r3, r5                          @ c += H(d,a,b)
 612 0394 C66A     	    ldr     r6, [r0, #11<<2]                @ load msg_data[11]
 613 0396 3344     	    add     r3, r6                          @ c += msg_data[11]
 614 0398 20CF     	    ldmia   r7!, {r5}                       @ load md5_t[34], *md5_t++
 615 039a 2B44     	    add     r3, r5                          @ c += md5_t[34]
 616 039c 1026     	    movs    r6, #16                         @ amount to rotate
 617 039e F341     	    rors    r3, r6                          @ ROTL(c,16)
 618 03a0 2344     	    add     r3, r4                          @ c = d + ROTL(c,16)
 619              	
 620 03a2 1D46     	    mov     r5, r3                          @ c
 621 03a4 6540     	    eors    r5, r4                          @ c ^ d
ARM GAS  src/mmcau_md5_functions.s 			page 13


 622 03a6 4D40     	    eors    r5, r1                          @ H(c,d,a)
 623 03a8 2A44     	    add     r2, r5                          @ b += H(c,d,a)
 624 03aa 866B     	    ldr     r6, [r0, #14<<2]                @ load msg_data[14]
 625 03ac 3244     	    add     r2, r6                          @ b += msg_data[14]
 626 03ae 20CF     	    ldmia   r7!, {r5}                       @ load md5_t[35], *md5_t++
 627 03b0 2A44     	    add     r2, r5                          @ b += md5_t[35]
 628 03b2 0926     	    movs    r6, #9                          @ amount to rotate
 629 03b4 F241     	    rors    r2, r6                          @ ROTL(b,23)
 630 03b6 1A44     	    add     r2, r3                          @ b = c + ROTL(b,23)
 631              	
 632 03b8 1546     	    mov     r5, r2                          @ b
 633 03ba 5D40     	    eors    r5, r3                          @ b ^ c
 634 03bc 6540     	    eors    r5, r4                          @ H(b,c,d)
 635 03be 2944     	    add     r1, r5                          @ a += H(b,c,d)
 636 03c0 4668     	    ldr     r6, [r0, #1<<2]                 @ load msg_data[1]
 637 03c2 3144     	    add     r1, r6                          @ a += msg_data[1]
 638 03c4 20CF     	    ldmia   r7!, {r5}                       @ load md5_t[36], *md5_t++
 639 03c6 2944     	    add     r1, r5                          @ a += md5_t[36]
 640 03c8 1C26     	    movs    r6, #28                         @ amount to rotate
 641 03ca F141     	    rors    r1, r6                          @ ROTL(a,4)
 642 03cc 1144     	    add     r1, r2                          @ a = b + ROTL(a,4)
 643              	
 644 03ce 0D46     	    mov     r5, r1                          @ a
 645 03d0 5540     	    eors    r5, r2                          @ a ^ b
 646 03d2 5D40     	    eors    r5, r3                          @ H(a,b,c)
 647 03d4 2C44     	    add     r4, r5                          @ d += H(a,b,c)
 648 03d6 0669     	    ldr     r6, [r0, #4<<2]                 @ load msg_data[4]
 649 03d8 3444     	    add     r4, r6                          @ d += msg_data[4]
 650 03da 20CF     	    ldmia   r7!, {r5}                       @ load md5_t[37], *md5_t++
 651 03dc 2C44     	    add     r4, r5                          @ d += md5_t[37]
 652 03de 1526     	    movs    r6, #21                         @ amount to rotate
 653 03e0 F441     	    rors    r4, r6                          @ ROTL(d,11)
 654 03e2 0C44     	    add     r4, r1                          @ d = a + ROTL(d,11)
 655              	
 656 03e4 2546     	    mov     r5, r4                          @ d
 657 03e6 4D40     	    eors    r5, r1                          @ d ^ a
 658 03e8 5540     	    eors    r5, r2                          @ H(d,a,b)
 659 03ea 2B44     	    add     r3, r5                          @ c += H(d,a,b)
 660 03ec C669     	    ldr     r6, [r0, #7<<2]                 @ load msg_data[7]
 661 03ee 3344     	    add     r3, r6                          @ c += msg_data[7]
 662 03f0 20CF     	    ldmia   r7!, {r5}                       @ load md5_t[38], *md5_t++
 663 03f2 2B44     	    add     r3, r5                          @ c += md5_t[38]
 664 03f4 1026     	    movs    r6, #16                         @ amount to rotate
 665 03f6 F341     	    rors    r3, r6                          @ ROTL(c,16)
 666 03f8 2344     	    add     r3, r4                          @ c = d + ROTL(c,16)
 667              	
 668 03fa 1D46     	    mov     r5, r3                          @ c
 669 03fc 6540     	    eors    r5, r4                          @ c ^ d
 670 03fe 4D40     	    eors    r5, r1                          @ H(c,d,a)
 671 0400 2A44     	    add     r2, r5                          @ b += H(c,d,a)
 672 0402 866A     	    ldr     r6, [r0, #10<<2]                @ load msg_data[10]
 673 0404 3244     	    add     r2, r6                          @ b += msg_data[10]
 674 0406 20CF     	    ldmia   r7!, {r5}                       @ load md5_t[39], *md5_t++
 675 0408 2A44     	    add     r2, r5                          @ b += md5_t[39]
 676 040a 0926     	    movs    r6, #9                          @ amount to rotate
 677 040c F241     	    rors    r2, r6                          @ ROTL(b,23)
 678 040e 1A44     	    add     r2, r3                          @ b = c + ROTL(b,23)
ARM GAS  src/mmcau_md5_functions.s 			page 14


 679              	
 680 0410 1546     	    mov     r5, r2                          @ b
 681 0412 5D40     	    eors    r5, r3                          @ b ^ c
 682 0414 6540     	    eors    r5, r4                          @ H(b,c,d)
 683 0416 2944     	    add     r1, r5                          @ a += H(b,c,d)
 684 0418 466B     	    ldr     r6, [r0, #13<<2]                @ load msg_data[13]
 685 041a 3144     	    add     r1, r6                          @ a += msg_data[13]
 686 041c 20CF     	    ldmia   r7!, {r5}                       @ load md5_t[40], *md5_t++
 687 041e 2944     	    add     r1, r5                          @ a += md5_t[40]
 688 0420 1C26     	    movs    r6, #28                         @ amount to rotate
 689 0422 F141     	    rors    r1, r6                          @ ROTL(a,4)
 690 0424 1144     	    add     r1, r2                          @ a = b + ROTL(a,4)
 691              	
 692 0426 0D46     	    mov     r5, r1                          @ a
 693 0428 5540     	    eors    r5, r2                          @ a ^ b
 694 042a 5D40     	    eors    r5, r3                          @ H(a,b,c)
 695 042c 2C44     	    add     r4, r5                          @ d += H(a,b,c)
 696 042e 0668     	    ldr     r6, [r0, #0<<2]                 @ load msg_data[0]
 697 0430 3444     	    add     r4, r6                          @ d += msg_data[0]
 698 0432 20CF     	    ldmia   r7!, {r5}                       @ load md5_t[41], *md5_t++
 699 0434 2C44     	    add     r4, r5                          @ d += md5_t[41]
 700 0436 1526     	    movs    r6, #21                         @ amount to rotate
 701 0438 F441     	    rors    r4, r6                          @ ROTL(d,11)
 702 043a 0C44     	    add     r4, r1                          @ d = a + ROTL(d,11)
 703              	
 704 043c 2546     	    mov     r5, r4                          @ d
 705 043e 4D40     	    eors    r5, r1                          @ d ^ a
 706 0440 5540     	    eors    r5, r2                          @ H(d,a,b)
 707 0442 2B44     	    add     r3, r5                          @ c += H(d,a,b)
 708 0444 C668     	    ldr     r6, [r0, #3<<2]                 @ load msg_data[3]
 709 0446 3344     	    add     r3, r6                          @ c += msg_data[3]
 710 0448 20CF     	    ldmia   r7!, {r5}                       @ load md5_t[42], *md5_t++
 711 044a 2B44     	    add     r3, r5                          @ c += md5_t[42]
 712 044c 1026     	    movs    r6, #16                         @ amount to rotate
 713 044e F341     	    rors    r3, r6                          @ ROTL(c,16)
 714 0450 2344     	    add     r3, r4                          @ c = d + ROTL(c,16)
 715              	
 716 0452 1D46     	    mov     r5, r3                          @ c
 717 0454 6540     	    eors    r5, r4                          @ c ^ d
 718 0456 4D40     	    eors    r5, r1                          @ H(c,d,a)
 719 0458 2A44     	    add     r2, r5                          @ b += H(c,d,a)
 720 045a 8669     	    ldr     r6, [r0, #6<<2]                 @ load msg_data[6]
 721 045c 3244     	    add     r2, r6                          @ b += msg_data[6]
 722 045e 20CF     	    ldmia   r7!, {r5}                       @ load md5_t[43], *md5_t++
 723 0460 2A44     	    add     r2, r5                          @ b += md5_t[43]
 724 0462 0926     	    movs    r6, #9                          @ amount to rotate
 725 0464 F241     	    rors    r2, r6                          @ ROTL(b,23)
 726 0466 1A44     	    add     r2, r3                          @ b = c + ROTL(b,23)
 727              	
 728 0468 1546     	    mov     r5, r2                          @ b
 729 046a 5D40     	    eors    r5, r3                          @ b ^ c
 730 046c 6540     	    eors    r5, r4                          @ H(b,c,d)
 731 046e 2944     	    add     r1, r5                          @ a += H(b,c,d)
 732 0470 466A     	    ldr     r6, [r0, #9<<2]                 @ load msg_data[9]
 733 0472 3144     	    add     r1, r6                          @ a += msg_data[9]
 734 0474 20CF     	    ldmia   r7!, {r5}                       @ load md5_t[44], *md5_t++
 735 0476 2944     	    add     r1, r5                          @ a += md5_t[44]
ARM GAS  src/mmcau_md5_functions.s 			page 15


 736 0478 1C26     	    movs    r6, #28                         @ amount to rotate
 737 047a F141     	    rors    r1, r6                          @ ROTL(a,4)
 738 047c 1144     	    add     r1, r2                          @ a = b + ROTL(a,4)
 739              	
 740 047e 0D46     	    mov     r5, r1                          @ a
 741 0480 5540     	    eors    r5, r2                          @ a ^ b
 742 0482 5D40     	    eors    r5, r3                          @ H(a,b,c)
 743 0484 2C44     	    add     r4, r5                          @ d += H(a,b,c)
 744 0486 066B     	    ldr     r6, [r0, #12<<2]                @ load msg_data[12]
 745 0488 3444     	    add     r4, r6                          @ d += msg_data[12]
 746 048a 20CF     	    ldmia   r7!, {r5}                       @ load md5_t[45], *md5_t++
 747 048c 2C44     	    add     r4, r5                          @ d += md5_t[45]
 748 048e 1526     	    movs    r6, #21                         @ amount to rotate
 749 0490 F441     	    rors    r4, r6                          @ ROTL(d,11)
 750 0492 0C44     	    add     r4, r1                          @ d = a + ROTL(d,11)
 751              	
 752 0494 2546     	    mov     r5, r4                          @ d
 753 0496 4D40     	    eors    r5, r1                          @ d ^ a
 754 0498 5540     	    eors    r5, r2                          @ H(d,a,b)
 755 049a 2B44     	    add     r3, r5                          @ c += H(d,a,b)
 756 049c C66B     	    ldr     r6, [r0, #15<<2]                @ load msg_data[15]
 757 049e 3344     	    add     r3, r6                          @ c += msg_data[15]
 758 04a0 20CF     	    ldmia   r7!, {r5}                       @ load md5_t[46], *md5_t++
 759 04a2 2B44     	    add     r3, r5                          @ c += md5_t[46]
 760 04a4 1026     	    movs    r6, #16                         @ amount to rotate
 761 04a6 F341     	    rors    r3, r6                          @ ROTL(c,16)
 762 04a8 2344     	    add     r3, r4                          @ c = d + ROTL(c,16)
 763              	
 764 04aa 1D46     	    mov     r5, r3                          @ c
 765 04ac 6540     	    eors    r5, r4                          @ c ^ d
 766 04ae 4D40     	    eors    r5, r1                          @ H(c,d,a)
 767 04b0 2A44     	    add     r2, r5                          @ b += H(c,d,a)
 768 04b2 8668     	    ldr     r6, [r0, #2<<2]                 @ load msg_data[2]
 769 04b4 3244     	    add     r2, r6                          @ b += msg_data[2]
 770 04b6 20CF     	    ldmia   r7!, {r5}                       @ load md5_t[47], *md5_t++
 771 04b8 2A44     	    add     r2, r5                          @ b += md5_t[47]
 772 04ba 0926     	    movs    r6, #9                          @ amount to rotate
 773 04bc F241     	    rors    r2, r6                          @ ROTL(b,23)
 774 04be 1A44     	    add     r2, r3                          @ b = c + ROTL(b,23)
 775              	
 776              	# 16 rounds of I(x,y,z) = y ^ (x | ~z)
 777              	# ************************************
 778 04c0 E543     	    mvns    r5, r4                          @ ~d
 779 04c2 1543     	    orrs    r5, r2                          @ b | ~d
 780 04c4 5D40     	    eors    r5, r3                          @ I(b,c,d)
 781 04c6 2944     	    add     r1, r5                          @ a += I(b,c,d)
 782 04c8 0668     	    ldr     r6, [r0, #0<<2]                 @ load msg_data[0]
 783 04ca 3144     	    add     r1, r6                          @ a += msg_data[0]
 784 04cc 20CF     	    ldmia   r7!, {r5}                       @ load md5_t[48], *md5_t++
 785 04ce 2944     	    add     r1, r5                          @ a += md5_t[48]
 786 04d0 1A26     	    movs    r6, #26                         @ amount to rotate
 787 04d2 F141     	    rors    r1, r6                          @ ROTL(a,6)
 788 04d4 1144     	    add     r1, r2                          @ a = b + ROTL(a,6)
 789              	
 790 04d6 DD43     	    mvns    r5, r3                          @ ~c
 791 04d8 0D43     	    orrs    r5, r1                          @ a | ~c
 792 04da 5540     	    eors    r5, r2                          @ I(a,b,c)
ARM GAS  src/mmcau_md5_functions.s 			page 16


 793 04dc 2C44     	    add     r4, r5                          @ d += I(a,b,c)
 794 04de C669     	    ldr     r6, [r0, #7<<2]                 @ load msg_data[7]
 795 04e0 3444     	    add     r4, r6                          @ d += msg_data[7]
 796 04e2 20CF     	    ldmia   r7!, {r5}                       @ load md5_t[49], *md5_t++
 797 04e4 2C44     	    add     r4, r5                          @ d += md5_t[49]
 798 04e6 1626     	    movs    r6, #22                         @ amount to rotate
 799 04e8 F441     	    rors    r4, r6                          @ ROTL(d,10)
 800 04ea 0C44     	    add     r4, r1                          @ d = a + ROTL(d,10)
 801              	
 802 04ec D543     	    mvns    r5, r2                          @ ~b
 803 04ee 2543     	    orrs    r5, r4                          @ d | ~b
 804 04f0 4D40     	    eors    r5, r1                          @ I(d,a,b)
 805 04f2 2B44     	    add     r3, r5                          @ c += I(d,a,b)
 806 04f4 866B     	    ldr     r6, [r0, #14<<2]                @ load msg_data[14]
 807 04f6 3344     	    add     r3, r6                          @ c += msg_data[14]
 808 04f8 20CF     	    ldmia   r7!, {r5}                       @ load md5_t[50], *md5_t++
 809 04fa 2B44     	    add     r3, r5                          @ c += md5_t[50]
 810 04fc 1126     	    movs    r6, #17                         @ amount to rotate
 811 04fe F341     	    rors    r3, r6                          @ ROTL(c,15)
 812 0500 2344     	    add     r3, r4                          @ c = d + ROTL(c,15)
 813              	
 814 0502 CD43     	    mvns    r5, r1                          @ ~a
 815 0504 1D43     	    orrs    r5, r3                          @ c | ~a
 816 0506 6540     	    eors    r5, r4                          @ I(c,d,a)
 817 0508 2A44     	    add     r2, r5                          @ b += I(c,d,a)
 818 050a 4669     	    ldr     r6, [r0, #5<<2]                 @ load msg_data[5]
 819 050c 3244     	    add     r2, r6                          @ b += msg_data[5]
 820 050e 20CF     	    ldmia   r7!, {r5}                       @ load md5_t[51], *md5_t++
 821 0510 2A44     	    add     r2, r5                          @ b += md5_t[51]
 822 0512 0B26     	    movs    r6, #11                         @ amount to rotate
 823 0514 F241     	    rors    r2, r6                          @ ROTL(b,21)
 824 0516 1A44     	    add     r2, r3                          @ b = c + ROTL(b,21)
 825              	
 826 0518 E543     	    mvns    r5, r4                          @ ~d
 827 051a 1543     	    orrs    r5, r2                          @ b | ~d
 828 051c 5D40     	    eors    r5, r3                          @ I(b,c,d)
 829 051e 2944     	    add     r1, r5                          @ a += I(b,c,d)
 830 0520 066B     	    ldr     r6, [r0, #12<<2]                @ load msg_data[12]
 831 0522 3144     	    add     r1, r6                          @ a += msg_data[12]
 832 0524 20CF     	    ldmia   r7!, {r5}                       @ load md5_t[52], *md5_t++
 833 0526 2944     	    add     r1, r5                          @ a += md5_t[52]
 834 0528 1A26     	    movs    r6, #26                         @ amount to rotate
 835 052a F141     	    rors    r1, r6                          @ ROTL(a,6)
 836 052c 1144     	    add     r1, r2                          @ a = b + ROTL(a,6)
 837              	
 838 052e DD43     	    mvns    r5, r3                          @ ~c
 839 0530 0D43     	    orrs    r5, r1                          @ a | ~c
 840 0532 5540     	    eors    r5, r2                          @ I(a,b,c)
 841 0534 2C44     	    add     r4, r5                          @ d += I(a,b,c)
 842 0536 C668     	    ldr     r6, [r0, #3<<2]                 @ load msg_data[3]
 843 0538 3444     	    add     r4, r6                          @ d += msg_data[3]
 844 053a 20CF     	    ldmia   r7!, {r5}                       @ load md5_t[53], *md5_t++
 845 053c 2C44     	    add     r4, r5                          @ d += md5_t[53]
 846 053e 1626     	    movs    r6, #22                         @ amount to rotate
 847 0540 F441     	    rors    r4, r6                          @ ROTL(d,10)
 848 0542 0C44     	    add     r4, r1                          @ d = a + ROTL(d,10)
 849              	
ARM GAS  src/mmcau_md5_functions.s 			page 17


 850 0544 D543     	    mvns    r5, r2                          @ ~b
 851 0546 2543     	    orrs    r5, r4                          @ d | ~b
 852 0548 4D40     	    eors    r5, r1                          @ I(d,a,b)
 853 054a 2B44     	    add     r3, r5                          @ c += I(d,a,b)
 854 054c 866A     	    ldr     r6, [r0, #10<<2]                @ load msg_data[10]
 855 054e 3344     	    add     r3, r6                          @ c += msg_data[10]
 856 0550 20CF     	    ldmia   r7!, {r5}                       @ load md5_t[54], *md5_t++
 857 0552 2B44     	    add     r3, r5                          @ c += md5_t[54]
 858 0554 1126     	    movs    r6, #17                         @ amount to rotate
 859 0556 F341     	    rors    r3, r6                          @ ROTL(c,15)
 860 0558 2344     	    add     r3, r4                          @ c = d + ROTL(c,15)
 861              	
 862 055a CD43     	    mvns    r5, r1                          @ ~a
 863 055c 1D43     	    orrs    r5, r3                          @ c | ~a
 864 055e 6540     	    eors    r5, r4                          @ I(c,d,a)
 865 0560 2A44     	    add     r2, r5                          @ b += I(c,d,a)
 866 0562 4668     	    ldr     r6, [r0, #1<<2]                 @ load msg_data[1]
 867 0564 3244     	    add     r2, r6                          @ b += msg_data[1]
 868 0566 20CF     	    ldmia   r7!, {r5}                       @ load md5_t[55], *md5_t++
 869 0568 2A44     	    add     r2, r5                          @ b += md5_t[55]
 870 056a 0B26     	    movs    r6, #11                         @ amount to rotate
 871 056c F241     	    rors    r2, r6                          @ ROTL(b,21)
 872 056e 1A44     	    add     r2, r3                          @ b = c + ROTL(b,21)
 873              	
 874 0570 E543     	    mvns    r5, r4                          @ ~d
 875 0572 1543     	    orrs    r5, r2                          @ b | ~d
 876 0574 5D40     	    eors    r5, r3                          @ I(b,c,d)
 877 0576 2944     	    add     r1, r5                          @ a += I(b,c,d)
 878 0578 066A     	    ldr     r6, [r0, #8<<2]                 @ load msg_data[8]
 879 057a 3144     	    add     r1, r6                          @ a += msg_data[8]
 880 057c 20CF     	    ldmia   r7!, {r5}                       @ load md5_t[56], *md5_t++
 881 057e 2944     	    add     r1, r5                          @ a += md5_t[56]
 882 0580 1A26     	    movs    r6, #26                         @ amount to rotate
 883 0582 F141     	    rors    r1, r6                          @ ROTL(a,6)
 884 0584 1144     	    add     r1, r2                          @ a = b + ROTL(a,6)
 885              	
 886 0586 DD43     	    mvns    r5, r3                          @ ~c
 887 0588 0D43     	    orrs    r5, r1                          @ a | ~c
 888 058a 5540     	    eors    r5, r2                          @ I(a,b,c)
 889 058c 2C44     	    add     r4, r5                          @ d += I(a,b,c)
 890 058e C66B     	    ldr     r6, [r0, #15<<2]                @ load msg_data[15]
 891 0590 3444     	    add     r4, r6                          @ d += msg_data[15]
 892 0592 20CF     	    ldmia   r7!, {r5}                       @ load md5_t[57], *md5_t++
 893 0594 2C44     	    add     r4, r5                          @ d += md5_t[57]
 894 0596 1626     	    movs    r6, #22                         @ amount to rotate
 895 0598 F441     	    rors    r4, r6                          @ ROTL(d,10)
 896 059a 0C44     	    add     r4, r1                          @ d = a + ROTL(d,10)
 897              	
 898 059c D543     	    mvns    r5, r2                          @ ~b
 899 059e 2543     	    orrs    r5, r4                          @ d | ~b
 900 05a0 4D40     	    eors    r5, r1                          @ I(d,a,b)
 901 05a2 2B44     	    add     r3, r5                          @ c += I(d,a,b)
 902 05a4 8669     	    ldr     r6, [r0, #6<<2]                 @ load msg_data[6]
 903 05a6 3344     	    add     r3, r6                          @ c += msg_data[6]
 904 05a8 20CF     	    ldmia   r7!, {r5}                       @ load md5_t[58], *md5_t++
 905 05aa 2B44     	    add     r3, r5                          @ c += md5_t[58]
 906 05ac 1126     	    movs    r6, #17                         @ amount to rotate
ARM GAS  src/mmcau_md5_functions.s 			page 18


 907 05ae F341     	    rors    r3, r6                          @ ROTL(c,15)
 908 05b0 2344     	    add     r3, r4                          @ c = d + ROTL(c,15)
 909              	
 910 05b2 CD43     	    mvns    r5, r1                          @ ~a
 911 05b4 1D43     	    orrs    r5, r3                          @ c | ~a
 912 05b6 6540     	    eors    r5, r4                          @ I(c,d,a)
 913 05b8 2A44     	    add     r2, r5                          @ b += I(c,d,a)
 914 05ba 466B     	    ldr     r6, [r0, #13<<2]                @ load msg_data[13]
 915 05bc 3244     	    add     r2, r6                          @ b += msg_data[13]
 916 05be 20CF     	    ldmia   r7!, {r5}                       @ load md5_t[59], *md5_t++
 917 05c0 2A44     	    add     r2, r5                          @ b += md5_t[59]
 918 05c2 0B26     	    movs    r6, #11                         @ amount to rotate
 919 05c4 F241     	    rors    r2, r6                          @ ROTL(b,21)
 920 05c6 1A44     	    add     r2, r3                          @ b = c + ROTL(b,21)
 921              	
 922 05c8 E543     	    mvns    r5, r4                          @ ~d
 923 05ca 1543     	    orrs    r5, r2                          @ b | ~d
 924 05cc 5D40     	    eors    r5, r3                          @ I(b,c,d)
 925 05ce 2944     	    add     r1, r5                          @ a += I(b,c,d)
 926 05d0 0669     	    ldr     r6, [r0, #4<<2]                 @ load msg_data[4]
 927 05d2 3144     	    add     r1, r6                          @ a += msg_data[4]
 928 05d4 20CF     	    ldmia   r7!, {r5}                       @ load md5_t[60], *md5_t++
 929 05d6 2944     	    add     r1, r5                          @ a += md5_t[60]
 930 05d8 1A26     	    movs    r6, #26                         @ amount to rotate
 931 05da F141     	    rors    r1, r6                          @ ROTL(a,6)
 932 05dc 1144     	    add     r1, r2                          @ a = b + ROTL(a,6)
 933              	
 934 05de DD43     	    mvns    r5, r3                          @ ~c
 935 05e0 0D43     	    orrs    r5, r1                          @ a | ~c
 936 05e2 5540     	    eors    r5, r2                          @ I(a,b,c)
 937 05e4 2C44     	    add     r4, r5                          @ d += I(a,b,c)
 938 05e6 C66A     	    ldr     r6, [r0, #11<<2]                @ load msg_data[11]
 939 05e8 3444     	    add     r4, r6                          @ d += msg_data[11]
 940 05ea 20CF     	    ldmia   r7!, {r5}                       @ load md5_t[61], *md5_t++
 941 05ec 2C44     	    add     r4, r5                          @ d += md5_t[61]
 942 05ee 1626     	    movs    r6, #22                         @ amount to rotate
 943 05f0 F441     	    rors    r4, r6                          @ ROTL(d,10)
 944 05f2 0C44     	    add     r4, r1                          @ d = a + ROTL(d,10)
 945              	
 946 05f4 D543     	    mvns    r5, r2                          @ ~b
 947 05f6 2543     	    orrs    r5, r4                          @ d | ~b
 948 05f8 4D40     	    eors    r5, r1                          @ I(d,a,b)
 949 05fa 2B44     	    add     r3, r5                          @ c += I(d,a,b)
 950 05fc 8668     	    ldr     r6, [r0, #2<<2]                 @ load msg_data[2]
 951 05fe 3344     	    add     r3, r6                          @ c += msg_data[2]
 952 0600 20CF     	    ldmia   r7!, {r5}                       @ load md5_t[62], *md5_t++
 953 0602 2B44     	    add     r3, r5                          @ c += md5_t[62]
 954 0604 1126     	    movs    r6, #17                         @ amount to rotate
 955 0606 F341     	    rors    r3, r6                          @ ROTL(c,15)
 956 0608 2344     	    add     r3, r4                          @ c = d + ROTL(c,15)
 957              	
 958 060a CD43     	    mvns    r5, r1                          @ ~a
 959 060c 1D43     	    orrs    r5, r3                          @ c | ~a
 960 060e 6540     	    eors    r5, r4                          @ I(c,d,a)
 961 0610 2A44     	    add     r2, r5                          @ b += I(c,d,a)
 962 0612 466A     	    ldr     r6, [r0, #9<<2]                 @ load msg_data[9]
 963 0614 3244     	    add     r2, r6                          @ b += msg_data[9]
ARM GAS  src/mmcau_md5_functions.s 			page 19


 964 0616 20CF     	    ldmia   r7!, {r5}                       @ load md5_t[63], *md5_t++
 965 0618 2A44     	    add     r2, r5                          @ b += md5_t[63]
 966 061a 0B26     	    movs    r6, #11                         @ amount to rotate
 967 061c F241     	    rors    r2, r6                          @ ROTL(b,21)
 968 061e 1A44     	    add     r2, r3                          @ b = c + ROTL(b,21)
 969              	
 970              	# after 16 rounds of F, G, H, and I, update md5_state
 971 0620 019E     	    ldr     r6, [sp, #4]                    @ restore *md5_state
 972 0622 3568     	    ldr     r5, [r6, #0<<2]                 @ load md5_state[0]
 973 0624 2944     	    add     r1, r5                          @ a += md5_state[0]
 974 0626 7568     	    ldr     r5, [r6, #1<<2]                 @ load md5_state[1]
 975 0628 2A44     	    add     r2, r5                          @ b += md5_state[1]
 976 062a B568     	    ldr     r5, [r6, #2<<2]                 @ load md5_state[2]
 977 062c 2B44     	    add     r3, r5                          @ c += md5_state[2]
 978 062e F568     	    ldr     r5, [r6, #3<<2]                 @ load md5_state[3]
 979 0630 2C44     	    add     r4, r5                          @ d += md5_state[3]
 980 0632 1EC6     	    stmia   r6!, {r1-r4}                    @ store updated md5_state[0-3]
 981              	
 982              	# check if we need to repeat num_blks
 983 0634 009D     	    ldr     r5, [sp, #0]                    @ restore num_blks
 984 0636 013D     	    subs    r5, #1                          @ decrement num_blks
 985 0638 02D1     	    bne     next_blk_repeat                 @ check num_blks
 986              	
 987              	# if num_blks = 0,
 988 063a 02B0     	    add     sp, #8                          @ set sp = *{r4-r7}
 989 063c F0BC     	    pop     {r4-r7}                         @ restore regs
 990 063e 7047     	    bx      lr                              @ exit routine
 991              	
 992              	# else (num_blks > 0),
 993              	next_blk_repeat:
 994 0640 4030     	    adds    r0, #64                         @ *msg_data -> next block of data
 995 0642 0095     	    str     r5, [sp, #0]                    @ store num_blks
 996 0644 084F     	    ldr     r7, =md5_t                      @ reset *md5_t
 997 0646 EBE4     	    b       next_blk                        @ repeat next_blk
 998              	
 999              	
 1000              	# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
 1001              	#
 1002              	#   MMCAU_MD5_UPDATE
 1003              	#   Updates MD5 state variables for one or more input message blocks
 1004              	#
 1005              	#   ARGUMENTS
 1006              	#   *msg_data       pointer to start of input message data
 1007              	#   num_blks        number of 512-bit blocks to process
 1008              	#   *md5_state      pointer to 120-bit block of MD5 state variables: a,b,c,d
 1009              	#
 1010              	#   CALLING CONVENTION
 1011              	#   void mmcau_md5_update      (const unsigned char     *msg_data,
 1012              	#                               const int               num_blks,
 1013              	#                               unsigned char           *md5_state)
 1014              	#
 1015              	#  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #
 1016              	#
 1017              	#    REGISTER  |  ALLOCATION (at the start of mmcau_md5_update)
 1018              	#   -----------+------------------------------------------------------------
 1019              	#          r0  |  *msg_data     (arg0)
 1020              	#          r1  |  num_blks      (arg1)
ARM GAS  src/mmcau_md5_functions.s 			page 20


 1021              	#          r2  |  *md5_state    (arg2)
 1022              	#              |
 1023              	#        > r2  |  irrelevant
 1024              	#
 1025              	# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
 1026              	
 1027              	    .global _mmcau_md5_update
 1028              	    .global mmcau_md5_update
 1029              	    .type   mmcau_md5_update, %function
 1030 0648 C046C046 	    .align  4
 1030      C046C046 
 1031              	
 1032              	_mmcau_md5_update:
 1033              	mmcau_md5_update:
 1034              	
 1035              	# store regs r4-r7 and r14, we need to restore them at the end of the routine
 1036 0650 F0B5     	    push    {r4-r7, lr}                     @ store regs
 1037              	
 1038 0652 064C     	    ldr     r4, =md5_initial_h
 1039 0654 F0CC     	    ldmia   r4, {r4-r7}                     @ load md5_initial_h[0-3]
 1040 0656 F0C2     	    stmia   r2!, {r4-r7}                    @ store in md5_state[0-3]
 1041 0658 103A     	    subs    r2, #4<<2                       @ reset *md5_state
 1042              	
 1043 065a FFF7FEFF 	    bl      mmcau_md5_hash_n                @ do mmcau_md5_hash_n
 1044              	
 1045 065e F0BD     	    pop     {r4-r7, pc}                     @ restore regs, exit routine
 1046              	
 1047              	
 1048              	# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
 1049              	#
 1050              	#   MMCAU_MD5_HASH
 1051              	#   Updates MD5 state variables for one input message block
 1052              	#
 1053              	#   ARGUMENTS
 1054              	#   *msg_data       pointer to start of input message data
 1055              	#   *md5_state      pointer to 128-bit block of MD5 state variables: a,b,c,d
 1056              	#
 1057              	#   CALLING CONVENTION
 1058              	#   void mmucau_md5_hash       (const unsigned char     *msg_data,
 1059              	#                               unsigned char           *md5_state)
 1060              	#
 1061              	#  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #
 1062              	#
 1063              	#    REGISTER  |  ALLOCATION (at the start of mmcau_md5_hash)
 1064              	#   -----------+------------------------------------------------------------
 1065              	#          r0  |  *msg_data     (arg0)
 1066              	#          r1  |  *md5_state    (arg1)
 1067              	#              |
 1068              	#        > r1  |  irrelevant
 1069              	#
 1070              	# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
 1071              	
 1072              	    .global _mmcau_md5_hash
 1073              	    .global mmcau_md5_hash
 1074              	    .type   mmcau_md5_hash, %function
 1075              	    .align  4
 1076              	
ARM GAS  src/mmcau_md5_functions.s 			page 21


 1077              	_mmcau_md5_hash:
 1078              	mmcau_md5_hash:
 1079              	
 1080 0660 0A46     	    mov     r2, r1                          @ move arg1 (*md5_state) to arg2
 1081 0662 0121     	    movs    r1, #1                          @ set arg1 (num_blks) = 1
 1082              	
 1083 0664 FEE7     	    b       mmcau_md5_hash_n                @ do mmcau_md5_hash_n
 1084              	
 1085              	
 1086              	# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
 1087              	
 1088 0666 0000     	    .data
 1089              	
 1090              	
 1091              	    .type   md5_initial_h, %object
 1092              	    .align  4
 1093              	
 1094              	md5_initial_h:
 1095 0000 01234567 	    .word   0x67452301	@ initial a
 1096 0004 89ABCDEF 	    .word   0xefcdab89  @ initial b
 1097 0008 FEDCBA98 	    .word   0x98badcfe  @ initial c
 1098 000c 76543210 	    .word   0x10325476  @ initial d
 1099              	
 1100              	
 1101              	    .type   md5_t, %object
 1102              	    .align  4
 1103              	
 1104              	md5_t:
 1105 0010 78A46AD7 	    .word   0xd76aa478
 1106 0014 56B7C7E8 	    .word   0xe8c7b756
 1107 0018 DB702024 	    .word   0x242070db
 1108 001c EECEBDC1 	    .word   0xc1bdceee
 1109 0020 AF0F7CF5 	    .word   0xf57c0faf
 1110 0024 2AC68747 	    .word   0x4787c62a
 1111 0028 134630A8 	    .word   0xa8304613
 1112 002c 019546FD 	    .word   0xfd469501
 1113 0030 D8988069 	    .word   0x698098d8
 1114 0034 AFF7448B 	    .word   0x8b44f7af
 1115 0038 B15BFFFF 	    .word   0xffff5bb1
 1116 003c BED75C89 	    .word   0x895cd7be
 1117 0040 2211906B 	    .word   0x6b901122
 1118 0044 937198FD 	    .word   0xfd987193
 1119 0048 8E4379A6 	    .word   0xa679438e
 1120 004c 2108B449 	    .word   0x49b40821
 1121 0050 62251EF6 	    .word   0xf61e2562
 1122 0054 40B340C0 	    .word   0xc040b340
 1123 0058 515A5E26 	    .word   0x265e5a51
 1124 005c AAC7B6E9 	    .word   0xe9b6c7aa
 1125 0060 5D102FD6 	    .word   0xd62f105d
 1126 0064 53144402 	    .word   0x02441453
 1127 0068 81E6A1D8 	    .word   0xd8a1e681
 1128 006c C8FBD3E7 	    .word   0xe7d3fbc8
 1129 0070 E6CDE121 	    .word   0x21e1cde6
 1130 0074 D60737C3 	    .word   0xc33707d6
 1131 0078 870DD5F4 	    .word   0xf4d50d87
 1132 007c ED145A45 	    .word   0x455a14ed
 1133 0080 05E9E3A9 	    .word   0xa9e3e905
ARM GAS  src/mmcau_md5_functions.s 			page 22


 1134 0084 F8A3EFFC 	    .word   0xfcefa3f8
 1135 0088 D9026F67 	    .word   0x676f02d9
 1136 008c 8A4C2A8D 	    .word   0x8d2a4c8a
 1137 0090 4239FAFF 	    .word   0xfffa3942
 1138 0094 81F67187 	    .word   0x8771f681
 1139 0098 22619D6D 	    .word   0x6d9d6122
 1140 009c 0C38E5FD 	    .word   0xfde5380c
 1141 00a0 44EABEA4 	    .word   0xa4beea44
 1142 00a4 A9CFDE4B 	    .word   0x4bdecfa9
 1143 00a8 604BBBF6 	    .word   0xf6bb4b60
 1144 00ac 70BCBFBE 	    .word   0xbebfbc70
 1145 00b0 C67E9B28 	    .word   0x289b7ec6
 1146 00b4 FA27A1EA 	    .word   0xeaa127fa
 1147 00b8 8530EFD4 	    .word   0xd4ef3085
 1148 00bc 051D8804 	    .word   0x04881d05
 1149 00c0 39D0D4D9 	    .word   0xd9d4d039
 1150 00c4 E599DBE6 	    .word   0xe6db99e5
 1151 00c8 F87CA21F 	    .word   0x1fa27cf8
 1152 00cc 6556ACC4 	    .word   0xc4ac5665
 1153 00d0 442229F4 	    .word   0xf4292244
 1154 00d4 97FF2A43 	    .word   0x432aff97
 1155 00d8 A72394AB 	    .word   0xab9423a7
 1156 00dc 39A093FC 	    .word   0xfc93a039
 1157 00e0 C3595B65 	    .word   0x655b59c3
 1158 00e4 92CC0C8F 	    .word   0x8f0ccc92
 1159 00e8 7DF4EFFF 	    .word   0xffeff47d
 1160 00ec D15D8485 	    .word   0x85845dd1
 1161 00f0 4F7EA86F 	    .word   0x6fa87e4f
 1162 00f4 E0E62CFE 	    .word   0xfe2ce6e0
 1163 00f8 144301A3 	    .word   0xa3014314
 1164 00fc A111084E 	    .word   0x4e0811a1
 1165 0100 827E53F7 	    .word   0xf7537e82
 1166 0104 35F23ABD 	    .word   0xbd3af235
 1167 0108 BBD2D72A 	    .word   0x2ad7d2bb
 1168 010c 91D386EB 	    .word   0xeb86d391
