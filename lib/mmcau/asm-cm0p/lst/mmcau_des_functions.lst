ARM GAS  src/mmcau_des_functions.s 			page 1


   1              	# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
   2              	#
   3              	# Copyright (c) Freescale Semiconductor, Inc 2013.
   4              	#
   5              	# FILE NAME         : mmcau_des_functions.s
   6              	# VERSION           : $Id:  $
   7              	# TYPE              : Source Cortex-M0+ assembly library code
   8              	# DEPARTMENT        : MCG R&D Cores and Platforms
   9              	# AUTHOR            : Anthony (Teejay) Ciancio
  10              	# AUTHOR EMAIL      : teejay.ciancio@freescale.com
  11              	#
  12              	#  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #
  13              	#
  14              	# VERSION   DATE        AUTHOR          DESCRIPTION
  15              	# *******   ****        ******          ***********
  16              	# 1.0       2013-11     Ciancio         initial release, using the ARMv6-M ISA
  17              	#
  18              	# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
  19              	
  20              	
  21              	    .include "cau2_defines.hdr"
   1              	#ifndef _MMCAU_H_
   2              	#define _MMCAU_H_
   3              	
   4              	    .equ    TL,0
   5              	    .equ    TS,0
   6              	    .equ    CASR,0
   7              	    .equ    CAA,1
   8              	    .equ    CA0,2
   9              	    .equ    CA1,3
  10              	    .equ    CA2,4
  11              	    .equ    CA3,5
  12              	    .equ    CA4,6
  13              	    .equ    CA5,7
  14              	    .equ    CA6,8
  15              	    .equ    CA7,9
  16              	    .equ    CA8,10
  17              	    .equ    CNOP,0x000
  18              	    .equ    LDR,0x010
  19              	    .equ    STR,0x020
  20              	    .equ    ADR,0x030
  21              	    .equ    RADR,0x040
  22              	    .equ    ADRA,0x050
  23              	    .equ    XOR,0x060
  24              	    .equ    ROTL,0x070
  25              	    .equ    MVRA,0x080
  26              	    .equ    MVAR,0x090
  27              	    .equ    AESS,0x0a0
  28              	    .equ    AESIS,0x0b0
  29              	    .equ    AESC,0x0c0
  30              	    .equ    AESIC,0x0d0
  31              	    .equ    AESR,0x0e0
  32              	    .equ    AESIR,0x0f0
  33              	    .equ    DESR,0x100
  34              	    .equ    DESK,0x110
  35              	    .equ    HASH,0x120
  36              	    .equ    SHS,0x130
ARM GAS  src/mmcau_des_functions.s 			page 2


  37              	    .equ    MDS,0x140
  38              	    .equ    SHS2,0x150
  39              	    .equ    ILL,0x1f0
  40              	    .equ    IP,8
  41              	    .equ    FP,4
  42              	    .equ    DC,1
  43              	    .equ    CP,2
  44              	    .equ    KSL1,0
  45              	    .equ    KSL2,1
  46              	    .equ    KSR1,2
  47              	    .equ    KSR2,3
  48              	    .equ    HFF,0
  49              	    .equ    HFG,1
  50              	    .equ    HFH,2
  51              	    .equ    HFI,3
  52              	    .equ    HFP,2
  53              	    .equ    HFC,4
  54              	    .equ    HFM,5
  55              	    .equ    HF2C,6
  56              	    .equ    HF2M,7
  57              	    .equ    HF2S,8
  58              	    .equ    HF2T,9
  59              	    .equ    HF2U,10
  60              	    .equ    HF2V,11
  61              	
  62              	#endif
  22              	    .syntax unified
  23              	
  24              	
  25              	    .equ      MMCAU_PPB_DIRECT, 0xf0005000
  26              	    .equ    MMCAU_PPB_INDIRECT, 0xf0005800
  27              	    .equ           MMCAU_1_CMD, 0x80000000
  28              	    .equ          MMCAU_2_CMDS, 0x80100000
  29              	    .equ          MMCAU_3_CMDS, 0x80100200
  30              	
  31              	
  32              	# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
  33              	#
  34              	#   MMCAU_DES_CHK_PARITY
  35              	#   Check key parity
  36              	#
  37              	#   ARGUMENTS
  38              	#   *key            pointer to 64-bit DES key with parity bits
  39              	#    return         0   no error
  40              	#                  -1   parity error
  41              	#
  42              	#   CALLING CONVENTION
  43              	#   int mmcau_des_chk_parity (const unsigned char *key)
  44              	#
  45              	#  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #
  46              	#
  47              	#    REGISTER  |  ALLOCATION (at the start of mmcau_des_chk_parity)
  48              	#   -----------+------------------------------------------------------------
  49              	#          r0  |  *key          (arg0)
  50              	#              |
  51              	#        > r0  |  irrelevant
  52              	#
ARM GAS  src/mmcau_des_functions.s 			page 3


  53              	# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
  54              	
  55              	    .global     _mmcau_des_chk_parity
  56              	    .global     mmcau_des_chk_parity
  57              	    .type       mmcau_des_chk_parity, %function
  58              	    .align      4
  59              	
  60              	_mmcau_des_chk_parity:
  61              	mmcau_des_chk_parity:
  62              	
  63              	# load the 64-bit key into the CAU's CA0/CA1 regs
  64 0000 1F4B     	    ldr     r3, =MMCAU_PPB_INDIRECT+((LDR+CA0)<<2)
  65 0002 06C8     	    ldmia   r0!, {r1-r2}                    @ load key
  66 0004 1960     	    str     r1, [r3, #0<<2]                 @ store lower half in CA0
  67 0006 5A60     	    str     r2, [r3, #1<<2]                 @ store upper half in CA1
  68              	
  69 0008 1E49     	    ldr     r1, =MMCAU_PPB_DIRECT
  70 000a 1F4A     	    ldr     r2, =MMCAU_1_CMD+((DESK+CP)<<22)
  71 000c 0A60     	    str     r2, [r1]                        @ perform the key schedule
  72              	
  73              	# CASR[31:28] contain the version number, we left-shift that off
  74              	# CASR[27:2] and CASR[0] are always 0
  75              	# CASR[1] is the DPE bit, which equals 1 if parity error or 0 if no error
  76 000e 986B     	    ldr     r0, [r3, #(((STR+CASR)-(LDR+CA0))<<2)]  @ load CASR
  77 0010 0001     	    lsls    r0, #4                                  @ shift off version number
  78 0012 01D0     	    beq     mmcau_des_chk_parity_end                @ check the DPE bit
  79              	
  80              	# if parity error,
  81 0014 0120     	    movs    r0, #1
  82 0016 4042     	    negs    r0, r0                                  @ return -1
  83              	
  84              	# else (no error),
  85              	mmcau_des_chk_parity_end: 
  86 0018 7047     	    bx  lr                                          @ return 0
  87              	
  88              	
  89              	# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
  90              	#
  91              	#   MMCAU_DES_ENCRYPT
  92              	#   Encrypts a single 8-byte block
  93              	#
  94              	#   ARGUMENTS
  95              	#   *in             pointer to 8-byte block of input plaintext
  96              	#   *key            pointer to 64-bit DES key with parity bits
  97              	#   *out            pointer to 8-byte block of output ciphertext
  98              	#
  99              	#   NOTE
 100              	#   Input and output blocks may overlap
 101              	#
 102              	#   CALLING CONVENTION
 103              	#   void mmcau_des_encrypt     (const unsigned char     *in,
 104              	#                               const unsigned char     *key,
 105              	#                               unsigned char           *out)
 106              	#
 107              	#  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #
 108              	#
 109              	#    REGISTER  |  ALLOCATION (at the start of mmcau_des_encrypt)
ARM GAS  src/mmcau_des_functions.s 			page 4


 110              	#   -----------+------------------------------------------------------------
 111              	#          r0  |  *in           (arg0)
 112              	#          r1  |  *key          (arg1)
 113              	#          r2  |  *out          (arg2)
 114              	#              |
 115              	#        > r2  |  irrelevant
 116              	#
 117              	# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
 118              	
 119              	    .global _mmcau_des_encrypt
 120              	    .global mmcau_des_encrypt
 121              	    .type   mmcau_des_encrypt, %function
 122 001a C046C046 	    .align  4
 122      C046
 123              	
 124              	_mmcau_des_encrypt:
 125              	mmcau_des_encrypt:
 126              	
 127              	# store regs r4-r7, we need to restore them at the end of the routine
 128 0020 F0B4     	    push    {r4-r7}                         @ store regs
 129              	
 130              	# load the 64-bit key into the CAU's CA0/CA1 regs
 131              	# load the 64-bit plaintext input block into the CAU's CA2/CA3 regs
 132 0022 174F     	    ldr     r7, =MMCAU_PPB_INDIRECT+((LDR+CA0)<<2)
 133 0024 18C9     	    ldmia   r1!, {r3-r4}                    @ load key
 134 0026 1BBA     	    rev     r3, r3
 135 0028 24BA     	    rev     r4, r4
 136 002a 60C8     	    ldmia   r0!, {r5-r6}                    @ load plaintext
 137 002c 2DBA     	    rev     r5, r5
 138 002e 36BA     	    rev     r6, r6
 139 0030 78C7     	    stmia   r7!, {r3-r6}                    @ store in CA[0-3]
 140              	
 141              	# send a series of 17 direct cau commands to perform the DES round operations
 142              	#   *(MMCAU_PPB_DIRECT) = mmcau_3_cmds(DESK,DESR+IP+KSL1,DESR+KSL2)      1- 3
 143              	#   *(MMCAU_PPB_DIRECT) = mmcau_3_cmds(DESR+KSL2,DESR+KSL2,DESR+KSL2)    4- 6
 144              	#   *(MMCAU_PPB_DIRECT) = mmcau_3_cmds(DESR+KSL2,DESR+KSL2,DESR+KSL1)    7- 9
 145              	#   *(MMCAU_PPB_DIRECT) = mmcau_3_cmds(DESR+KSL2,DESR+KSL2,DESR+KSL2)   10-12
 146              	#   *(MMCAU_PPB_DIRECT) = mmcau_3_cmds(DESR+KSL2,DESR+KSL2,DESR+KSL2)   13-15
 147              	#   *(MMCAU_PPB_DIRECT) = mmcau_2_cmds(DESR+KSL1,DESR+FP)               16-17
 148 0032 1648     	    ldr     r0, =encrypt_reg_data
 149 0034 7BC8     	    ldmia   r0, {r0-r1, r3-r6}              @ load commands
 150 0036 0360     	    str     r3, [r0]                        @ send commands  1- 3
 151 0038 0460     	    str     r4, [r0]                        @    " "         4- 6
 152 003a 0560     	    str     r5, [r0]                        @    " "         7- 9
 153 003c 0460     	    str     r4, [r0]                        @    " "        10-12
 154 003e 0460     	    str     r4, [r0]                        @    " "        13-15
 155 0040 0660     	    str     r6, [r0]                        @    " "        16-17
 156              	
 157              	# store the 64-bit ciphertext output block into memory
 158 0042 03C9     	    ldmia   r1, {r0-r1}                     @ load ciphertext
 159 0044 00BA     	    rev     r0, r0
 160 0046 09BA     	    rev     r1, r1
 161 0048 03C2     	    stmia   r2!, {r0-r1}                    @ store in out[0-1]
 162              	
 163 004a F0BC     	    pop     {r4-r7}                         @ restore regs
 164 004c 7047     	    bx      lr                              @ exit routine
 165              	
ARM GAS  src/mmcau_des_functions.s 			page 5


 166              	
 167              	# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
 168              	#
 169              	#   MMCAU_DES_DECRYPT
 170              	#   Decrypts a single 8-byte block
 171              	#
 172              	#   ARGUMENTS
 173              	#   *in             pointer to 8-byte block of input ciphertext
 174              	#   *key            pointer to 64-bit DES key with parity bits
 175              	#   *out            pointer to 8-byte block of output plaintext
 176              	#
 177              	#   NOTE
 178              	#   Input and output blocks may overlap
 179              	#
 180              	#   CALLING CONVENTION
 181              	#   void mmcau_des_decrypt     (const unsigned char     *in,
 182              	#                               const unsigned char     *key,
 183              	#                               unsigned char           *out)
 184              	#
 185              	#  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #
 186              	#
 187              	#    REGISTER  |  ALLOCATION (at the start of mmcau_des_decrypt)
 188              	#   -----------+------------------------------------------------------------
 189              	#          r0  |  *in           (arg0)
 190              	#          r1  |  *key          (arg1)
 191              	#          r2  |  *out          (arg2)
 192              	#              |
 193              	#        > r2  |  irrelevant
 194              	#
 195              	# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
 196              	
 197              	    .global _mmcau_des_decrypt
 198              	    .global mmcau_des_decrypt
 199              	    .type   mmcau_des_decrypt, %function
 200 004e C046     	    .align  4
 201              	
 202              	_mmcau_des_decrypt:
 203              	mmcau_des_decrypt:
 204              	
 205              	# store regs r4-r7, we need to restore them at the end of the routine
 206 0050 F0B4     	    push    {r4-r7}                         @ store regs
 207              	
 208              	# load the 64-bit key into the CAU's CA0/CA1 regs
 209              	# load the 64-bit ciphertext input block into the CAU's CA2/CA3 regs
 210 0052 0B4F     	    ldr     r7, =MMCAU_PPB_INDIRECT+((LDR+CA0)<<2)
 211 0054 18C9     	    ldmia   r1!, {r3-r4}                    @ load key
 212 0056 1BBA     	    rev     r3, r3
 213 0058 24BA     	    rev     r4, r4
 214 005a 60C8     	    ldmia   r0!, {r5-r6}                    @ load ciphertext
 215 005c 2DBA     	    rev     r5, r5
 216 005e 36BA     	    rev     r6, r6
 217 0060 78C7     	    stmia   r7!, {r3-r6}                    @ store in CA[0-3]
 218              	
 219              	# send a series of 17 direct cau commands to perform the DES round operations
 220              	#   *(MMCAU_PPB_DIRECT) = mmcau_3_cmds(DESK+DC,DESR+IP+KSR1,DESR+KSR2)   1- 3
 221              	#   *(MMCAU_PPB_DIRECT) = mmcau_3_cmds(DESR+KSR2,DESR+KSR2,DESR+KSR2)    4- 6
 222              	#   *(MMCAU_PPB_DIRECT) = mmcau_3_cmds(DESR+KSR2,DESR+KSR2,DESR+KSR1)    7- 9
ARM GAS  src/mmcau_des_functions.s 			page 6


 223              	#   *(MMCAU_PPB_DIRECT) = mmcau_3_cmds(DESR+KSR2,DESR+KSR2,DESR+KSR2)   10-12
 224              	#   *(MMCAU_PPB_DIRECT) = mmcau_3_cmds(DESR+KSR2,DESR+KSR2,DESR+KSR2)   13-15
 225              	#   *(MMCAU_PPB_DIRECT) = mmcau_2_cmds(DESR+KSR1,DESR+FP)               16-17
 226 0062 0B48     	    ldr     r0, =decrypt_reg_data
 227 0064 7BC8     	    ldmia   r0, {r0-r1, r3-r6}              @ load commands
 228 0066 0360     	    str     r3, [r0]                        @ send commands  1- 3
 229 0068 0460     	    str     r4, [r0]                        @    " "         4- 6
 230 006a 0560     	    str     r5, [r0]                        @    " "         7- 9
 231 006c 0460     	    str     r4, [r0]                        @    " "        10-12
 232 006e 0460     	    str     r4, [r0]                        @    " "        13-15
 233 0070 0660     	    str     r6, [r0]                        @    " "        16-17
 234              	
 235              	# store the 64-bit plaintext output block into memory
 236 0072 03C9     	    ldmia   r1, {r0-r1}                     @ load plaintext
 237 0074 00BA     	    rev     r0, r0
 238 0076 09BA     	    rev     r1, r1
 239 0078 03C2     	    stmia   r2!, {r0-r1}                    @ store in out[0-1]
 240              	
 241 007a F0BC     	    pop     {r4-r7}                         @ restore regs
 242 007c 7047     	    bx      lr                              @ exit routine
 243              	
 244              	
 245              	# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
 246              	
 247 007e 0000     	    .data
 248              	
 249              	
 250              	    .type   encrypt_reg_data, %object
 251              	    .align  4
 252              	
 253              	encrypt_reg_data:
 254 0000 005000F0 	    .word   MMCAU_PPB_DIRECT                                            @ r0
 255 0004 905800F0 	    .word   MMCAU_PPB_INDIRECT+((STR+CA2)<<2)                           @ r1
 256 0008 014318C4 	    .word   MMCAU_3_CMDS+((DESK)<<22)+((DESR+IP+KSL1)<<11)+DESR+KSL2    @ r3
 257 000c 010B58C0 	    .word   MMCAU_3_CMDS+((DESR+KSL2)<<22)+((DESR+KSL2)<<11)+DESR+KSL2  @ r4
 258 0010 000B58C0 	    .word   MMCAU_3_CMDS+((DESR+KSL2)<<22)+((DESR+KSL2)<<11)+DESR+KSL1  @ r5
 259 0014 002018C0 	    .word   MMCAU_2_CMDS+((DESR+KSL1)<<22)+((DESR+FP)<<11)              @ r6
 260              	
 261              	
 262              	    .type   decrypt_reg_data, %object
 263 0018 00000000 	    .align  4
 263      00000000 
 264              	
 265              	decrypt_reg_data:
 266 0020 005000F0 	    .word   MMCAU_PPB_DIRECT                                            @ r0
 267 0024 905800F0 	    .word   MMCAU_PPB_INDIRECT+((STR+CA2)<<2)                           @ r1
 268 0028 035358C4 	    .word   MMCAU_3_CMDS+((DESK+DC)<<22)+((DESR+IP+KSR1)<<11)+DESR+KSR2	@ r3
 269 002c 031BD8C0 	    .word   MMCAU_3_CMDS+((DESR+KSR2)<<22)+((DESR+KSR2)<<11)+DESR+KSR2  @ r4
 270 0030 021BD8C0 	    .word   MMCAU_3_CMDS+((DESR+KSR2)<<22)+((DESR+KSR2)<<11)+DESR+KSR1  @ r5
 271 0034 002098C0 	    .word   MMCAU_2_CMDS+((DESR+KSR1)<<22)+((DESR+FP)<<11)              @ r6
 271      00000000 
 271      00000000 
