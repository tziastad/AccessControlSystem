ARM GAS  src/mmcau_sha256_functions.s 			page 1


   1              	# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
   2              	#
   3              	# Copyright (c) Freescale Semiconductor, Inc 2013.
   4              	#
   5              	# FILE NAME         : mmcau_sha256_functions.s
   6              	# VERSION           : $Id:  $
   7              	# TYPE              : Source Cortex-M0+ assembly library code
   8              	# DEPARTMENT        : MCG R&D Core and Platforms
   9              	# AUTHOR            : Anthony (Teejay) Ciancio
  10              	# AUTHOR EMAIL      : teejay.ciancio@freescale.com
  11              	#
  12              	#  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #
  13              	#
  14              	# VERSION   DATE        AUTHOR          DESCRIPTION
  15              	# *******   ****        ******          ***********
  16              	# 1.0       2013-11     Ciancio         initial release, using the ARMv6-M ISA
  17              	#
  18              	# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
  19              	
  20              	
  21              	    .include "cau2_defines.hdr"
   1              	#ifndef _MMCAU_H_
   2              	#define _MMCAU_H_
   3              	
   4              	    .equ    TL,0
   5              	    .equ    TS,0
   6              	    .equ    CASR,0
   7              	    .equ    CAA,1
   8              	    .equ    CA0,2
   9              	    .equ    CA1,3
  10              	    .equ    CA2,4
  11              	    .equ    CA3,5
  12              	    .equ    CA4,6
  13              	    .equ    CA5,7
  14              	    .equ    CA6,8
  15              	    .equ    CA7,9
  16              	    .equ    CA8,10
  17              	    .equ    CNOP,0x000
  18              	    .equ    LDR,0x010
  19              	    .equ    STR,0x020
  20              	    .equ    ADR,0x030
  21              	    .equ    RADR,0x040
  22              	    .equ    ADRA,0x050
  23              	    .equ    XOR,0x060
  24              	    .equ    ROTL,0x070
  25              	    .equ    MVRA,0x080
  26              	    .equ    MVAR,0x090
  27              	    .equ    AESS,0x0a0
  28              	    .equ    AESIS,0x0b0
  29              	    .equ    AESC,0x0c0
  30              	    .equ    AESIC,0x0d0
  31              	    .equ    AESR,0x0e0
  32              	    .equ    AESIR,0x0f0
  33              	    .equ    DESR,0x100
  34              	    .equ    DESK,0x110
  35              	    .equ    HASH,0x120
  36              	    .equ    SHS,0x130
ARM GAS  src/mmcau_sha256_functions.s 			page 2


  37              	    .equ    MDS,0x140
  38              	    .equ    SHS2,0x150
  39              	    .equ    ILL,0x1f0
  40              	    .equ    IP,8
  41              	    .equ    FP,4
  42              	    .equ    DC,1
  43              	    .equ    CP,2
  44              	    .equ    KSL1,0
  45              	    .equ    KSL2,1
  46              	    .equ    KSR1,2
  47              	    .equ    KSR2,3
  48              	    .equ    HFF,0
  49              	    .equ    HFG,1
  50              	    .equ    HFH,2
  51              	    .equ    HFI,3
  52              	    .equ    HFP,2
  53              	    .equ    HFC,4
  54              	    .equ    HFM,5
  55              	    .equ    HF2C,6
  56              	    .equ    HF2M,7
  57              	    .equ    HF2S,8
  58              	    .equ    HF2T,9
  59              	    .equ    HF2U,10
  60              	    .equ    HF2V,11
  61              	
  62              	#endif
  22              	    .syntax unified
  23              	
  24              	
  25              	    .equ      MMCAU_PPB_DIRECT, 0xf0005000
  26              	    .equ    MMCAU_PPB_INDIRECT, 0xf0005800
  27              	    .equ           MMCAU_1_CMD, 0x80000000
  28              	    .equ          MMCAU_3_CMDS, 0x80100200
  29              	
  30              	
  31              	# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
  32              	#
  33              	#   MMCAU_SHA256_INITIALIZE_OUTPUT
  34              	#   Initializes the hash output and checks the CAU hardware revision
  35              	#   
  36              	#   ARGUMENTS
  37              	#   *output         pointer to 256-bit message digest output
  38              	#
  39              	#   CALLING CONVENTION
  40              	#   void mmcau_sha256_initialize_output (const unsigned int *output)
  41              	#
  42              	#  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #
  43              	#
  44              	#    REGISTER  |  ALLOCATION (at the start of mmcau_sha256_initialize_output)
  45              	#   -----------+------------------------------------------------------------
  46              	#          r0  |  *output       (arg0)
  47              	#              |
  48              	#        > r0  |  irrelevant
  49              	#
  50              	# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
  51              	
  52              	    .global _mmcau_sha256_initialize_output
ARM GAS  src/mmcau_sha256_functions.s 			page 3


  53              	    .global mmcau_sha256_initialize_output
  54              	    .type   mmcau_sha256_initialize_output, %function
  55              	    .align  4
  56              	
  57              	_mmcau_sha256_initialize_output:
  58              	mmcau_sha256_initialize_output:
  59              	
  60              	# store regs r4-r7, we need to restore them at the end of the routine
  61 0000 F0B4     	    push    {r4-r7}                         @ store regs
  62              	
  63 0002 954B     	    ldr     r3, =sha256_initial_h
  64 0004 F0CB     	    ldmia   r3!, {r4-r7}                    @ load sha256_initial_h[0-3]
  65 0006 F0C0     	    stmia   r0!, {r4-r7}                    @ store in output[0-3]
  66 0008 F0CB     	    ldmia   r3!, {r4-r7}                    @ load sha256_initial_h[4-7]
  67 000a F0C0     	    stmia   r0!, {r4-r7}                    @ store in output[4-7]
  68              	
  69 000c 0020     	    movs    r0, #0                          @ clear the return value
  70 000e F0BC     	    pop     {r4-r7}                         @ restore regs
  71 0010 7047     	    bx      lr                              @ exit routine
  72              	
  73              	
  74              	# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
  75              	#
  76              	#   MMCAU_SHA256_HASH_N
  77              	#   Perform the hash for one or more input message blocks and generate the
  78              	#   message digest output
  79              	#
  80              	#   ARGUMENTS
  81              	#   *input          pointer to start of input message data
  82              	#   num_blks        number of 512-bit blocks to process
  83              	#   *output         pointer to 256-bit message digest
  84              	#
  85              	#   NOTE
  86              	#   Input message and digest output blocks must not overlap
  87              	#
  88              	#   CALLING CONVENTION
  89              	#   void mmcau_sha256_hash_n   (const unsigned char     *input,
  90              	#                               const int               num_blks,
  91              	#                               unsigned int            *output)
  92              	#
  93              	#  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #
  94              	#
  95              	#    REGISTER  |  ALLOCATION (at the start of mmcau_sha256_hash_n)
  96              	#   -----------+------------------------------------------------------------
  97              	#          r0  |  *input        (arg0)
  98              	#          r1  |  num_blks      (arg1)
  99              	#          r2  |  *output       (arg2)
 100              	#
 101              	#        > r2  |  irrelevant
 102              	#
 103              	#
 104              	#       STACK  |  ALLOCATION (throughout mmcau_sha256_hash_n)
 105              	#   -----------+------------------------------------------------------------
 106              	#        #268  |  *output
 107              	#        #264  |  num_blks
 108              	#        #260  |  *input
 109              	#        #256  |  mmcau_3_cmds(ADRA+CA7,HASH+HF2T,HASH+HF2C)
ARM GAS  src/mmcau_sha256_functions.s 			page 4


 110              	#    #64-#252  |  w[i] in loop
 111              	#      #0-#60  |  w[0-15] in next_blk
 112              	#
 113              	# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
 114              	
 115              	    .global _mmcau_sha256_hash_n
 116              	    .global mmcau_sha256_hash_n
 117              	    .type   mmcau_sha256_hash_n, %function
 118 0012 C046C046 	    .align  4
 118      C046C046 
 118      C046C046 
 118      C046
 119              	
 120              	_mmcau_sha256_hash_n:
 121              	mmcau_sha256_hash_n:
 122              	
 123              	# store *input, num_blks, and *output, we need them later in the routine
 124              	# store regs r4-r10, we need to restore them at the end of the routine
 125 0020 F0B5     	    push    {r4-r7, lr}     @ store low regs and link reg
 126 0022 4346     	    mov     r3, r8
 127 0024 4C46     	    mov     r4, r9
 128 0026 5546     	    mov     r5, sl
 129 0028 5E46     	    mov     r6, fp
 130 002a 6746     	    mov     r7, ip
 131 002c FFB4     	    push    {r0-r2, r3-r7}  @ store *input, num_blks, *output, high regs
 132              	
 133 002e C1B0     	    sub     sp, #260        @ reserve stack
 134              	
 135              	# initialize the CAU data regs with the current contents of output[0-7]
 136 0030 8A49     	    ldr     r1, =MMCAU_PPB_INDIRECT+((LDR+CA0)<<2)
 137 0032 F0CA     	    ldmia   r2!, {r4-r7}                    @ load output[0-3]
 138 0034 F0C1     	    stmia   r1!, {r4-r7}                    @ store in CA[0-3]
 139 0036 F0CA     	    ldmia   r2!, {r4-r7}                    @ load output[4-7]
 140 0038 F0C1     	    stmia   r1!, {r4-r7}                    @ store in CA[4-7]
 141              	
 142              	# prepare for next_blk
 143 003a 8949     	    ldr     r1, =sha256_reg_data+3<<2       @ get *sha256_reg_data[3]
 144 003c FEC9     	    ldmia   r1, {r1-r7}                     @ load sha256_reg_data[3-9]
 145 003e A946     	    mov     r9, r5                          @ store mmcau_indirect_cmd(LDR+CAA)
 146 0040 B246     	    mov     sl, r6                          @ store mmcau_indirect_cmd(ADR+CAA)
 147 0042 BB46     	    mov     fp, r7                          @ store mmcau_indirect_cmd(STR+CAA)
 148 0044 874D     	    ldr     r5, =MMCAU_PPB_DIRECT
 149              	
 150              	
 151 0046 C046     	    .align  2
 152              	next_blk:
 153              	
 154              	#   i = 0;
 155              	#       for (j = 0; j < 16; j++, i++)
 156              	#       {
 157              	#           w[i] = byterev(input[i]);                   // copy m[i] to w[i]
 158              	#           *(MMCAU_PPB_INDIRECT + (LDR+CAA)) = w[i];   // +w[i]+h+SIGMA1(e)
 159              	#                                                       // add Ch(e,f,g)
 160              	#           *(MMCAU_PPB_DIRECT) = mmcau_3_cmds(ADRA+CA7,HASH+HF2T,HASH+HF2C);
 161              	#                                                       // +k[i]+t1+SIGMA0(e)
 162              	#           *(MMCAU_PPB_INDIRECT + (ADR+CAA)) = sha256_k[i];
 163              	#                                                       // add Maj(a,b,c)
ARM GAS  src/mmcau_sha256_functions.s 			page 5


 164              	#           *(MMCAU_PPB_DIRECT) = mmcau_3_cmds(MVAR+CA8,HASH+HF2S,HASH+HF2M);
 165              	#           *(MMCAU_PPB_DIRECT) = mmcau_1_cmd(SHS2);    // shift regs
 166              	#       }
 167              	#
 168              	#  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #
 169              	#
 170              	#    REGISTER  |  ALLOCATION (throughout next_blk)
 171              	#   -----------+------------------------------------------------------------
 172              	#          r0  |  *input
 173              	#          r1  |  mmcau_1_cmd(SHS2)
 174              	#          r2  |  mmcau_3_cmds(MVAR+CA8,HASH+HF2S,HASH+HF2M)
 175              	#          r3  |  mmcau_3_cmds(ADRA+CA7,HASH+HF2T,HASH+HF2C)
 176              	#          r4  |  *sha256_k
 177              	#          r5  |  *mmcau_direct_cmd()
 178              	#          r6  |  scratch
 179              	#          r7  |  scratch
 180              	#          r8  |  not used
 181              	#          r9  |  mmcau_indirect_cmd(LDR+CAA)
 182              	#    (sl) r10  |  mmcau_indirect_cmd(ADR+CAA)
 183              	#    (fp) r11  |  mmcau_indirect_cmd(STR+CAA)
 184              	#    (ip) r12  |  mmcau_1_cmd(SHS2)
 185              	#    (sp) r13  |  stack pointer
 186              	#    (lr) r14  |  mmcau_3_cmds(ADRA+CA7,HASH+HF2T,HASH+HF2M)
 187              	
 188 0048 80C8     	    ldmia   r0!, {r7}                       @ m[0], *input++
 189 004a 3FBA     	    rev     r7, r7                          @ w[0]
 190 004c 0097     	    str     r7, [sp, #0<<2]                 @ store w[0]
 191 004e 4E46     	    mov     r6, r9                          @ mmcau_indirect_cmd(LDR+CAA)
 192 0050 3760     	    str     r7, [r6]                        @ add w[i]
 193 0052 2B60     	    str     r3, [r5]                        @ +h, +SIGMA1(e), +Ch(e,f,g)
 194 0054 80CC     	    ldmia   r4!, {r7}                       @ k[0], *sha256_k++
 195 0056 5646     	    mov     r6, sl                          @ mmcau_indirect_cmd(ADR+CAA)
 196 0058 3760     	    str     r7, [r6]                        @ add k[0]
 197 005a 2A60     	    str     r2, [r5]                        @ t1, +SIGMA0(e), +Maj(a,b,c)
 198 005c 2960     	    str     r1, [r5]                        @ shift registers
 199              	
 200 005e 80C8     	    ldmia   r0!, {r7}                       @ m[1], *input++
 201 0060 3FBA     	    rev     r7, r7                          @ w[1]
 202 0062 0197     	    str     r7, [sp, #1<<2]                 @ store w[1]
 203 0064 4E46     	    mov     r6, r9                          @ mmcau_indirect_cmd(LDR+CAA)
 204 0066 3760     	    str     r7, [r6]                        @ add w[1]
 205 0068 80CC     	    ldmia   r4!, {r7}                       @ k[1], *sha256_k++
 206 006a 2B60     	    str     r3, [r5]                        @ +h, +SIGMA1(e), +Ch(e,f,g)
 207 006c 5646     	    mov     r6, sl                          @ mmcau_indirect_cmd(ADR+CAA)
 208 006e 3760     	    str     r7, [r6]                        @ add k[1]
 209 0070 2A60     	    str     r2, [r5]                        @ t1, +SIGMA0(e), +Maj(a,b,c)
 210 0072 2960     	    str     r1, [r5]                        @ shift registers
 211              	
 212 0074 80C8     	    ldmia   r0!, {r7}                       @ m[2], *input++
 213 0076 3FBA     	    rev     r7, r7                          @ w[2]
 214 0078 0297     	    str     r7, [sp, #2<<2]                 @ store w[2]
 215 007a 4E46     	    mov     r6, r9                          @ mmcau_indirect_cmd(LDR+CAA)
 216 007c 3760     	    str     r7, [r6]                        @ add w[2]
 217 007e 80CC     	    ldmia   r4!, {r7}                       @ k[2], *sha256_k++
 218 0080 2B60     	    str     r3, [r5]                        @ +h, +SIGMA1(e), +Ch(e,f,g)
 219 0082 5646     	    mov     r6, sl                          @ mmcau_indirect_cmd(ADR+CAA)
 220 0084 3760     	    str     r7, [r6]                        @ add k[2]
ARM GAS  src/mmcau_sha256_functions.s 			page 6


 221 0086 2A60     	    str     r2, [r5]                        @ t1, +SIGMA0(e), +Maj(a,b,c)
 222 0088 2960     	    str     r1, [r5]                        @ shift registers
 223              	
 224 008a 80C8     	    ldmia   r0!, {r7}                       @ m[3], *input++
 225 008c 3FBA     	    rev     r7, r7                          @ w[3]
 226 008e 0397     	    str     r7, [sp, #3<<2]                 @ store w[3]
 227 0090 4E46     	    mov     r6, r9                          @ mmcau_indirect_cmd(LDR+CAA)
 228 0092 3760     	    str     r7, [r6]                        @ add w[3]
 229 0094 80CC     	    ldmia   r4!, {r7}                       @ k[3], *sha256_k++
 230 0096 2B60     	    str     r3, [r5]                        @ +h, +SIGMA1(e), +Ch(e,f,g)
 231 0098 5646     	    mov     r6, sl                          @ mmcau_indirect_cmd(ADR+CAA)
 232 009a 3760     	    str     r7, [r6]                        @ add k[3]
 233 009c 2A60     	    str     r2, [r5]                        @ t1, +SIGMA0(e), +Maj(a,b,c)
 234 009e 2960     	    str     r1, [r5]                        @ shift registers
 235              	
 236 00a0 80C8     	    ldmia   r0!, {r7}                       @ m[4], *input++
 237 00a2 3FBA     	    rev     r7, r7                          @ w[4]
 238 00a4 0497     	    str     r7, [sp, #4<<2]                 @ store w[4]
 239 00a6 4E46     	    mov     r6, r9                          @ mmcau_indirect_cmd(LDR+CAA)
 240 00a8 3760     	    str     r7, [r6]                        @ add w[4]
 241 00aa 80CC     	    ldmia   r4!, {r7}                       @ k[4], *sha256_k++
 242 00ac 2B60     	    str     r3, [r5]                        @ +h, +SIGMA1(e), +Ch(e,f,g)
 243 00ae 5646     	    mov     r6, sl                          @ mmcau_indirect_cmd(ADR+CAA)
 244 00b0 3760     	    str     r7, [r6]                        @ add k[4]
 245 00b2 2A60     	    str     r2, [r5]                        @ t1, +SIGMA0(e), +Maj(a,b,c)
 246 00b4 2960     	    str     r1, [r5]                        @ shift registers
 247              	
 248 00b6 80C8     	    ldmia   r0!, {r7}                       @ m[5], *input++
 249 00b8 3FBA     	    rev     r7, r7                          @ w[5]
 250 00ba 0597     	    str     r7, [sp, #5<<2]                 @ store w[5]
 251 00bc 4E46     	    mov     r6, r9                          @ mmcau_indirect_cmd(LDR+CAA)
 252 00be 3760     	    str     r7, [r6]                        @ add w[5]
 253 00c0 80CC     	    ldmia   r4!, {r7}                       @ k[5], *sha256_k++
 254 00c2 2B60     	    str     r3, [r5]                        @ +h, +SIGMA1(e), +Ch(e,f,g)
 255 00c4 5646     	    mov     r6, sl                          @ mmcau_indirect_cmd(ADR+CAA)
 256 00c6 3760     	    str     r7, [r6]                        @ add k[5]
 257 00c8 2A60     	    str     r2, [r5]                        @ t1, +SIGMA0(e), +Maj(a,b,c)
 258 00ca 2960     	    str     r1, [r5]                        @ shift registers
 259              	
 260 00cc 80C8     	    ldmia   r0!, {r7}                       @ m[6], *input++
 261 00ce 3FBA     	    rev     r7, r7                          @ w[6]
 262 00d0 0697     	    str     r7, [sp, #6<<2]                 @ store w[6]
 263 00d2 4E46     	    mov     r6, r9                          @ mmcau_indirect_cmd(LDR+CAA)
 264 00d4 3760     	    str     r7, [r6]                        @ add w[6]
 265 00d6 80CC     	    ldmia   r4!, {r7}                       @ k[6], *sha256_k++
 266 00d8 2B60     	    str     r3, [r5]                        @ +h, +SIGMA1(e), +Ch(e,f,g)
 267 00da 5646     	    mov     r6, sl                          @ mmcau_indirect_cmd(ADR+CAA)
 268 00dc 3760     	    str     r7, [r6]                        @ add k[6]
 269 00de 2A60     	    str     r2, [r5]                        @ t1, +SIGMA0(e), +Maj(a,b,c)
 270 00e0 2960     	    str     r1, [r5]                        @ shift registers
 271              	
 272 00e2 80C8     	    ldmia   r0!, {r7}                       @ m[7], *input++
 273 00e4 3FBA     	    rev     r7, r7                          @ w[7]
 274 00e6 0797     	    str     r7, [sp, #7<<2]                 @ store w[7]
 275 00e8 4E46     	    mov     r6, r9                          @ mmcau_indirect_cmd(LDR+CAA)
 276 00ea 3760     	    str     r7, [r6]                        @ add w[7]
 277 00ec 80CC     	    ldmia   r4!, {r7}                       @ k[7], *sha256_k++
ARM GAS  src/mmcau_sha256_functions.s 			page 7


 278 00ee 2B60     	    str     r3, [r5]                        @ +h, +SIGMA1(e), +Ch(e,f,g)
 279 00f0 5646     	    mov     r6, sl                          @ mmcau_indirect_cmd(ADR+CAA)
 280 00f2 3760     	    str     r7, [r6]                        @ add k[7]
 281 00f4 2A60     	    str     r2, [r5]                        @ t1, +SIGMA0(e), +Maj(a,b,c)
 282 00f6 2960     	    str     r1, [r5]                        @ shift registers
 283              	
 284 00f8 80C8     	    ldmia   r0!, {r7}                       @ m[8], *input++
 285 00fa 3FBA     	    rev     r7, r7                          @ w[8]
 286 00fc 0897     	    str     r7, [sp, #8<<2]                 @ store w[8]
 287 00fe 4E46     	    mov     r6, r9                          @ mmcau_indirect_cmd(LDR+CAA)
 288 0100 3760     	    str     r7, [r6]                        @ add w[8]
 289 0102 80CC     	    ldmia   r4!, {r7}                       @ k[8], *sha256_k++
 290 0104 2B60     	    str     r3, [r5]                        @ +h, +SIGMA1(e), +Ch(e,f,g)
 291 0106 5646     	    mov     r6, sl                          @ mmcau_indirect_cmd(ADR+CAA)
 292 0108 3760     	    str     r7, [r6]                        @ add k[8]
 293 010a 2A60     	    str     r2, [r5]                        @ t1, +SIGMA0(e), +Maj(a,b,c)
 294 010c 2960     	    str     r1, [r5]                        @ shift registers
 295              	
 296 010e 80C8     	    ldmia   r0!, {r7}                       @ m[9], *input++
 297 0110 3FBA     	    rev     r7, r7                          @ w[9]
 298 0112 0997     	    str     r7, [sp, #9<<2]                 @ store w[9]
 299 0114 4E46     	    mov     r6, r9                          @ mmcau_indirect_cmd(LDR+CAA)
 300 0116 3760     	    str     r7, [r6]                        @ add w[9]
 301 0118 80CC     	    ldmia   r4!, {r7}                       @ k[9], *sha256_k++
 302 011a 2B60     	    str     r3, [r5]                        @ +h, +SIGMA1(e), +Ch(e,f,g)
 303 011c 5646     	    mov     r6, sl                          @ mmcau_indirect_cmd(ADR+CAA)
 304 011e 3760     	    str     r7, [r6]                        @ add k[9]
 305 0120 2A60     	    str     r2, [r5]                        @ t1, +SIGMA0(e), +Maj(a,b,c)
 306 0122 2960     	    str     r1, [r5]                        @ shift registers
 307              	
 308 0124 80C8     	    ldmia   r0!, {r7}                       @ m[10], *input++
 309 0126 3FBA     	    rev     r7, r7                          @ w[10]
 310 0128 0A97     	    str     r7, [sp, #10<<2]                @ store w[10]
 311 012a 4E46     	    mov     r6, r9                          @ mmcau_indirect_cmd(LDR+CAA)
 312 012c 3760     	    str     r7, [r6]                        @ add w[10]
 313 012e 80CC     	    ldmia   r4!, {r7}                       @ k[10], *sha256_k++
 314 0130 2B60     	    str     r3, [r5]                        @ +h, +SIGMA1(e), +Ch(e,f,g)
 315 0132 5646     	    mov     r6, sl                          @ mmcau_indirect_cmd(ADR+CAA)
 316 0134 3760     	    str     r7, [r6]                        @ add k[10]
 317 0136 2A60     	    str     r2, [r5]                        @ t1, +SIGMA0(e), +Maj(a,b,c)
 318 0138 2960     	    str     r1, [r5]                        @ shift registers
 319              	
 320 013a 80C8     	    ldmia   r0!, {r7}                       @ m[11], *input++
 321 013c 3FBA     	    rev     r7, r7                          @ w[11]
 322 013e 0B97     	    str     r7, [sp, #11<<2]                @ store w[11]
 323 0140 4E46     	    mov     r6, r9                          @ mmcau_indirect_cmd(LDR+CAA)
 324 0142 3760     	    str     r7, [r6]                        @ add w[11]
 325 0144 80CC     	    ldmia   r4!, {r7}                       @ k[11], *sha256_k++
 326 0146 2B60     	    str     r3, [r5]                        @ +h, +SIGMA1(e), +Ch(e,f,g)
 327 0148 5646     	    mov     r6, sl                          @ mmcau_indirect_cmd(ADR+CAA)
 328 014a 3760     	    str     r7, [r6]                        @ add k[11]
 329 014c 2A60     	    str     r2, [r5]                        @ t1, +SIGMA0(e), +Maj(a,b,c)
 330 014e 2960     	    str     r1, [r5]                        @ shift registers
 331              	
 332 0150 80C8     	    ldmia   r0!, {r7}                       @ m[12], *input++
 333 0152 3FBA     	    rev     r7, r7                          @ w[12]
 334 0154 0C97     	    str     r7, [sp, #12<<2]                @ store w[12]
ARM GAS  src/mmcau_sha256_functions.s 			page 8


 335 0156 4E46     	    mov     r6, r9                          @ mmcau_indirect_cmd(LDR+CAA)
 336 0158 3760     	    str     r7, [r6]                        @ add w[12]
 337 015a 80CC     	    ldmia   r4!, {r7}                       @ k[12], *sha256_k++
 338 015c 2B60     	    str     r3, [r5]                        @ +h, +SIGMA1(e), +Ch(e,f,g)
 339 015e 5646     	    mov     r6, sl                          @ mmcau_indirect_cmd(ADR+CAA)
 340 0160 3760     	    str     r7, [r6]                        @ add k[12]
 341 0162 2A60     	    str     r2, [r5]                        @ t1, +SIGMA0(e), +Maj(a,b,c)
 342 0164 2960     	    str     r1, [r5]                        @ shift registers
 343              	
 344 0166 80C8     	    ldmia   r0!, {r7}                       @ m[13], *input++
 345 0168 3FBA     	    rev     r7, r7                          @ w[13]
 346 016a 0D97     	    str     r7, [sp, #13<<2]                @ store w[13]
 347 016c 4E46     	    mov     r6, r9                          @ mmcau_indirect_cmd(LDR+CAA)
 348 016e 3760     	    str     r7, [r6]                        @ add w[13]
 349 0170 80CC     	    ldmia   r4!, {r7}                       @ k[13], *sha256_k++
 350 0172 2B60     	    str     r3, [r5]                        @ +h, +SIGMA1(e), +Ch(e,f,g)
 351 0174 5646     	    mov     r6, sl                          @ mmcau_indirect_cmd(ADR+CAA)
 352 0176 3760     	    str     r7, [r6]                        @ add k[13]
 353 0178 2A60     	    str     r2, [r5]                        @ t1, +SIGMA0(e), +Maj(a,b,c)
 354 017a 2960     	    str     r1, [r5]                        @ shift registers
 355              	
 356 017c 80C8     	    ldmia   r0!, {r7}                       @ m[14], *input++
 357 017e 3FBA     	    rev     r7, r7                          @ w[14]
 358 0180 0E97     	    str     r7, [sp, #14<<2]                @ store w[14]
 359 0182 4E46     	    mov     r6, r9                          @ mmcau_indirect_cmd(LDR+CAA)
 360 0184 3760     	    str     r7, [r6]                        @ add w[14]
 361 0186 80CC     	    ldmia   r4!, {r7}                       @ k[14], *sha256_k++
 362 0188 2B60     	    str     r3, [r5]                        @ +h, +SIGMA1(e), +Ch(e,f,g)
 363 018a 5646     	    mov     r6, sl                          @ mmcau_indirect_cmd(ADR+CAA)
 364 018c 3760     	    str     r7, [r6]                        @ add k[14]
 365 018e 2A60     	    str     r2, [r5]                        @ t1, +SIGMA0(e), +Maj(a,b,c)
 366 0190 2960     	    str     r1, [r5]                        @ shift registers
 367              	
 368 0192 80C8     	    ldmia   r0!, {r7}                       @ m[15], *input++
 369 0194 3FBA     	    rev     r7, r7                          @ w[15]
 370 0196 0F97     	    str     r7, [sp, #15<<2]                @ store w[15]
 371 0198 4E46     	    mov     r6, r9                          @ mmcau_indirect_cmd(LDR+CAA)
 372 019a 3760     	    str     r7, [r6]                        @ add w[15]
 373 019c 80CC     	    ldmia   r4!, {r7}                       @ k[15], *sha256_k++
 374 019e 2B60     	    str     r3, [r5]                        @ +h, +SIGMA1(e), +Ch(e,f,g)
 375 01a0 5646     	    mov     r6, sl                          @ mmcau_indirect_cmd(ADR+CAA)
 376 01a2 3760     	    str     r7, [r6]                        @ add k[15]
 377 01a4 2A60     	    str     r2, [r5]                        @ t1, +SIGMA0(e), +Maj(a,b,c)
 378 01a6 2960     	    str     r1, [r5]                        @ shift registers
 379              	
 380              	# prepare for loop
 381 01a8 4190     	    str     r0, [sp, #260]                  @ store *input
 382 01aa 8C46     	    mov     ip, r1                          @ store SHS2
 383 01ac 9646     	    mov     lr, r2                          @ store HF2M
 384 01ae 4093     	    str     r3, [sp, #256]                  @ store HF2C
 385 01b0 2D48     	    ldr     r0, =sha256_reg_data            @ get *sha256_reg_data
 386 01b2 07C8     	    ldmia   r0, {r0-r2}                     @ load sha256_reg_data[0-2]
 387 01b4 00AB     	    add     r3, sp, #0                      @ get *w[0]
 388 01b6 3026     	    movs    r6, #48                         @ set number of loops = 48
 389              	
 390              	
 391              	loop:
ARM GAS  src/mmcau_sha256_functions.s 			page 9


 392              	
 393              	#   for (j = 0; j < 48; j++, i++)
 394              	#   {
 395              	#   *(MMCAU_PPB_INDIRECT + (LDR+CAA))  = w[i-16];       // [i-16]
 396              	#   *(MMCAU_PPB_INDIRECT + (LDR+CA8))  = w[i-15];       // [i-15]
 397              	#   *(MMCAU_PPB_DIRECT) = mmcau_1_cmd(HASH+HF2U);       // + Sigma2(w[i-15])
 398              	#   *(MMCAU_PPB_INDIRECT + (ADR+CAA))  = w[i-7];        // add w[i-7]
 399              	#   *(MMCAU_PPB_INDIRECT + (LDR+CA8))  = w[i-2];        // load w[i-2]
 400              	#   *(MMCAU_PPB_DIRECT) = mmcau_1_cmd(HASH+HF2V);       // + Sigma1(w[i-2])
 401              	#   w[i] = *(MMCAU_PPB_INDIRECT + (STR+CAA));           // store w[i]
 402              	#   *(MMCAU_PPB_DIRECT) = mmcau_3_cmds(ADRA+CA7,HASH+HF2T,HASH+HF2C);
 403              	#   *(MMCAU_PPB_INDIRECT + (ADR+CAA))  = sha256_k[i];   // add k[i]
 404              	#   *(MMCAU_PPB_DIRECT) = mmcau_3_cmds(MVAR+CA8,HASH+HF2S,HASH+HF2M);
 405              	#   *(MMCAU_PPB_DIRECT) = mmcau_1_cmd(SHS2);            // shift registers
 406              	#   }
 407              	#
 408              	#  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #
 409              	#
 410              	#    REGISTER  |  ALLOCATION
 411              	#   -----------+------------------------------------------------------------
 412              	#          r0  |  mmcau_1_cmd(HASH+HF2U)
 413              	#          r1  |  mmcau_1_cmd(SHS2)
 414              	#          r2  |  mmcau_indirect_cmd(LDR+CA8)
 415              	#          r3  |  *w[0]
 416              	#          r4  |  *sha256_k
 417              	#          r5  |  *mmcau_direct_cmd()
 418              	#          r6  |  scratch
 419              	#          r7  |  scratch
 420              	#          r8  |  loop count
 421              	#          r9  |  mmcau_indirect_cmd(LDR+CAA)
 422              	#    (sl) r10  |  mmcau_indirect_cmd(ADR+CAA)
 423              	#    (fp) r11  |  mmcau_indirect_cmd(STR+CAA)
 424              	#    (ip) r12  |  mmcau_1_cmd(SHS2)
 425              	#    (sp) r13  |  stack pointer
 426              	#    (lr) r14  |  mmcau_3_cmds(ADRA+CA7,HASH+HF2T,HASH+HF2M)
 427              	
 428 01b8 B046     	    mov     r8, r6                          @ store loop count
 429 01ba 40CB     	    ldmia   r3!, {r6}                       @ w[i-16], *w[0]++
 430 01bc 4F46     	    mov     r7, r9                          @ (LDR+CAA)
 431 01be 3E60     	    str     r6, [r7]                        @ CAA += w[i-16]
 432 01c0 1E68     	    ldr     r6, [r3, #0<<2]                 @ w[i-15]
 433 01c2 1660     	    str     r6, [r2]                        @ CA8 += w[i-15]
 434 01c4 2860     	    str     r0, [r5]                        @ (HASH+HF2U)
 435 01c6 1E6A     	    ldr     r6, [r3, #8<<2]                 @ w[i-7]
 436 01c8 5746     	    mov     r7, sl                          @ (ADR+CAA)
 437 01ca 3E60     	    str     r6, [r7]                        @ CAA += w[i-7]
 438 01cc 5E6B     	    ldr     r6, [r3, #13<<2]                @ w[i-2]
 439 01ce 1660     	    str     r6, [r2]                        @ CA8 += w[i-2]
 440 01d0 2960     	    str     r1, [r5]                        @ (HASH+HF2V)
 441 01d2 5F46     	    mov     r7, fp                          @ (STR+CAA)
 442 01d4 3E68     	    ldr     r6, [r7]                        @ w[i]
 443 01d6 DE63     	    str     r6, [r3, #15<<2]                @ store w[i]
 444 01d8 409F     	    ldr     r7, [sp, #256]                  @ (ADRA+CA7,HASH+HF2T,HASH+HF2C)
 445 01da 2F60     	    str     r7, [r5]                        @ +h, SIGMA1(e) & Ch(e,f,g)
 446 01dc 40CC     	    ldmia   r4!, {r6}                       @ k[i], *sha256_k++
 447 01de 5746     	    mov     r7, sl                          @ (ADR+CAA)
 448 01e0 3E60     	    str     r6, [r7]                        @ add k[i]
ARM GAS  src/mmcau_sha256_functions.s 			page 10


 449 01e2 7746     	    mov     r7, lr                          @ (MVAR+CA8,HASH+HF2S,HASH+HF2M)
 450 01e4 2F60     	    str     r7, [r5]                        @ t1, + SIGMA0(e) + Maj(a,b,c)
 451 01e6 6746     	    mov     r7, ip                          @ (SHS2)
 452 01e8 2F60     	    str     r7, [r5]                        @ shift reGs
 453              	
 454              	
 455              	# find out if loop should be repeated
 456 01ea 4646     	    mov     r6, r8                          @ restore loop count
 457 01ec 013E     	    subs    r6, #1                          @ decrement loop count
 458 01ee E3D1     	    bne     loop                            @ check loop count
 459              	
 460              	# after going through the loop for the last time
 461 01f0 1E4A     	    ldr     r2, =MMCAU_PPB_INDIRECT+((ADR+CA0)<<2)
 462 01f2 439B     	    ldr     r3, [sp, #268]                  @ restore *output
 463 01f4 F0CB     	    ldmia   r3!, {r4-r7}                    @ load output[0-3]
 464 01f6 F0C2     	    stmia   r2!, {r4-r7}                    @ add to CA[0-3]
 465 01f8 F0CB     	    ldmia   r3!, {r4-r7}                    @ load output[4-7]
 466 01fa F0C2     	    stmia   r2!, {r4-r7}                    @ add to CA[4-7]
 467 01fc 603A     	    subs    r2, #96                         @ mmcau_indirect_cmd(STR+CA0)
 468 01fe 203B     	    subs    r3, #8<<2                       @ reset *output
 469 0200 F0CA     	    ldmia   r2!, {r4-r7}                    @ load new CA[0-3]
 470 0202 F0C3     	    stmia   r3!, {r4-r7}                    @ store in output[0-3]
 471 0204 F0CA     	    ldmia   r2!, {r4-r7}                    @ load new CA[4-7]
 472 0206 F0C3     	    stmia   r3!, {r4-r7}                    @ store in output[4-7]
 473              	
 474              	
 475              	# find out if next_blk should be repeated
 476 0208 4299     	    ldr     r1, [sp, #264]                  @ restore num_blks
 477 020a 0139     	    subs    r1, #1                          @ decrement num_blks
 478 020c 07D1     	    bne     repeat_next_blk                 @ check num_blks
 479              	
 480              	# if num_blks = 0,
 481 020e 44B0     	    add     sp, #272                        @ unreserve stack
 482 0210 F8BC     	    pop     {r3-r7}                         @ restore high regs
 483 0212 9846     	    mov     r8, r3
 484 0214 A146     	    mov     r9, r4
 485 0216 AA46     	    mov     sl, r5
 486 0218 B346     	    mov     fp, r6
 487 021a BC46     	    mov     ip, r7
 488 021c F0BD     	    pop     {r4-r7, pc}                     @ restore low regs, exit routine
 489              	
 490              	# else (num_blks > 0),
 491              	repeat_next_blk:
 492 021e 4291     	    str     r1, [sp, #264]                  @ store num_blks
 493 0220 4198     	    ldr     r0, [sp, #260]                  @ restore *input
 494 0222 0F49     	    ldr     r1, =sha256_reg_data+3<<2       @ get *sha256_reg_data[3]
 495 0224 1EC9     	    ldmia   r1, {r1-r4}                     @ load sha256_reg_data[3-6]
 496 0226 0F4D     	    ldr     r5, =MMCAU_PPB_DIRECT
 497 0228 0EE7     	    b       next_blk                        @ repeat next_blk
 498              	
 499              	
 500              	# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
 501              	#
 502              	#   MMCAU_SHA256_UPDATE
 503              	#   Updates SHA256 state variables for one or more input message blocks
 504              	#
 505              	#   ARGUMENTS
ARM GAS  src/mmcau_sha256_functions.s 			page 11


 506              	#   *input          pointer to start of input message data
 507              	#   num_blks        number of 512-bit blocks to process
 508              	#   *output         pointer to 256-bit message digest
 509              	#
 510              	#   CALLING CONVENTION
 511              	#   void mmcau_sha256_update   (const unsigned char     *input,
 512              	#                               const int               num_blks,
 513              	#                               unsigned int            *output)
 514              	#
 515              	#  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #
 516              	#   
 517              	#    REGISTER  |  ALLOCATION (at the start of mmcau_sha256_update)
 518              	#   -----------+------------------------------------------------------------
 519              	#          r0  |  *input        (arg0)
 520              	#          r1  |  num_blks      (arg1)
 521              	#          r2  |  *output       (arg2)
 522              	#              |
 523              	#        > r2  |  irrelevant  
 524              	#
 525              	# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
 526              	
 527              	    .global _mmcau_sha256_update
 528              	    .global mmcau_sha256_update
 529              	    .type   mmcau_sha256_update, %function
 530 022a C046C046 	    .align  4
 530      C046
 531              	
 532              	_mmcau_sha256_update:
 533              	mmcau_sha256_update:
 534              	
 535              	# store regs r4-r7 and r14, we need to restore them at the end of the routine
 536 0230 F0B5     	    push    {r4-r7, lr}                     @ store regs
 537              	
 538 0232 094B     	    ldr     r3, =sha256_initial_h
 539 0234 F0CB     	    ldmia   r3!, {r4-r7}                    @ load sha256_initial_h[0-3]
 540 0236 F0C2     	    stmia   r2!, {r4-r7}                    @ store in output[0-3]
 541 0238 F0CB     	    ldmia   r3!, {r4-r7}                    @ load sha256_initial_h[4-7]
 542 023a F0C2     	    stmia   r2!, {r4-r7}                    @ store in output[4-7]
 543 023c 203A     	    subs    r2, #32                         @ reset *output
 544              	
 545 023e FFF7FEFF 	    bl      mmcau_sha256_hash_n             @ do mmcau_sha256_hash_n
 546              	
 547 0242 F0BD     	    pop     {r4-r7, pc}                     @ restore regs, exit routine
 548              	
 549              	
 550              	# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
 551              	#
 552              	#   MMCAU_SHA256_HASH
 553              	#   Perform the hash and generate SHA256 state variables for one input
 554              	#   Message block.
 555              	#
 556              	#   ARGUMENTS
 557              	#   *input          pointer to start of input message data
 558              	#   *output         pointer to 256-bit message digest
 559              	#
 560              	#   NOTE
 561              	#   Input message and digest output blocks must not overlap
ARM GAS  src/mmcau_sha256_functions.s 			page 12


 562              	#
 563              	#   CALLING CONVENTION
 564              	#   void mmcau_sha256_hash     (const unsigned char     *input, 
 565              	#                               unsigned int            *output)
 566              	#
 567              	#  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #
 568              	#   
 569              	#    REGISTER  |  ALLOCATION (at the start of mmcau_sha256_hash)
 570              	#   -----------+------------------------------------------------------------
 571              	#          r0  |  *input        (arg0)
 572              	#          r1  |  *output       (arg1)
 573              	#              |
 574              	#        > r1  |  irrelevant  
 575              	#
 576              	# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
 577              	
 578              	    .global _mmcau_sha256_hash
 579              	    .global mmcau_sha256_hash
 580              	    .type   mmcau_sha256_hash, %function
 581 0244 C046C046 	    .align  4
 581      C046C046 
 581      C046C046 
 582              	
 583              	_mmcau_sha256_hash:
 584              	mmcau_sha256_hash:
 585              	
 586 0250 0A46     	    mov     r2, r1                          @ move arg1 (*output) to arg2
 587 0252 0121     	    movs    r1, #1                          @ set arg1 (num_blks) = 1
 588              	
 589 0254 FEE7     	    b       mmcau_sha256_hash_n             @ do mmcau_sha256_hash_n
 590              	
 591              	
 592              	# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
 593              	
 594 0256 0000     	    .data
 595              	
 596              	
 597              	    .type   sha256_reg_data, %object
 598              	    .align  4
 599              	
 600              	sha256_reg_data:
 601 0000 000080CA 	    .word   MMCAU_1_CMD+((HASH+HF2U)<<22)                               @ r0
 602 0004 0000C0CA 	    .word   MMCAU_1_CMD+((HASH+HF2V)<<22)                               @ r1
 603 0008 685800F0 	    .word   MMCAU_PPB_INDIRECT+((LDR+CA8)<<2)                           @ r2
 604 000c 000000D4 	    .word   MMCAU_1_CMD+((SHS2)<<22)                                    @ r1
 605 0010 274399A6 	    .word   MMCAU_3_CMDS+((MVAR+CA8)<<22)+((HASH+HF2S)<<11)+HASH+HF2M   @ r2
 606 0014 264B5996 	    .word   MMCAU_3_CMDS+((ADRA+CA7)<<22)+((HASH+HF2T)<<11)+HASH+HF2C   @ r3
 607 0018 50000000 	    .word   sha256_k                                                    @ r4
 608 001c 445800F0 	    .word   MMCAU_PPB_INDIRECT+((LDR+CAA)<<2)                           @ r5
 609 0020 C45800F0 	    .word   MMCAU_PPB_INDIRECT+((ADR+CAA)<<2)                           @ r6
 610 0024 845800F0 	    .word   MMCAU_PPB_INDIRECT+((STR+CAA)<<2)                           @ r7
 611              	
 612              	
 613              	    .type   sha256_initial_h, %object
 614 0028 00000000 	    .align  4
 614      00000000 
 615              	
ARM GAS  src/mmcau_sha256_functions.s 			page 13


 616              	sha256_initial_h:
 617 0030 67E6096A 	    .word   0x6a09e667
 618 0034 85AE67BB 	    .word   0xbb67ae85
 619 0038 72F36E3C 	    .word   0x3c6ef372
 620 003c 3AF54FA5 	    .word   0xa54ff53a
 621 0040 7F520E51 	    .word   0x510e527f
 622 0044 8C68059B 	    .word   0x9b05688c
 623 0048 ABD9831F 	    .word   0x1f83d9ab
 624 004c 19CDE05B 	    .word   0x5be0cd19
 625              	
 626              	
 627              	    .type   sha256_k, %object
 628              	    .align  4
 629              	
 630              	sha256_k:
 631 0050 982F8A42 	    .word   0x428a2f98
 632 0054 91443771 	    .word   0x71374491
 633 0058 CFFBC0B5 	    .word   0xb5c0fbcf
 634 005c A5DBB5E9 	    .word   0xe9b5dba5
 635 0060 5BC25639 	    .word   0x3956c25b
 636 0064 F111F159 	    .word   0x59f111f1
 637 0068 A4823F92 	    .word   0x923f82a4
 638 006c D55E1CAB 	    .word   0xab1c5ed5
 639 0070 98AA07D8 	    .word   0xd807aa98
 640 0074 015B8312 	    .word   0x12835b01
 641 0078 BE853124 	    .word   0x243185be
 642 007c C37D0C55 	    .word   0x550c7dc3
 643 0080 745DBE72 	    .word   0x72be5d74
 644 0084 FEB1DE80 	    .word   0x80deb1fe
 645 0088 A706DC9B 	    .word   0x9bdc06a7
 646 008c 74F19BC1 	    .word   0xc19bf174
 647 0090 C1699BE4 	    .word   0xe49b69c1
 648 0094 8647BEEF 	    .word   0xefbe4786
 649 0098 C69DC10F 	    .word   0x0fc19dc6
 650 009c CCA10C24 	    .word   0x240ca1cc
 651 00a0 6F2CE92D 	    .word   0x2de92c6f
 652 00a4 AA84744A 	    .word   0x4a7484aa
 653 00a8 DCA9B05C 	    .word   0x5cb0a9dc
 654 00ac DA88F976 	    .word   0x76f988da
 655 00b0 52513E98 	    .word   0x983e5152
 656 00b4 6DC631A8 	    .word   0xa831c66d
 657 00b8 C82703B0 	    .word   0xb00327c8
 658 00bc C77F59BF 	    .word   0xbf597fc7
 659 00c0 F30BE0C6 	    .word   0xc6e00bf3
 660 00c4 4791A7D5 	    .word   0xd5a79147
 661 00c8 5163CA06 	    .word   0x06ca6351
 662 00cc 67292914 	    .word   0x14292967
 663 00d0 850AB727 	    .word   0x27b70a85
 664 00d4 38211B2E 	    .word   0x2e1b2138
 665 00d8 FC6D2C4D 	    .word   0x4d2c6dfc
 666 00dc 130D3853 	    .word   0x53380d13
 667 00e0 54730A65 	    .word   0x650a7354
 668 00e4 BB0A6A76 	    .word   0x766a0abb
 669 00e8 2EC9C281 	    .word   0x81c2c92e
 670 00ec 852C7292 	    .word   0x92722c85
 671 00f0 A1E8BFA2 	    .word   0xa2bfe8a1
 672 00f4 4B661AA8 	    .word   0xa81a664b
ARM GAS  src/mmcau_sha256_functions.s 			page 14


 673 00f8 708B4BC2 	    .word   0xc24b8b70
 674 00fc A3516CC7 	    .word   0xc76c51a3
 675 0100 19E892D1 	    .word   0xd192e819
 676 0104 240699D6 	    .word   0xd6990624
 677 0108 85350EF4 	    .word   0xf40e3585
 678 010c 70A06A10 	    .word   0x106aa070
 679 0110 16C1A419 	    .word   0x19a4c116
 680 0114 086C371E 	    .word   0x1e376c08
 681 0118 4C774827 	    .word   0x2748774c
 682 011c B5BCB034 	    .word   0x34b0bcb5
 683 0120 B30C1C39 	    .word   0x391c0cb3
 684 0124 4AAAD84E 	    .word   0x4ed8aa4a
 685 0128 4FCA9C5B 	    .word   0x5b9cca4f
 686 012c F36F2E68 	    .word   0x682e6ff3
 687 0130 EE828F74 	    .word   0x748f82ee
 688 0134 6F63A578 	    .word   0x78a5636f
 689 0138 1478C884 	    .word   0x84c87814
 690 013c 0802C78C 	    .word   0x8cc70208
 691 0140 FAFFBE90 	    .word   0x90befffa
 692 0144 EB6C50A4 	    .word   0xa4506ceb
 693 0148 F7A3F9BE 	    .word   0xbef9a3f7
 694 014c F27871C6 	    .word   0xc67178f2
