ARM GAS  src/mmcau_aes_functions.s 			page 1


   1              	# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
   2              	#
   3              	# Copyright (c) Freescale Semiconductor, Inc 2013.
   4              	#
   5              	# FILE NAME         : mmcau_aes_functions.s
   6              	# VERSION           : $Id:  $
   7              	# TYPE              : Source Cortex-M0+ assembly library code
   8              	# DEPARTMENT        : MCG R&D Core and Platforms
   9              	# AUTHOR            : Anthony (Teejay) Ciancio
  10              	# AUTHOR EMAIL      : teejay.ciancio@freescale.com
  11              	#
  12              	#  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #
  13              	#
  14              	# VERSION   DATE        AUTHOR          DESCRIPTION
  15              	# *******   ****        ******          ***********
  16              	# 1.0       2013-11     Ciancio         initial release, using the ARMv6-M ISA
  17              	#
  18              	# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
  19              	
  20              	
  21              	    .include "cau2_defines.hdr"
   1              	#ifndef _MMCAU_H_
   2              	#define _MMCAU_H_
   3              	
   4              	    .equ    TL,0
   5              	    .equ    TS,0
   6              	    .equ    CASR,0
   7              	    .equ    CAA,1
   8              	    .equ    CA0,2
   9              	    .equ    CA1,3
  10              	    .equ    CA2,4
  11              	    .equ    CA3,5
  12              	    .equ    CA4,6
  13              	    .equ    CA5,7
  14              	    .equ    CA6,8
  15              	    .equ    CA7,9
  16              	    .equ    CA8,10
  17              	    .equ    CNOP,0x000
  18              	    .equ    LDR,0x010
  19              	    .equ    STR,0x020
  20              	    .equ    ADR,0x030
  21              	    .equ    RADR,0x040
  22              	    .equ    ADRA,0x050
  23              	    .equ    XOR,0x060
  24              	    .equ    ROTL,0x070
  25              	    .equ    MVRA,0x080
  26              	    .equ    MVAR,0x090
  27              	    .equ    AESS,0x0a0
  28              	    .equ    AESIS,0x0b0
  29              	    .equ    AESC,0x0c0
  30              	    .equ    AESIC,0x0d0
  31              	    .equ    AESR,0x0e0
  32              	    .equ    AESIR,0x0f0
  33              	    .equ    DESR,0x100
  34              	    .equ    DESK,0x110
  35              	    .equ    HASH,0x120
  36              	    .equ    SHS,0x130
ARM GAS  src/mmcau_aes_functions.s 			page 2


  37              	    .equ    MDS,0x140
  38              	    .equ    SHS2,0x150
  39              	    .equ    ILL,0x1f0
  40              	    .equ    IP,8
  41              	    .equ    FP,4
  42              	    .equ    DC,1
  43              	    .equ    CP,2
  44              	    .equ    KSL1,0
  45              	    .equ    KSL2,1
  46              	    .equ    KSR1,2
  47              	    .equ    KSR2,3
  48              	    .equ    HFF,0
  49              	    .equ    HFG,1
  50              	    .equ    HFH,2
  51              	    .equ    HFI,3
  52              	    .equ    HFP,2
  53              	    .equ    HFC,4
  54              	    .equ    HFM,5
  55              	    .equ    HF2C,6
  56              	    .equ    HF2M,7
  57              	    .equ    HF2S,8
  58              	    .equ    HF2T,9
  59              	    .equ    HF2U,10
  60              	    .equ    HF2V,11
  61              	
  62              	#endif
  22              	    .syntax unified
  23              	
  24              	
  25              	    .equ      MMCAU_PPB_DIRECT, 0xf0005000
  26              	    .equ    MMCAU_PPB_INDIRECT, 0xf0005800
  27              	    .equ           MMCAU_1_CMD, 0x80000000
  28              	    .equ          MMCAU_2_CMDS, 0x80100000
  29              	    .equ          MMCAU_3_CMDS, 0x80100200
  30              	
  31              	
  32              	# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
  33              	#
  34              	#   MMCAU_AES_SET_KEY
  35              	#   Performs an AES key expansion
  36              	#
  37              	#   ARGUMENTS
  38              	#   *key            pointer to input key (128, 192, 256 bits in length)
  39              	#   key_size        key_size in bits (128, 192, 256)
  40              	#   *key_sch        pointer to key schedule output (44, 52, 60 longwords)
  41              	#
  42              	#   CALLING CONVENTION
  43              	#   void mmcau_aes_set_key     (const unsigned char     *key,
  44              	#                               const int               key_size,
  45              	#                               unsigned char           *key_sch)
  46              	#
  47              	#  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #
  48              	#
  49              	#    REGISTER  |  ALLOCATION (at the start of mmcau_aes_set_key)
  50              	#   -----------+------------------------------------------------------------
  51              	#          r0  |  *key          (arg0)
  52              	#          r1  |  key_size      (arg1)
ARM GAS  src/mmcau_aes_functions.s 			page 3


  53              	#          r2  |  *key_sch      (arg2)
  54              	#              |
  55              	#        > r2  |  irrelevant
  56              	#
  57              	# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
  58              	
  59              	    .global _mmcau_aes_set_key
  60              	    .global mmcau_aes_set_key
  61              	    .type   mmcau_aes_set_key, %function
  62              	    .align  4
  63              	
  64              	_mmcau_aes_set_key:
  65              	mmcau_aes_set_key:
  66              	
  67              	# store regs r4-r12 and r14, we need to restore them at the end of the routine
  68 0000 F0B5     	    push    {r4-r7, lr}                     @ store low regs and link reg
  69 0002 4346     	    mov     r3, r8
  70 0004 4C46     	    mov     r4, r9
  71 0006 5546     	    mov     r5, sl
  72 0008 5E46     	    mov     r6, fp
  73 000a 6746     	    mov     r7, ip
  74 000c F8B4     	    push    {r3-r7}                         @ store high regs
  75              	
  76 000e 034B     	    ldr     r3, =set_key_reg_data            @ prepare for set_key reg load
  77              	
  78              	
  79              	set_key_check_size:
  80 0010 8029     	    cmp     r1, #128                        @ if key_size != 128,
  81 0012 00D1     	    bne     set_key_check_size_again        @ then = 192 or 256, so check again
  82 0014 C2E1     	    b       set_key_128                     @ else = 128, so do set_key_128
  83              	
  84              	
  85              	set_key_check_size_again:
  86 0016 C029     	    cmp     r1, #192                        @ if key_size != 192,
  87 0018 02D1     	    bne     set_key_256                     @ then = 256, so do set_key_256
  88 001a F7E0     	    b       set_key_192                     @ else = 192, so do set_key_192
  89 001c 00000000 	    .ltorg
  90              	
  91              	
  92              	set_key_256:
  93              	
  94              	#    REGISTER  |  ALLOCATION (throughout set_key_256)
  95              	#   -----------+------------------------------------------------------------
  96              	#          r0  |  scratch
  97              	#          r1  |  scratch
  98              	#          r2  |  *key_sch
  99              	#          r3  |  key_sch[0+8i] / scratch
 100              	#          r4  |  key_sch[1+8i] / scratch
 101              	#          r5  |  key_sch[2+8i] / scratch
 102              	#          r6  |  key_sch[3+8i] / scratch
 103              	#          r7  |  scratch
 104              	#          r8  |  *rcon
 105              	#          r9  |  mmcau_1_cmd(AESS+CAA)
 106              	#    (sl) r10  |  *mmcau_direct_cmd()
 107              	#    (fp) r11  |  mmcau_indirect_cmd(LDR+CAA)
 108              	#    (ip) r12  |  mmcau_indirect_cmd(STR+CAA)
 109              	#    (sp) r13  |  stack pointer
ARM GAS  src/mmcau_aes_functions.s 			page 4


 110              	#    (lr) r14  |  link register
 111              	
 112              	# load some of the regs in preperation of the AES-256 set key calculations
 113 0020 F8CB     	    ldmia   r3, {r3-r7}
 114 0022 9846     	    mov     r8, r3                          @ r8 = *rcon
 115 0024 A146     	    mov     r9, r4                          @ r9 = mmcau_1_cmd(AESS+CAA)
 116 0026 AA46     	    mov     sl, r5                          @ sl = *mmcau_direct_cmd()
 117 0028 B346     	    mov     fp, r6                          @ fp = mmcau_indirect_cmd(LDR+CAA)
 118 002a BC46     	    mov     ip, r7                          @ ip = mmcau_indirect_cmd(STR+CAA)
 119              	
 120              	# calculate key_sch[0-4]
 121 002c F8C8     	    ldmia   r0!, {r3-r7}                    @ load key[0-4]; *key++
 122 002e 1BBA     	    rev     r3, r3                          @ byterev(key[0]) = key_sch[0]
 123 0030 24BA     	    rev     r4, r4                          @ byterev(key[1]) = key_sch[1]
 124 0032 2DBA     	    rev     r5, r5                          @ byterev(key[2]) = key_sch[2]
 125 0034 36BA     	    rev     r6, r6                          @ byterev(key[3]) = key_sch[3]
 126 0036 3FBA     	    rev     r7, r7                          @ byterev(key[4]) = key_sch[4]
 127 0038 F8C2     	    stmia   r2!, {r3-r7}                    @ store key_sch[0-4], key_sch++
 128              	
 129              	# calculate key_sch[5-7]
 130 003a 83C8     	    ldmia   r0, {r0-r1,r7}                  @ load key[5-7]
 131 003c 00BA     	    rev     r0, r0                          @ byterev(key[5]) = key_sch[5]
 132 003e 09BA     	    rev     r1, r1                          @ byterev(key[6]) = key_sch[6]
 133 0040 3FBA     	    rev     r7, r7                          @ byterev(key[7]) = key_sch[7]
 134 0042 83C2     	    stmia   r2!, {r0-r1, r7}                @ store key_sch[5-7], key_sch++
 135              	
 136              	# calculate key_sch[8-11]
 137 0044 4046     	    mov     r0, r8
 138 0046 0168     	    ldr     r1, [r0]                        @ load rcon[0]
 139 0048 1820     	    movs    r0, #24
 140 004a C741     	    rors    r7, r0                          @ ROTL(key_sch[7],8)
 141 004c 5846     	    mov     r0, fp
 142 004e 0760     	    str     r7, [r0]                        @ ROTL(key_sch[7]) -> acc
 143 0050 4F46     	    mov     r7, r9
 144 0052 5046     	    mov     r0, sl
 145 0054 0760     	    str     r7, [r0]                        @ AES SubBytes
 146 0056 6046     	    mov     r0, ip
 147 0058 0768     	    ldr     r7, [r0]                        @ load CAA
 148 005a 7940     	    eors    r1, r7                          @ XOR rcon[0]
 149 005c 4B40     	    eors    r3, r1                          @ XOR key_sch[0]  = key_sch[8]
 150 005e 5C40     	    eors    r4, r3                          @ XOR key_sch[1]  = key_sch[9]
 151 0060 6540     	    eors    r5, r4                          @ XOR key_sch[2]  = key_sch[10]
 152 0062 6E40     	    eors    r6, r5                          @ XOR key_sch[3]  = key_sch[11]
 153 0064 78C2     	    stmia   r2!, {r3-r6}                    @ store key_sch[8-11], *key_sch++
 154              	
 155              	# calculate key_sch[12-15]
 156 0066 5D46     	    mov     r5, fp
 157 0068 2E60     	    str     r6, [r5]                        @ ROTL(key_sch[11]) -> acc
 158 006a 4B46     	    mov     r3, r9
 159 006c 5446     	    mov     r4, sl
 160 006e 2360     	    str     r3, [r4]                        @ AES SubBytes
 161 0070 6746     	    mov     r7, ip
 162 0072 3968     	    ldr     r1, [r7]                        @ load CAA
 163 0074 203A     	    subs    r2, #8<<2                       @ set *key_sch[4]
 164 0076 78CA     	    ldmia   r2!, {r3-r6}                    @ load key_sch[4-7], *key_sch++
 165 0078 4B40     	    eors    r3, r1                          @ XOR key_sch[4]  = key_sch[12]
 166 007a 5C40     	    eors    r4, r3                          @ XOR key_sch[5]  = key_sch[13]
ARM GAS  src/mmcau_aes_functions.s 			page 5


 167 007c 6540     	    eors    r5, r4                          @ XOR key_sch[6]  = key_sch[14]
 168 007e 6E40     	    eors    r6, r5                          @ XOR key_sch[7]  = key_sch[15]
 169 0080 1032     	    adds    r2, #4<<2                       @ set *key_sch[12]
 170 0082 78C2     	    stmia   r2!, {r3-r6}                    @ store key_sch[12-15], *key_sch++
 171              	
 172              	# calculate key_sch[16-19]
 173 0084 4046     	    mov     r0, r8
 174 0086 4768     	    ldr     r7, [r0, #1<<2]                 @ load rcon[1]
 175 0088 5D46     	    mov     r5, fp
 176 008a 1820     	    movs    r0, #24
 177 008c 4B46     	    mov     r3, r9
 178 008e C641     	    rors    r6, r0                          @ ROTL(key_sch[15],8)
 179 0090 5446     	    mov     r4, sl
 180 0092 2E60     	    str     r6, [r5]                        @ ROTL(key_sch[15]) -> acc
 181 0094 6046     	    mov     r0, ip
 182 0096 2360     	    str     r3, [r4]                        @ AES SubBytes
 183 0098 0168     	    ldr     r1, [r0]                        @ load CAA
 184 009a 7940     	    eors    r1, r7                          @ XOR rcon[1]
 185 009c 203A     	    subs    r2, #8<<2                       @ set *key_sch[8]
 186 009e 78CA     	    ldmia   r2!, {r3-r6}                    @ load key_sch[8-11], *key_sch++
 187 00a0 4B40     	    eors    r3, r1                          @ XOR key_sch[8]  = key_sch[16]
 188 00a2 5C40     	    eors    r4, r3                          @ XOR key_sch[9]  = key_sch[17]
 189 00a4 6540     	    eors    r5, r4                          @ XOR key_sch[10] = key_sch[18]
 190 00a6 6E40     	    eors    r6, r5                          @ XOR key_sch[11] = key_sch[19]
 191 00a8 1032     	    adds    r2, #4<<2                       @ set *key_sch[16]
 192 00aa 78C2     	    stmia   r2!, {r3-r6}                    @ store key_sch[16-19], *key_sch++
 193              	
 194              	# calculate key_sch[20-23]
 195 00ac 5D46     	    mov     r5, fp
 196 00ae 2E60     	    str     r6, [r5]                        @ ROTL(key_sch[19]) -> acc
 197 00b0 4B46     	    mov     r3, r9
 198 00b2 5446     	    mov     r4, sl
 199 00b4 2360     	    str     r3, [r4]                        @ AES SubBytes
 200 00b6 6746     	    mov     r7, ip
 201 00b8 3968     	    ldr     r1, [r7]                        @ load CAA
 202 00ba 203A     	    subs    r2, #8<<2                       @ set *key_sch[12]
 203 00bc 78CA     	    ldmia   r2!, {r3-r6}                    @ load key_sch[12-15], *key_sch++
 204 00be 4B40     	    eors    r3, r1                          @ XOR key_sch[12] = key_sch[20]
 205 00c0 5C40     	    eors    r4, r3                          @ XOR key_sch[13] = key_sch[21]
 206 00c2 6540     	    eors    r5, r4                          @ XOR key_sch[14] = key_sch[22]
 207 00c4 6E40     	    eors    r6, r5                          @ XOR key_sch[15] = key_sch[23]
 208 00c6 1032     	    adds    r2, #4<<2                       @ set *key_sch[20]
 209 00c8 78C2     	    stmia   r2!, {r3-r6}                    @ store key_sch[20-23], *key_sch++
 210              	
 211              	# calculate key_sch[24-27]
 212 00ca 4046     	    mov     r0, r8
 213 00cc 8768     	    ldr     r7, [r0, #2<<2]                 @ load rcon[2]
 214 00ce 5D46     	    mov     r5, fp
 215 00d0 1820     	    movs    r0, #24
 216 00d2 4B46     	    mov     r3, r9
 217 00d4 C641     	    rors    r6, r0                          @ ROTL(key_sch[23],8)
 218 00d6 5446     	    mov     r4, sl
 219 00d8 2E60     	    str     r6, [r5]                        @ ROTL(key_sch[23]) -> acc
 220 00da 6046     	    mov     r0, ip
 221 00dc 2360     	    str     r3, [r4]                        @ AES SubBytes
 222 00de 0168     	    ldr     r1, [r0]                        @ load CAA
 223 00e0 7940     	    eors    r1, r7                          @ XOR rcon[2]
ARM GAS  src/mmcau_aes_functions.s 			page 6


 224 00e2 203A     	    subs    r2, #8<<2                       @ set *key_sch[16]
 225 00e4 78CA     	    ldmia   r2!, {r3-r6}                    @ load key_sch[16-19], *key_sch++
 226 00e6 4B40     	    eors    r3, r1                          @ XOR key_sch[16] = key_sch[24]
 227 00e8 5C40     	    eors    r4, r3                          @ XOR key_sch[17] = key_sch[25]
 228 00ea 6540     	    eors    r5, r4                          @ XOR key_sch[18] = key_sch[26]
 229 00ec 6E40     	    eors    r6, r5                          @ XOR key_sch[19] = key_sch[27]
 230 00ee 1032     	    adds    r2, #4<<2                       @ set *key_sch[24]
 231 00f0 78C2     	    stmia   r2!, {r3-r6}                    @ store key_sch[24-27], *key_sch++
 232              	
 233              	# calculate key_sch[28-31]
 234 00f2 5D46     	    mov     r5, fp
 235 00f4 2E60     	    str     r6, [r5]                        @ ROTL(key_sch[27]) -> acc
 236 00f6 4B46     	    mov     r3, r9
 237 00f8 5446     	    mov     r4, sl
 238 00fa 2360     	    str     r3, [r4]                        @ AES SubBytes
 239 00fc 6746     	    mov     r7, ip
 240 00fe 3968     	    ldr     r1, [r7]                        @ load CAA
 241 0100 203A     	    subs    r2, #8<<2                       @ set *key_sch[20]
 242 0102 78CA     	    ldmia   r2!, {r3-r6}                    @ load key_sch[20-23], *key_sch++
 243 0104 4B40     	    eors    r3, r1                          @ XOR key_sch[20] = key_sch[28]
 244 0106 5C40     	    eors    r4, r3                          @ XOR key_sch[21] = key_sch[29]
 245 0108 6540     	    eors    r5, r4                          @ XOR key_sch[22] = key_sch[30]
 246 010a 6E40     	    eors    r6, r5                          @ XOR key_sch[23] = key_sch[31]
 247 010c 1032     	    adds    r2, #4<<2                       @ set *key_sch[28]
 248 010e 78C2     	    stmia   r2!, {r3-r6}                    @ store key_sch[28-31], *key_sch++
 249              	
 250              	# calculate key_sch[32-35]
 251 0110 4046     	    mov     r0, r8
 252 0112 C768     	    ldr     r7, [r0, #3<<2]                 @ load rcon[3]
 253 0114 5D46     	    mov     r5, fp
 254 0116 1820     	    movs    r0, #24
 255 0118 4B46     	    mov     r3, r9
 256 011a C641     	    rors    r6, r0                          @ ROTL(key_sch[31],8)
 257 011c 5446     	    mov     r4, sl
 258 011e 2E60     	    str     r6, [r5]                        @ ROTL(key_sch[31]) -> acc
 259 0120 6046     	    mov     r0, ip
 260 0122 2360     	    str     r3, [r4]                        @ AES SubBytes
 261 0124 0168     	    ldr     r1, [r0]                        @ load CAA
 262 0126 7940     	    eors    r1, r7                          @ XOR rcon[3]
 263 0128 203A     	    subs    r2, #8<<2                       @ set *key_sch[24]
 264 012a 78CA     	    ldmia   r2!, {r3-r6}                    @ load key_sch[24-27], *key_sch++
 265 012c 4B40     	    eors    r3, r1                          @ XOR key_sch[24] = key_sch[32]
 266 012e 5C40     	    eors    r4, r3                          @ XOR key_sch[25] = key_sch[33]
 267 0130 6540     	    eors    r5, r4                          @ XOR key_sch[26] = key_sch[34]
 268 0132 6E40     	    eors    r6, r5                          @ XOR key_sch[27] = key_sch[35]
 269 0134 1032     	    adds    r2, #4<<2                       @ set *key_sch[32]
 270 0136 78C2     	    stmia   r2!, {r3-r6}                    @ store key_sch[32-35], *key_sch++
 271              	
 272              	# calculate key_sch[36-39]
 273 0138 5D46     	    mov     r5, fp
 274 013a 2E60     	    str     r6, [r5]                        @ ROTL(key_sch[35]) -> acc
 275 013c 4B46     	    mov     r3, r9
 276 013e 5446     	    mov     r4, sl
 277 0140 2360     	    str     r3, [r4]                        @ AES SubBytes
 278 0142 6746     	    mov     r7, ip
 279 0144 3968     	    ldr     r1, [r7]                        @ load CAA
 280 0146 203A     	    subs    r2, #8<<2                       @ set *key_sch[28]
ARM GAS  src/mmcau_aes_functions.s 			page 7


 281 0148 78CA     	    ldmia   r2!, {r3-r6}                    @ load key_sch[28-31], *key_sch++
 282 014a 4B40     	    eors    r3, r1                          @ XOR key_sch[28] = key_sch[36]
 283 014c 5C40     	    eors    r4, r3                          @ XOR key_sch[29] = key_sch[37]
 284 014e 6540     	    eors    r5, r4                          @ XOR key_sch[30] = key_sch[38]
 285 0150 6E40     	    eors    r6, r5                          @ XOR key_sch[31] = key_sch[39]
 286 0152 1032     	    adds    r2, #4<<2                       @ set *key_sch[36]
 287 0154 78C2     	    stmia   r2!, {r3-r6}                    @ store key_sch[36-39], *key_sch++
 288              	
 289              	# calculate key_sch[40-43]
 290 0156 4046     	    mov     r0, r8
 291 0158 0769     	    ldr     r7, [r0, #4<<2]                 @ load rcon[4]
 292 015a 5D46     	    mov     r5, fp
 293 015c 1820     	    movs    r0, #24
 294 015e 4B46     	    mov     r3, r9
 295 0160 C641     	    rors    r6, r0                          @ ROTL(key_sch[39],8)
 296 0162 5446     	    mov     r4, sl
 297 0164 2E60     	    str     r6, [r5]                        @ ROTL(key_sch[39]) -> acc
 298 0166 6046     	    mov     r0, ip
 299 0168 2360     	    str     r3, [r4]                        @ AES SubBytes
 300 016a 0168     	    ldr     r1, [r0]                        @ load CAA
 301 016c 7940     	    eors    r1, r7                          @ XOR rcon[4]
 302 016e 203A     	    subs    r2, #8<<2                       @ set *key_sch[32]
 303 0170 78CA     	    ldmia   r2!, {r3-r6}                    @ load key_sch[32-35], *key_sch++
 304 0172 4B40     	    eors    r3, r1                          @ XOR key_sch[32] = key_sch[40]
 305 0174 5C40     	    eors    r4, r3                          @ XOR key_sch[33] = key_sch[41]
 306 0176 6540     	    eors    r5, r4                          @ XOR key_sch[34] = key_sch[42]
 307 0178 6E40     	    eors    r6, r5                          @ XOR key_sch[35] = key_sch[43]
 308 017a 1032     	    adds    r2, #4<<2                       @ set *key_sch[40]
 309 017c 78C2     	    stmia   r2!, {r3-r6}                    @ store key_sch[40-43], *key_sch++
 310              	
 311              	# calculate key_sch[44-47]
 312 017e 5D46     	    mov     r5, fp
 313 0180 2E60     	    str     r6, [r5]                        @ ROTL(key_sch[43]) -> acc
 314 0182 4B46     	    mov     r3, r9
 315 0184 5446     	    mov     r4, sl
 316 0186 2360     	    str     r3, [r4]                        @ AES SubBytes
 317 0188 6746     	    mov     r7, ip
 318 018a 3968     	    ldr     r1, [r7]                        @ load CAA
 319 018c 203A     	    subs    r2, #8<<2                       @ set *key_sch[36]
 320 018e 78CA     	    ldmia   r2!, {r3-r6}                    @ load key_sch[36-39], *key_sch++
 321 0190 4B40     	    eors    r3, r1                          @ XOR key_sch[36] = key_sch[44]
 322 0192 5C40     	    eors    r4, r3                          @ XOR key_sch[37] = key_sch[45]
 323 0194 6540     	    eors    r5, r4                          @ XOR key_sch[38] = key_sch[46]
 324 0196 6E40     	    eors    r6, r5                          @ XOR key_sch[39] = key_sch[47]
 325 0198 1032     	    adds    r2, #4<<2                       @ set *key_sch[44]
 326 019a 78C2     	    stmia   r2!, {r3-r6}                    @ store key_sch[44-47], *key_sch++
 327              	
 328              	# calculate key_sch[48-51]
 329 019c 4046     	    mov     r0, r8
 330 019e 4769     	    ldr     r7, [r0, #5<<2]                 @ load rcon[5]
 331 01a0 5D46     	    mov     r5, fp
 332 01a2 1820     	    movs    r0, #24
 333 01a4 4B46     	    mov     r3, r9
 334 01a6 C641     	    rors    r6, r0                          @ ROTL(key_sch[47],8)
 335 01a8 5446     	    mov     r4, sl
 336 01aa 2E60     	    str     r6, [r5]                        @ ROTL(key_sch[47]) -> acc
 337 01ac 6046     	    mov     r0, ip
ARM GAS  src/mmcau_aes_functions.s 			page 8


 338 01ae 2360     	    str     r3, [r4]                        @ AES SubBytes
 339 01b0 0168     	    ldr     r1, [r0]                        @ load CAA
 340 01b2 7940     	    eors    r1, r7                          @ XOR rcon[5]
 341 01b4 203A     	    subs    r2, #8<<2                       @ set *key_sch[40]
 342 01b6 78CA     	    ldmia   r2!, {r3-r6}                    @ load key_sch[40-43], *key_sch++
 343 01b8 4B40     	    eors    r3, r1                          @ XOR key_sch[40] = key_sch[48]
 344 01ba 5C40     	    eors    r4, r3                          @ XOR key_sch[41] = key_sch[49]
 345 01bc 6540     	    eors    r5, r4                          @ XOR key_sch[42] = key_sch[50]
 346 01be 6E40     	    eors    r6, r5                          @ XOR key_sch[43] = key_sch[51]
 347 01c0 1032     	    adds    r2, #4<<2                       @ set *key_sch[48]
 348 01c2 78C2     	    stmia   r2!, {r3-r6}                    @ store key_sch[48-51], *key_sch++
 349              	
 350              	# calculate key_sch[52-55]
 351 01c4 5D46     	    mov     r5, fp
 352 01c6 2E60     	    str     r6, [r5]                        @ ROTL(key_sch[51]) -> acc
 353 01c8 4B46     	    mov     r3, r9
 354 01ca 5446     	    mov     r4, sl
 355 01cc 2360     	    str     r3, [r4]                        @ AES SubBytes
 356 01ce 6746     	    mov     r7, ip
 357 01d0 3968     	    ldr     r1, [r7]                        @ load CAA
 358 01d2 203A     	    subs    r2, #8<<2                       @ set *key_sch[44]
 359 01d4 78CA     	    ldmia   r2!, {r3-r6}                    @ load key_sch[44-47], *key_sch++
 360 01d6 4B40     	    eors    r3, r1                          @ XOR key_sch[44] = key_sch[52]
 361 01d8 5C40     	    eors    r4, r3                          @ XOR key_sch[45] = key_sch[53]
 362 01da 6540     	    eors    r5, r4                          @ XOR key_sch[46] = key_sch[54]
 363 01dc 6E40     	    eors    r6, r5                          @ XOR key_sch[47] = key_sch[55]
 364 01de 1032     	    adds    r2, #4<<2                       @ set *key_sch[52]
 365 01e0 78C2     	    stmia   r2!, {r3-r6}                    @ store key_sch[52-55], *key_sch++
 366              	
 367              	# calculate key_sch[56-59]
 368 01e2 4046     	    mov     r0, r8
 369 01e4 8769     	    ldr     r7, [r0, #6<<2]                 @ load rcon[6]
 370 01e6 5D46     	    mov     r5, fp
 371 01e8 1820     	    movs    r0, #24
 372 01ea 4B46     	    mov     r3, r9
 373 01ec C641     	    rors    r6, r0                          @ ROTL(key_sch[55],8)
 374 01ee 5446     	    mov     r4, sl
 375 01f0 2E60     	    str     r6, [r5]                        @ ROTL(key_sch[55]) -> acc
 376 01f2 6046     	    mov     r0, ip
 377 01f4 2360     	    str     r3, [r4]                        @ AES SubBytes
 378 01f6 0168     	    ldr     r1, [r0]                        @ load CAA
 379 01f8 7940     	    eors    r1, r7                          @ XOR rcon[6]
 380 01fa 203A     	    subs    r2, #8<<2                       @ set *key_sch[48]
 381 01fc 78CA     	    ldmia   r2!, {r3-r6}                    @ load key_sch[48-51], *key_sch++
 382 01fe 4B40     	    eors    r3, r1                          @ XOR key_sch[48] = key_sch[56]
 383 0200 5C40     	    eors    r4, r3                          @ XOR key_sch[49] = key_sch[57]
 384 0202 6540     	    eors    r5, r4                          @ XOR key_sch[50] = key_sch[58]
 385 0204 6E40     	    eors    r6, r5                          @ XOR key_sch[51] = key_sch[59]
 386 0206 1032     	    adds    r2, #4<<2                       @ set *key_sch[56]
 387 0208 78C2     	    stmia   r2!, {r3-r6}                    @ store key_sch[56-59], *key_sch++
 388              	
 389 020a 87E1     	    b       set_key_end                     @ end routine
 390              	
 391              	
 392              	set_key_192:
 393              	
 394              	#    REGISTER  |  ALLOCATION (throughout set_key_192)
ARM GAS  src/mmcau_aes_functions.s 			page 9


 395              	#   -----------+------------------------------------------------------------
 396              	#          r0  |  key_sch[0+6i]
 397              	#          r1  |  key_sch[1+6i]
 398              	#          r2  |  *key_sch
 399              	#          r3  |  key_sch[2+6i]
 400              	#          r4  |  key_sch[3+6i]
 401              	#          r5  |  key_sch[4+6i] / rcon[i]
 402              	#          r6  |  key_sch[5+6i] / scratch
 403              	#          r7  |  scratch
 404              	#          r8  |  *rcon
 405              	#          r9  |  mmcau_1_cmd(AESS+CAA)
 406              	#    (sl) r10  |  *mmcau_direct_cmd()
 407              	#    (fp) r11  |  mmcau_indirect_cmd(LDR+CAA)
 408              	#        NOTE  |  mmcau_indirect_cmd(STR+CAA) = mmcau_indirect_cmd(LDR+CAA)+64
 409              	#    (ip) r12  |  temporary storage for key_sch[4+6i]
 410              	#    (sp) r13  |  stack pointer
 411              	#    (lr) r14  |  temporary storage for key_sch[5+6i]
 412              	
 413              	# load some of the regs in preperation of the AES-192 set key calculations
 414 020c 78CB     	    ldmia   r3, {r3-r6}    
 415 020e 9846     	    mov     r8, r3                          @ r8 = *rcon
 416 0210 A146     	    mov     r9, r4                          @ r9 = mmcau_1_cmd(AESS+CAA)
 417 0212 AA46     	    mov     sl, r5                          @ sl = *mmcau_direct_cmd()
 418 0214 B346     	    mov     fp, r6                          @ fp = mmcau_indirect_cmd(LDR+CAA)
 419              	
 420              	# calculate key_sch[0-5]
 421 0216 7BC8     	    ldmia   r0, {r0-r1, r3-r6}              @ load key[0-5]
 422 0218 00BA     	    rev     r0, r0                          @ byterev(key[0]) = key_sch[0]
 423 021a 09BA     	    rev     r1, r1                          @ byterev(key[1]) = key_sch[1]
 424 021c 1BBA     	    rev     r3, r3                          @ byterev(key[2]) = key_sch[2]
 425 021e 24BA     	    rev     r4, r4                          @ byterev(key[3]) = key_sch[3]
 426 0220 2DBA     	    rev     r5, r5                          @ byterev(key[4]) = key_sch[4]
 427 0222 36BA     	    rev     r6, r6                          @ byterev(key[5]) = key_sch[5]
 428 0224 7BC2     	    stmia   r2!, {r0-r1, r3-r6}             @ store key_sch[0-5]
 429              	
 430              	# calculate key_sch[6-11]
 431 0226 AC46     	    mov     ip, r5                          @ temporarily store key_sch[4]
 432 0228 B646     	    mov     lr, r6                          @ temporarily store key_sch[5]
 433 022a 4746     	    mov     r7, r8
 434 022c 3D68     	    ldr     r5, [r7, #0<<2]                 @ load rcon[0]
 435 022e 1827     	    movs    r7, #24
 436 0230 FE41     	    rors    r6, r7                          @ ROTL(key_sch[5],8)
 437 0232 5F46     	    mov     r7, fp
 438 0234 3E60     	    str     r6, [r7]                        @ ROTL(key_sch[5],8) -> acc
 439 0236 4E46     	    mov     r6, r9
 440 0238 5746     	    mov     r7, sl
 441 023a 3E60     	    str     r6, [r7]                        @ AES SubBytes
 442 023c 5E46     	    mov     r6, fp
 443 023e 4036     	    adds    r6, #64
 444 0240 3768     	    ldr     r7, [r6]                        @ load CAA
 445 0242 6F40     	    eors    r7, r5                          @ XOR rcon[0]
 446 0244 6546     	    mov     r5, ip                          @ restore key_sch[4]
 447 0246 7646     	    mov     r6, lr                          @ restore key_sch[5]
 448 0248 7840     	    eors    r0, r7                          @ XOR key_sch[0]  = key_sch[6]
 449 024a 4140     	    eors    r1, r0                          @ XOR key_sch[1]  = key_sch[7]
 450 024c 4B40     	    eors    r3, r1                          @ XOR key_sch[2]  = key_sch[8]
 451 024e 5C40     	    eors    r4, r3                          @ XOR key_sch[3]  = key_sch[9]
ARM GAS  src/mmcau_aes_functions.s 			page 10


 452 0250 6540     	    eors    r5, r4                          @ XOR key_sch[4]  = key_sch[10]
 453 0252 6E40     	    eors    r6, r5                          @ XOR key_sch[5]  = key_sch[11]
 454 0254 7BC2     	    stmia   r2!, {r0-r1, r3-r6}             @ store key_sch[6-11], *key_sch++
 455              	
 456              	# calculate key_sch[12-17]
 457 0256 AC46     	    mov     ip, r5                          @ temporarily store key_sch[10]
 458 0258 B646     	    mov     lr, r6                          @ temporarily store key_sch[11]
 459 025a 4746     	    mov     r7, r8
 460 025c 7D68     	    ldr     r5, [r7, #1<<2]                 @ load rcon[1]
 461 025e 1827     	    movs    r7, #24
 462 0260 FE41     	    rors    r6, r7                          @ ROTL(key_sch[11],8)
 463 0262 5F46     	    mov     r7, fp
 464 0264 3E60     	    str     r6, [r7]                        @ ROTL(key_sch[11],8) -> acc
 465 0266 4E46     	    mov     r6, r9
 466 0268 5746     	    mov     r7, sl
 467 026a 3E60     	    str     r6, [r7]                        @ AES SubBytes
 468 026c 5E46     	    mov     r6, fp
 469 026e 4036     	    adds    r6, #64
 470 0270 3768     	    ldr     r7, [r6]                        @ load CAA
 471 0272 6F40     	    eors    r7, r5                          @ XOR rcon[1]
 472 0274 6546     	    mov     r5, ip                          @ restore key_sch[10]
 473 0276 7646     	    mov     r6, lr                          @ restore key_sch[11]
 474 0278 7840     	    eors    r0, r7                          @ XOR key_sch[6]  = key_sch[12]
 475 027a 4140     	    eors    r1, r0                          @ XOR key_sch[7]  = key_sch[13]
 476 027c 4B40     	    eors    r3, r1                          @ XOR key_sch[8]  = key_sch[14]
 477 027e 5C40     	    eors    r4, r3                          @ XOR key_sch[9]  = key_sch[15]
 478 0280 6540     	    eors    r5, r4                          @ XOR key_sch[10] = key_sch[16]
 479 0282 6E40     	    eors    r6, r5                          @ XOR key_sch[11] = key_sch[17]
 480 0284 7BC2     	    stmia   r2!, {r0-r1, r3-r6}             @ store key_sch[12-17], *key_sch++
 481              	
 482              	# calculate key_sch[18-23]
 483 0286 AC46     	    mov     ip, r5                          @ temporarily store key_sch[16]
 484 0288 B646     	    mov     lr, r6                          @ temporarily store key_sch[17]
 485 028a 4746     	    mov     r7, r8
 486 028c BD68     	    ldr     r5, [r7, #2<<2]                 @ load rcon[2]
 487 028e 1827     	    movs    r7, #24
 488 0290 FE41     	    rors    r6, r7                          @ ROTL(key_sch[17],8)
 489 0292 5F46     	    mov     r7, fp
 490 0294 3E60     	    str     r6, [r7]                        @ ROTL(key_sch[17],8) -> acc
 491 0296 4E46     	    mov     r6, r9
 492 0298 5746     	    mov     r7, sl
 493 029a 3E60     	    str     r6, [r7]                        @ AES SubBytes
 494 029c 5E46     	    mov     r6, fp
 495 029e 4036     	    adds    r6, #64
 496 02a0 3768     	    ldr     r7, [r6]                        @ load CAA
 497 02a2 6F40     	    eors    r7, r5                          @ XOR rcon[2]
 498 02a4 6546     	    mov     r5, ip                          @ restore key_sch[16]
 499 02a6 7646     	    mov     r6, lr                          @ restore key_sch[17]
 500 02a8 7840     	    eors    r0, r7                          @ XOR key_sch[12] = key_sch[18]
 501 02aa 4140     	    eors    r1, r0                          @ XOR key_sch[13] = key_sch[19]
 502 02ac 4B40     	    eors    r3, r1                          @ XOR key_sch[14] = key_sch[20]
 503 02ae 5C40     	    eors    r4, r3                          @ XOR key_sch[15] = key_sch[21]
 504 02b0 6540     	    eors    r5, r4                          @ XOR key_sch[16] = key_sch[22]
 505 02b2 6E40     	    eors    r6, r5                          @ XOR key_sch[17] = key_sch[23]
 506 02b4 7BC2     	    stmia   r2!, {r0-r1, r3-r6}             @ store key_sch[18-23], *key_sch++
 507              	
 508              	# calculate key_sch[24-29]
ARM GAS  src/mmcau_aes_functions.s 			page 11


 509 02b6 AC46     	    mov     ip, r5                          @ temporarily store key_sch[22]
 510 02b8 B646     	    mov     lr, r6                          @ temporarily store key_sch[23]
 511 02ba 4746     	    mov     r7, r8
 512 02bc FD68     	    ldr     r5, [r7, #3<<2]                 @ load rcon[3]
 513 02be 1827     	    movs    r7, #24
 514 02c0 FE41     	    rors    r6, r7                          @ ROTL(key_sch[23],8)
 515 02c2 5F46     	    mov     r7, fp
 516 02c4 3E60     	    str     r6, [r7]                        @ ROTL(key_sch[23],8) -> acc
 517 02c6 4E46     	    mov     r6, r9
 518 02c8 5746     	    mov     r7, sl
 519 02ca 3E60     	    str     r6, [r7]                        @ AES SubBytes
 520 02cc 5E46     	    mov     r6, fp
 521 02ce 4036     	    adds    r6, #64
 522 02d0 3768     	    ldr     r7, [r6]                        @ load CAA
 523 02d2 6F40     	    eors    r7, r5                          @ XOR rcon[3]
 524 02d4 6546     	    mov     r5, ip                          @ restore key_sch[22]
 525 02d6 7646     	    mov     r6, lr                          @ restore key_sch[23]
 526 02d8 7840     	    eors    r0, r7                          @ XOR key_sch[18] = key_sch[24]
 527 02da 4140     	    eors    r1, r0                          @ XOR key_sch[19] = key_sch[25]
 528 02dc 4B40     	    eors    r3, r1                          @ XOR key_sch[20] = key_sch[26]
 529 02de 5C40     	    eors    r4, r3                          @ XOR key_sch[21] = key_sch[27]
 530 02e0 6540     	    eors    r5, r4                          @ XOR key_sch[22] = key_sch[28]
 531 02e2 6E40     	    eors    r6, r5                          @ XOR key_sch[23] = key_sch[29]
 532 02e4 7BC2     	    stmia   r2!, {r0-r1, r3-r6}             @ store key_sch[24-29], *key_sch++
 533              	
 534              	# calculate key_sch[30-35]
 535 02e6 AC46     	    mov     ip, r5                          @ temporarily store key_sch[28]
 536 02e8 B646     	    mov     lr, r6                          @ temporarily store key_sch[29]
 537 02ea 4746     	    mov     r7, r8
 538 02ec 3D69     	    ldr     r5, [r7, #4<<2]                 @ load rcon[4]
 539 02ee 1827     	    movs    r7, #24
 540 02f0 FE41     	    rors    r6, r7                          @ ROTL(key_sch[29],8)
 541 02f2 5F46     	    mov     r7, fp
 542 02f4 3E60     	    str     r6, [r7]                        @ ROTL(key_sch[29],8) -> acc
 543 02f6 4E46     	    mov     r6, r9
 544 02f8 5746     	    mov     r7, sl
 545 02fa 3E60     	    str     r6, [r7]                        @ AES SubBytes
 546 02fc 5E46     	    mov     r6, fp
 547 02fe 4036     	    adds    r6, #64
 548 0300 3768     	    ldr     r7, [r6]                        @ load CAA
 549 0302 6F40     	    eors    r7, r5                          @ XOR rcon[4]
 550 0304 6546     	    mov     r5, ip                          @ restore key_sch[28]
 551 0306 7646     	    mov     r6, lr                          @ restore key_sch[29]
 552 0308 7840     	    eors    r0, r7                          @ XOR key_sch[24] = key_sch[30]
 553 030a 4140     	    eors    r1, r0                          @ XOR key_sch[25] = key_sch[31]
 554 030c 4B40     	    eors    r3, r1                          @ XOR key_sch[26] = key_sch[32]
 555 030e 5C40     	    eors    r4, r3                          @ XOR key_sch[27] = key_sch[33]
 556 0310 6540     	    eors    r5, r4                          @ XOR key_sch[28] = key_sch[34]
 557 0312 6E40     	    eors    r6, r5                          @ XOR key_sch[29] = key_sch[35]
 558 0314 7BC2     	    stmia   r2!, {r0-r1, r3-r6}             @ store key_sch[30-35], *key_sch++
 559              	
 560              	# calculate key_sch[36-41]
 561 0316 AC46     	    mov     ip, r5                          @ temporarily store key_sch[34]
 562 0318 B646     	    mov     lr, r6                          @ temporarily store key_sch[35]
 563 031a 4746     	    mov     r7, r8
 564 031c 7D69     	    ldr     r5, [r7, #5<<2]                 @ load rcon[5]
 565 031e 1827     	    movs    r7, #24
ARM GAS  src/mmcau_aes_functions.s 			page 12


 566 0320 FE41     	    rors    r6, r7                          @ ROTL(key_sch[35],8)
 567 0322 5F46     	    mov     r7, fp
 568 0324 3E60     	    str     r6, [r7]                        @ ROTL(key_sch[35],8) -> acc
 569 0326 4E46     	    mov     r6, r9
 570 0328 5746     	    mov     r7, sl
 571 032a 3E60     	    str     r6, [r7]                        @ AES SubBytes
 572 032c 5E46     	    mov     r6, fp
 573 032e 4036     	    adds    r6, #64
 574 0330 3768     	    ldr     r7, [r6]                        @ load CAA
 575 0332 6F40     	    eors    r7, r5                          @ XOR rcon[5]
 576 0334 6546     	    mov     r5, ip                          @ restore key_sch[34]
 577 0336 7646     	    mov     r6, lr                          @ restore key_sch[35]
 578 0338 7840     	    eors    r0, r7                          @ XOR key_sch[30] = key_sch[36]
 579 033a 4140     	    eors    r1, r0                          @ XOR key_sch[31] = key_sch[37]
 580 033c 4B40     	    eors    r3, r1                          @ XOR key_sch[32] = key_sch[38]
 581 033e 5C40     	    eors    r4, r3                          @ XOR key_sch[33] = key_sch[39]
 582 0340 6540     	    eors    r5, r4                          @ XOR key_sch[34] = key_sch[40]
 583 0342 6E40     	    eors    r6, r5                          @ XOR key_sch[35] = key_sch[41]
 584 0344 7BC2     	    stmia   r2!, {r0-r1, r3-r6}             @ store key_sch[35-41], *key_sch++
 585              	
 586              	# calculate key_sch[42-47]
 587 0346 AC46     	    mov     ip, r5                          @ temporarily store key_sch[40]
 588 0348 B646     	    mov     lr, r6                          @ temporarily store key_sch[41]
 589 034a 4746     	    mov     r7, r8
 590 034c BD69     	    ldr     r5, [r7, #6<<2]                 @ load rcon[6]
 591 034e 1827     	    movs    r7, #24
 592 0350 FE41     	    rors    r6, r7                          @ ROTL(key_sch[41],8)
 593 0352 5F46     	    mov     r7, fp
 594 0354 3E60     	    str     r6, [r7]                        @ ROTL(key_sch[41],8) -> acc
 595 0356 4E46     	    mov     r6, r9
 596 0358 5746     	    mov     r7, sl
 597 035a 3E60     	    str     r6, [r7]                        @ AES SubBytes
 598 035c 5E46     	    mov     r6, fp
 599 035e 4036     	    adds    r6, #64
 600 0360 3768     	    ldr     r7, [r6]                        @ load CAA
 601 0362 6F40     	    eors    r7, r5                          @ XOR rcon[6]
 602 0364 6546     	    mov     r5, ip                          @ restore key_sch[40]
 603 0366 7646     	    mov     r6, lr                          @ restore key_sch[41]
 604 0368 7840     	    eors    r0, r7                          @ XOR key_sch[36] = key_sch[42]
 605 036a 4140     	    eors    r1, r0                          @ XOR key_sch[37] = key_sch[43]
 606 036c 4B40     	    eors    r3, r1                          @ XOR key_sch[38] = key_sch[44]
 607 036e 5C40     	    eors    r4, r3                          @ XOR key_sch[39] = key_sch[45]
 608 0370 6540     	    eors    r5, r4                          @ XOR key_sch[40] = key_sch[46]
 609 0372 6E40     	    eors    r6, r5                          @ XOR key_sch[41] = key_sch[47]
 610 0374 7BC2     	    stmia   r2!, {r0-r1, r3-r6}             @ store key_sch[42-47], *key_sch++
 611              	
 612              	# calculate key_sch[48-51]
 613 0376 4746     	    mov     r7, r8
 614 0378 FD69     	    ldr     r5, [r7, #7<<2]                 @ load rcon[7]
 615 037a 1827     	    movs    r7, #24
 616 037c FE41     	    rors    r6, r7                          @ ROTL(key_sch[47],8)
 617 037e 5F46     	    mov     r7, fp
 618 0380 3E60     	    str     r6, [r7]                        @ ROTL(key_sch[47],8) -> acc
 619 0382 4E46     	    mov     r6, r9
 620 0384 5746     	    mov     r7, sl
 621 0386 3E60     	    str     r6, [r7]                        @ AES SubBytes
 622 0388 5E46     	    mov     r6, fp
ARM GAS  src/mmcau_aes_functions.s 			page 13


 623 038a 4036     	    adds    r6, #64
 624 038c 3768     	    ldr     r7, [r6]                        @ load CAA
 625 038e 6F40     	    eors    r7, r5                          @ XOR rcon[7]
 626 0390 7840     	    eors    r0, r7                          @ XOR key_sch[42] = key_sch[48]
 627 0392 4140     	    eors    r1, r0                          @ XOR key_sch[43] = key_sch[49]
 628 0394 4B40     	    eors    r3, r1                          @ XOR key_sch[44] = key_sch[50]
 629 0396 5C40     	    eors    r4, r3                          @ XOR key_sch[45] = key_sch[51]
 630 0398 1BC2     	    stmia   r2!, {r0-r1, r3-r4}             @ store key_sch[48-51], *key_sch++
 631              	
 632 039a BFE0     	    b       set_key_end                     @ end routine
 633              	
 634              	
 635              	set_key_128:
 636              	
 637              	#    REGISTER  |  ALLOCATION (throughout set_key_128)
 638              	#   -----------+------------------------------------------------------------
 639              	#          r0  |  rcon[i]
 640              	#          r1  |  scratch
 641              	#          r2  |  *key_sch
 642              	#          r3  |  key_sch[0+4i]
 643              	#          r4  |  key_sch[1+4i]
 644              	#          r5  |  key_sch[2+4i]
 645              	#          r6  |  key_sch[3+4i]
 646              	#          r7  |  scratch
 647              	#          r8  |  *rcon
 648              	#          r9  |  mmcau_1_cmd(AESS+CAA)
 649              	#    (sl) r10  |  *mmcau_direct_cmd()
 650              	#    (fp) r11  |  mmcau_indirect_cmd(LDR+CAA)
 651              	#    (ip) r12  |  mmcau_indirect_cmd(STR+CAA)
 652              	#    (sp) r13  |  stack pointer
 653              	#    (lr) r14  |  link register
 654              	
 655              	# load some of the regs in preperation of the AES-128 set key calculations
 656 039c F8CB     	    ldmia   r3, {r3-r7}    
 657 039e 9846     	    mov     r8, r3                          @ r8 = *rcon
 658 03a0 A146     	    mov     r9, r4                          @ r9 = mmcau_1_cmd(AESS+CAA)
 659 03a2 AA46     	    mov     sl, r5                          @ sl = *mmcau_direct_cmd()
 660 03a4 B346     	    mov     fp, r6                          @ fp = mmcau_indirect_cmd(LDR+CAA)
 661 03a6 BC46     	    mov     ip, r7                          @ ip = mmcau_indirect_cmd(STR+CAA)
 662              	
 663              	# calculate key_sch[0-3]
 664 03a8 78C8     	    ldmia   r0!, {r3-r6}                    @ load key[0-3]
 665 03aa 1BBA     	    rev     r3, r3                          @ byterev(key[0]) = key_sch[0]
 666 03ac 24BA     	    rev     r4, r4                          @ byterev(key[1]) = key_sch[1]
 667 03ae 2DBA     	    rev     r5, r5                          @ byterev(key[2]) = key_sch[2]
 668 03b0 36BA     	    rev     r6, r6                          @ byterev(key[3]) = key_sch[3]
 669 03b2 78C2     	    stmia   r2!, {r3-r6}                    @ store key_sch[0-3], *key_sch++
 670              	
 671              	# calculate key_sch[4-7]
 672 03b4 4746     	    mov     r7, r8
 673 03b6 3868     	    ldr     r0, [r7, #0<<2]                 @ load rcon[0]
 674 03b8 1827     	    movs    r7, #24
 675 03ba 3146     	    mov     r1, r6                          @ copy key_sch[3]
 676 03bc F941     	    rors    r1, r7                          @ ROTL(key_sch[3],8)
 677 03be 5F46     	    mov     r7, fp
 678 03c0 3960     	    str     r1, [r7]                        @ ROTL(key_sch[3],8) -> acc
 679 03c2 4946     	    mov     r1, r9
ARM GAS  src/mmcau_aes_functions.s 			page 14


 680 03c4 5746     	    mov     r7, sl
 681 03c6 3960     	    str     r1, [r7]                        @ AES SubBytes
 682 03c8 6146     	    mov     r1, ip
 683 03ca 0F68     	    ldr     r7, [r1]                        @ load CAA
 684 03cc 4740     	    eors    r7, r0                          @ XOR rcon[0]
 685 03ce 7B40     	    eors    r3, r7                          @ XOR key_sch[0]  = key_sch[4]
 686 03d0 5C40     	    eors    r4, r3                          @ XOR key_sch[1]  = key_sch[5]
 687 03d2 6540     	    eors    r5, r4                          @ XOR key_sch[2]  = key_sch[6]
 688 03d4 6E40     	    eors    r6, r5                          @ XOR key_sch[3]  = key_sch[7]
 689 03d6 78C2     	    stmia   r2!, {r3-r6}                    @ store key_sch[4-7], *key_sch++
 690              	
 691              	# calculate key_sch[8-11]
 692 03d8 4746     	    mov     r7, r8
 693 03da 7868     	    ldr     r0, [r7, #1<<2]                 @ load rcon[1]
 694 03dc 1827     	    movs    r7, #24
 695 03de 3146     	    mov     r1, r6                          @ copy key_sch[7]
 696 03e0 F941     	    rors    r1, r7                          @ ROTL(key_sch[7],8)
 697 03e2 5F46     	    mov     r7, fp
 698 03e4 3960     	    str     r1, [r7]                        @ ROTL(key_sch[7],8) -> acc
 699 03e6 4946     	    mov     r1, r9
 700 03e8 5746     	    mov     r7, sl
 701 03ea 3960     	    str     r1, [r7]                        @ AES SubBytes
 702 03ec 6146     	    mov     r1, ip
 703 03ee 0F68     	    ldr     r7, [r1]                        @ load CAA
 704 03f0 4740     	    eors    r7, r0                          @ XOR rcon[1]
 705 03f2 7B40     	    eors    r3, r7                          @ XOR key_sch[4]  = key_sch[8]
 706 03f4 5C40     	    eors    r4, r3                          @ XOR key_sch[5]  = key_sch[9]
 707 03f6 6540     	    eors    r5, r4                          @ XOR key_sch[6]  = key_sch[10]
 708 03f8 6E40     	    eors    r6, r5                          @ XOR key_sch[7]  = key_sch[11]
 709 03fa 78C2     	    stmia   r2!, {r3-r6}                    @ store key_sch[8-11], *key_sch++
 710              	
 711              	# calculate key_sch[12-15]
 712 03fc 4746     	    mov     r7, r8
 713 03fe B868     	    ldr     r0, [r7, #2<<2]                 @ load rcon[2]
 714 0400 1827     	    movs    r7, #24
 715 0402 3146     	    mov     r1, r6                          @ copy key_sch[11]
 716 0404 F941     	    rors    r1, r7                          @ ROTL(key_sch[11],8)
 717 0406 5F46     	    mov     r7, fp
 718 0408 3960     	    str     r1, [r7]                        @ ROTL(key_sch[11],8) -> acc
 719 040a 4946     	    mov     r1, r9
 720 040c 5746     	    mov     r7, sl
 721 040e 3960     	    str     r1, [r7]                        @ AES SubBytes
 722 0410 6146     	    mov     r1, ip
 723 0412 0F68     	    ldr     r7, [r1]                        @ load CAA
 724 0414 4740     	    eors    r7, r0                          @ XOR rcon[2]
 725 0416 7B40     	    eors    r3, r7                          @ XOR key_sch[8]  = key_sch[12]
 726 0418 5C40     	    eors    r4, r3                          @ XOR key_sch[9]  = key_sch[13]
 727 041a 6540     	    eors    r5, r4                          @ XOR key_sch[10] = key_sch[14]
 728 041c 6E40     	    eors    r6, r5                          @ XOR key_sch[11] = key_sch[15]
 729 041e 78C2     	    stmia   r2!, {r3-r6}                    @ store key_sch[12-15], *key_sch++
 730              	
 731              	# calculate key_sch[16-19]
 732 0420 4746     	    mov     r7, r8
 733 0422 F868     	    ldr     r0, [r7, #3<<2]                 @ load rcon[3]
 734 0424 1827     	    movs    r7, #24
 735 0426 3146     	    mov     r1, r6                          @ copy key_sch[15]
 736 0428 F941     	    rors    r1, r7                          @ ROTL(key_sch[15],8)
ARM GAS  src/mmcau_aes_functions.s 			page 15


 737 042a 5F46     	    mov     r7, fp
 738 042c 3960     	    str     r1, [r7]                        @ ROTL(key_sch[15],8) -> acc
 739 042e 4946     	    mov     r1, r9
 740 0430 5746     	    mov     r7, sl
 741 0432 3960     	    str     r1, [r7]                        @ AES SubBytes
 742 0434 6146     	    mov     r1, ip
 743 0436 0F68     	    ldr     r7, [r1]                        @ load CAA
 744 0438 4740     	    eors    r7, r0                          @ XOR rcon[3]
 745 043a 7B40     	    eors    r3, r7                          @ XOR key_sch[12] = key_sch[16]
 746 043c 5C40     	    eors    r4, r3                          @ XOR key_sch[13] = key_sch[17]
 747 043e 6540     	    eors    r5, r4                          @ XOR key_sch[14] = key_sch[18]
 748 0440 6E40     	    eors    r6, r5                          @ XOR key_sch[15] = key_sch[19]
 749 0442 78C2     	    stmia   r2!, {r3-r6}                    @ store key_sch[16-19], *key_sch++
 750              	
 751              	# calculate key_sch[20-23]
 752 0444 4746     	    mov     r7, r8
 753 0446 3869     	    ldr     r0, [r7, #4<<2]                 @ load rcon[4]
 754 0448 1827     	    movs    r7, #24
 755 044a 3146     	    mov     r1, r6                          @ copy key_sch[19]
 756 044c F941     	    rors    r1, r7                          @ ROTL(key_sch[19],8)
 757 044e 5F46     	    mov     r7, fp
 758 0450 3960     	    str     r1, [r7]                        @ ROTL(key_sch[19],8) -> acc
 759 0452 4946     	    mov     r1, r9
 760 0454 5746     	    mov     r7, sl
 761 0456 3960     	    str     r1, [r7]                        @ AES SubBytes
 762 0458 6146     	    mov     r1, ip
 763 045a 0F68     	    ldr     r7, [r1]                        @ load CAA
 764 045c 4740     	    eors    r7, r0                          @ XOR rcon[4]
 765 045e 7B40     	    eors    r3, r7                          @ XOR key_sch[16] = key_sch[20]
 766 0460 5C40     	    eors    r4, r3                          @ XOR key_sch[17] = key_sch[21]
 767 0462 6540     	    eors    r5, r4                          @ XOR key_sch[18] = key_sch[22]
 768 0464 6E40     	    eors    r6, r5                          @ XOR key_sch[19] = key_sch[23]
 769 0466 78C2     	    stmia   r2!, {r3-r6}                    @ store key_sch[20-23], *key_sch++
 770              	
 771              	# calculate key_sch[24-27]
 772 0468 4746     	    mov     r7, r8
 773 046a 7869     	    ldr     r0, [r7, #5<<2]                 @ load rcon[5]
 774 046c 1827     	    movs    r7, #24
 775 046e 3146     	    mov     r1, r6                          @ copy key_sch[23]
 776 0470 F941     	    rors    r1, r7                          @ ROTL(key_sch[23],8)
 777 0472 5F46     	    mov     r7, fp
 778 0474 3960     	    str     r1, [r7]                        @ ROTL(key_sch[23],8) -> acc
 779 0476 4946     	    mov     r1, r9
 780 0478 5746     	    mov     r7, sl
 781 047a 3960     	    str     r1, [r7]                        @ AES SubBytes
 782 047c 6146     	    mov     r1, ip
 783 047e 0F68     	    ldr     r7, [r1]                        @ load CAA
 784 0480 4740     	    eors    r7, r0                          @ XOR rcon[5]
 785 0482 7B40     	    eors    r3, r7                          @ XOR key_sch[20] = key_sch[24]
 786 0484 5C40     	    eors    r4, r3                          @ XOR key_sch[21] = key_sch[25]
 787 0486 6540     	    eors    r5, r4                          @ XOR key_sch[22] = key_sch[26]
 788 0488 6E40     	    eors    r6, r5                          @ XOR key_sch[23] = key_sch[27]
 789 048a 78C2     	    stmia   r2!, {r3-r6}                    @ store key_sch[24-27], *key_sch++
 790              	
 791              	# calculate key_sch[28-31]
 792 048c 4746     	    mov     r7, r8
 793 048e B869     	    ldr     r0, [r7, #6<<2]                 @ load rcon[6]
ARM GAS  src/mmcau_aes_functions.s 			page 16


 794 0490 1827     	    movs    r7, #24
 795 0492 3146     	    mov     r1, r6                          @ copy key_sch[27]
 796 0494 F941     	    rors    r1, r7                          @ ROTL(key_sch[27],8)
 797 0496 5F46     	    mov     r7, fp
 798 0498 3960     	    str     r1, [r7]                        @ ROTL(key_sch[27],8) -> acc
 799 049a 4946     	    mov     r1, r9
 800 049c 5746     	    mov     r7, sl
 801 049e 3960     	    str     r1, [r7]                        @ AES SubBytes
 802 04a0 6146     	    mov     r1, ip
 803 04a2 0F68     	    ldr     r7, [r1]                        @ load CAA
 804 04a4 4740     	    eors    r7, r0                          @ XOR rcon[6]
 805 04a6 7B40     	    eors    r3, r7                          @ XOR key_sch[24] = key_sch[28]
 806 04a8 5C40     	    eors    r4, r3                          @ XOR key_sch[25] = key_sch[29]
 807 04aa 6540     	    eors    r5, r4                          @ XOR key_sch[26] = key_sch[30]
 808 04ac 6E40     	    eors    r6, r5                          @ XOR key_sch[27] = key_sch[31]
 809 04ae 78C2     	    stmia   r2!, {r3-r6}                    @ store key_sch[28-31], *key_sch++
 810              	
 811              	# calculate key_sch[32-35]
 812 04b0 4746     	    mov     r7, r8
 813 04b2 F869     	    ldr     r0, [r7, #7<<2]                 @ load rcon[7]
 814 04b4 1827     	    movs    r7, #24
 815 04b6 3146     	    mov     r1, r6                          @ copy key_sch[31]
 816 04b8 F941     	    rors    r1, r7                          @ ROTL(key_sch[31],8)
 817 04ba 5F46     	    mov     r7, fp
 818 04bc 3960     	    str     r1, [r7]                        @ ROTL(key_sch[31],8) -> acc
 819 04be 4946     	    mov     r1, r9
 820 04c0 5746     	    mov     r7, sl
 821 04c2 3960     	    str     r1, [r7]                        @ AES SubBytes
 822 04c4 6146     	    mov     r1, ip
 823 04c6 0F68     	    ldr     r7, [r1]                        @ load CAA
 824 04c8 4740     	    eors    r7, r0                          @ XOR rcon[7]
 825 04ca 7B40     	    eors    r3, r7                          @ XOR key_sch[28] = key_sch[32]
 826 04cc 5C40     	    eors    r4, r3                          @ XOR key_sch[29] = key_sch[33]
 827 04ce 6540     	    eors    r5, r4                          @ XOR key_sch[30] = key_sch[34]
 828 04d0 6E40     	    eors    r6, r5                          @ XOR key_sch[31] = key_sch[35]
 829 04d2 78C2     	    stmia   r2!, {r3-r6}                    @ store key_sch[32-35], *key_sch++
 830              	
 831              	# calculate key_sch[36-39]
 832 04d4 4746     	    mov     r7, r8
 833 04d6 386A     	    ldr     r0, [r7, #8<<2]                 @ load rcon[8]
 834 04d8 1827     	    movs    r7, #24
 835 04da 3146     	    mov     r1, r6                          @ copy key_sch[35]
 836 04dc F941     	    rors    r1, r7                          @ ROTL(key_sch[35],8)
 837 04de 5F46     	    mov     r7, fp
 838 04e0 3960     	    str     r1, [r7]                        @ ROTL(key_sch[35],8) -> acc
 839 04e2 4946     	    mov     r1, r9
 840 04e4 5746     	    mov     r7, sl
 841 04e6 3960     	    str     r1, [r7]                        @ AES SubBytes
 842 04e8 6146     	    mov     r1, ip
 843 04ea 0F68     	    ldr     r7, [r1]                        @ load CAA
 844 04ec 4740     	    eors    r7, r0                          @ XOR rcon[8]
 845 04ee 7B40     	    eors    r3, r7                          @ XOR key_sch[32] = key_sch[36]
 846 04f0 5C40     	    eors    r4, r3                          @ XOR key_sch[33] = key_sch[37]
 847 04f2 6540     	    eors    r5, r4                          @ XOR key_sch[34] = key_sch[38]
 848 04f4 6E40     	    eors    r6, r5                          @ XOR key_sch[35] = key_sch[39]
 849 04f6 78C2     	    stmia   r2!, {r3-r6}                    @ store key_sch[36-39], *key_sch++
 850              	
ARM GAS  src/mmcau_aes_functions.s 			page 17


 851              	# calculate key_sch[40-43]
 852 04f8 4746     	    mov     r7, r8
 853 04fa 786A     	    ldr     r0, [r7, #9<<2]                 @ load rcon[9]
 854 04fc 1827     	    movs    r7, #24
 855 04fe 3146     	    mov     r1, r6                          @ copy key_sch[39]
 856 0500 F941     	    rors    r1, r7                          @ ROTL(key_sch[39],8)
 857 0502 5F46     	    mov     r7, fp
 858 0504 3960     	    str     r1, [r7]                        @ ROTL(key_sch[39],8) -> acc
 859 0506 4946     	    mov     r1, r9
 860 0508 5746     	    mov     r7, sl
 861 050a 3960     	    str     r1, [r7]                        @ AES SubBytes
 862 050c 6146     	    mov     r1, ip
 863 050e 0F68     	    ldr     r7, [r1]                        @ load CAA
 864 0510 4740     	    eors    r7, r0                          @ XOR rcon[9]
 865 0512 7B40     	    eors    r3, r7                          @ XOR key_sch[36] = key_sch[40]
 866 0514 5C40     	    eors    r4, r3                          @ XOR key_sch[37] = key_sch[41]
 867 0516 6540     	    eors    r5, r4                          @ XOR key_sch[38] = key_sch[42]
 868 0518 6E40     	    eors    r6, r5                          @ XOR key_sch[39] = key_sch[43]
 869 051a 78C2     	    stmia   r2!, {r3-r6}                    @ store key_sch[40-43], *key_sch++
 870              	
 871              	
 872              	set_key_end:
 873              	
 874 051c F8BC     	    pop     {r3-r7}                         @ restore high regs
 875 051e 9846     	    mov     r8, r3
 876 0520 A146     	    mov     r9, r4
 877 0522 AA46     	    mov     sl, r5
 878 0524 B346     	    mov     fp, r6
 879 0526 BC46     	    mov     ip, r7
 880 0528 F0BD     	    pop     {r4-r7, pc}                     @ restore low regs, exit routine
 881              	
 882              	
 883              	# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
 884              	#
 885              	#   MMCAU_AES_ENCRYPT
 886              	#   Encrypts a single 16-byte block
 887              	#
 888              	#   ARGUMENTS
 889              	#   *in             pointer to 16-byte block of input plaintext
 890              	#   *key_sch        pointer to key schedule (44, 52, 60 longwords)
 891              	#   nr              number of AES rounds (10, 12, 14 = f(key_schedule))
 892              	#   *out            pointer to 16-byte block of output ciphertext
 893              	#
 894              	#
 895              	#   CALLING CONVENTION
 896              	#   void mmcau_aes_encrypt     (const unsigned char     *in,
 897              	#                               const unsigned char     *key_sch,
 898              	#                               const int               nr,
 899              	#                               unsigned char           *out)
 900              	#
 901              	#  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #
 902              	#
 903              	#    REGISTER  |  ALLOCATION (at the start of mmcau_aes_encrypt)
 904              	#   -----------+------------------------------------------------------------
 905              	#          r0  |  *in           (arg0)
 906              	#          r1  |  *key_sch      (arg1)
 907              	#          r2  |  nr            (arg2)
ARM GAS  src/mmcau_aes_functions.s 			page 18


 908              	#          r3  |  *out          (arg3)
 909              	#              |
 910              	#        > r3  |  irrelevant
 911              	#
 912              	#
 913              	#    REGISTER  |  ALLOCATION (throughout mmcau_aes_encrypt)
 914              	#   -----------+------------------------------------------------------------
 915              	#          r0  |  mmcau_3_cmds(AESS+CA0,AESS+CA1,AESS+CA2)
 916              	#          r1  |  *key_sch
 917              	#          r2  |  *mmcau_direct_cmd()
 918              	#          r3  |  scratch
 919              	#          r4  |  key_sch[0+4i]
 920              	#          r5  |  key_sch[1+4i]
 921              	#          r6  |  key_sch[2+4i]
 922              	#          r7  |  key_sch[3+4i]
 923              	#          r8  |  mmcau_indirect_cmd(AESC+CA0)
 924              	#          r9  |  not used
 925              	#    (sl) r10  |  not used
 926              	#    (fp) r11  |  not used
 927              	#    (ip) r12  |  not used
 928              	#    (sp) r13  |  stack pointer
 929              	#    (lr) r14  |  mmcau_2_cmds(AESS+CA3,AESR)
 930              	#
 931              	# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
 932              	
 933              	    .global _mmcau_aes_encrypt
 934              	    .global mmcau_aes_encrypt
 935              	    .type   mmcau_aes_encrypt, %function
 936 052a C046C046 	    .align  4
 936      C046
 937              	
 938              	_mmcau_aes_encrypt:
 939              	mmcau_aes_encrypt:
 940              	
 941              	# store nr and *out, we need them later in the routine
 942              	# store regs r4-r8, we need to restore them at the end of the routine
 943 0530 FCB5     	    push    {r2-r7, lr}                     @ store nr, *out, low regs, and lr
 944 0532 4446     	    mov     r4, r8
 945 0534 10B4     	    push    {r4}                            @ store high reg
 946              	
 947              	# XOR the first 4 keys into the 4 words of plaintext
 948 0536 F0C9     	    ldmia   r1!, {r4-r7}                    @ load first 4 keys, *key_sch++
 949 0538 8E46     	    mov     lr, r1                          @ temporarily store *key_sch[4]
 950 053a 0FC8     	    ldmia   r0, {r0-r3}                     @ load plaintext
 951 053c 00BA     	    rev     r0, r0
 952 053e 09BA     	    rev     r1, r1
 953 0540 12BA     	    rev     r2, r2
 954 0542 1BBA     	    rev     r3, r3
 955 0544 4440     	    eors    r4, r0
 956 0546 4D40     	    eors    r5, r1
 957 0548 5640     	    eors    r6, r2
 958 054a 5F40     	    eors    r7, r3
 959 054c 7F49     	    ldr     r1, =MMCAU_PPB_INDIRECT+(LDR+CA0)<<2
 960 054e F0C1     	    stmia   r1!, {r4-r7}                    @ store XOR results in CA[0-3]
 961              	
 962              	# load some of the regs in preperation of the encryption
 963 0550 7F48     	    ldr     r0, =encrypt_reg_data
ARM GAS  src/mmcau_aes_functions.s 			page 19


 964 0552 0FC8     	    ldmia   r0, {r0-r3}
 965 0554 8846     	    mov     r8, r1                          @ r8 = mmcau_indirect_cmd(AESC+CA0)
 966 0556 7146     	    mov     r1, lr                          @ restore r1 = *key_sch[4]
 967 0558 9E46     	    mov     lr, r3                          @ lr = mmcau_2_cmds(AESS+CA3,AESR)
 968              	
 969              	# send a series of cau commands to perform the encryption
 970 055a 1060     	    str     r0, [r2]                        @ SubBytes
 971 055c 1360     	    str     r3, [r2]                        @ SubBytes, ShiftRows
 972 055e F0C9     	    ldmia   r1!, {r4-r7}                    @ load next 4 keys, *key_sch++
 973 0560 4346     	    mov     r3, r8
 974 0562 F0C3     	    stmia   r3!, {r4-r7}                    @ MixColumns
 975              	
 976 0564 1060     	    str     r0, [r2]                        @ SubBytes
 977 0566 7346     	    mov     r3, lr
 978 0568 1360     	    str     r3, [r2]                        @ SubBytes, ShiftRows
 979 056a F0C9     	    ldmia   r1!, {r4-r7}                    @ load next 4 keys, *key_sch++
 980 056c 4346     	    mov     r3, r8
 981 056e F0C3     	    stmia   r3!, {r4-r7}                    @ MixColumns
 982              	
 983 0570 1060     	    str     r0, [r2]                        @ SubBytes
 984 0572 7346     	    mov     r3, lr
 985 0574 1360     	    str     r3, [r2]                        @ SubBytes, ShiftRows
 986 0576 F0C9     	    ldmia   r1!, {r4-r7}                    @ load next 4 keys, *key_sch++
 987 0578 4346     	    mov     r3, r8
 988 057a F0C3     	    stmia   r3!, {r4-r7}                    @ MixColumns
 989              	
 990 057c 1060     	    str     r0, [r2]                        @ SubBytes
 991 057e 7346     	    mov     r3, lr
 992 0580 1360     	    str     r3, [r2]                        @ SubBytes, ShiftRows
 993 0582 F0C9     	    ldmia   r1!, {r4-r7}                    @ load next 4 keys, *key_sch++
 994 0584 4346     	    mov     r3, r8
 995 0586 F0C3     	    stmia   r3!, {r4-r7}                    @ MixColumns
 996              	
 997 0588 1060     	    str     r0, [r2]                        @ SubBytes
 998 058a 7346     	    mov     r3, lr
 999 058c 1360     	    str     r3, [r2]                        @ SubBytes, ShiftRows
 1000 058e F0C9     	    ldmia   r1!, {r4-r7}                    @ load next 4 keys, *key_sch++
 1001 0590 4346     	    mov     r3, r8
 1002 0592 F0C3     	    stmia   r3!, {r4-r7}                    @ MixColumns
 1003              	
 1004 0594 1060     	    str     r0, [r2]                        @ SubBytes
 1005 0596 7346     	    mov     r3, lr
 1006 0598 1360     	    str     r3, [r2]                        @ SubBytes, ShiftRows
 1007 059a F0C9     	    ldmia   r1!, {r4-r7}                    @ load next 4 keys, *key_sch++
 1008 059c 4346     	    mov     r3, r8
 1009 059e F0C3     	    stmia   r3!, {r4-r7}                    @ MixColumns
 1010              	
 1011 05a0 1060     	    str     r0, [r2]                        @ SubBytes
 1012 05a2 7346     	    mov     r3, lr
 1013 05a4 1360     	    str     r3, [r2]                        @ SubBytes, ShiftRows
 1014 05a6 F0C9     	    ldmia   r1!, {r4-r7}                    @ load next 4 keys, *key_sch++
 1015 05a8 4346     	    mov     r3, r8
 1016 05aa F0C3     	    stmia   r3!, {r4-r7}                    @ MixColumns
 1017              	
 1018 05ac 1060     	    str     r0, [r2]                        @ SubBytes
 1019 05ae 7346     	    mov     r3, lr
 1020 05b0 1360     	    str     r3, [r2]                        @ SubBytes, ShiftRows
ARM GAS  src/mmcau_aes_functions.s 			page 20


 1021 05b2 F0C9     	    ldmia   r1!, {r4-r7}                    @ load next 4 keys, *key_sch++
 1022 05b4 4346     	    mov     r3, r8
 1023 05b6 F0C3     	    stmia   r3!, {r4-r7}                    @ MixColumns
 1024              	
 1025 05b8 1060     	    str     r0, [r2]                        @ SubBytes
 1026 05ba 7346     	    mov     r3, lr
 1027 05bc 1360     	    str     r3, [r2]                        @ SubBytes, ShiftRows
 1028 05be F0C9     	    ldmia   r1!, {r4-r7}                    @ load next 4 keys, *key_sch++
 1029 05c0 4346     	    mov     r3, r8
 1030 05c2 F0C3     	    stmia   r3!, {r4-r7}                    @ MixColumns
 1031              	
 1032              	
 1033 05c4 019B     	    ldr     r3, [sp, #1<<2]                 @ load nr
 1034 05c6 0A2B     	    cmp     r3, #10                         @ check nr
 1035 05c8 1AD0     	    beq     encrypt_end                     @ if aes128, end routine
 1036              	                                            @ else, continue on
 1037              	
 1038 05ca 1060     	    str     r0, [r2]                        @ SubBytes
 1039 05cc 7346     	    mov     r3, lr
 1040 05ce 1360     	    str     r3, [r2]                        @ SubBytes, ShiftRows
 1041 05d0 F0C9     	    ldmia   r1!, {r4-r7}                    @ load next 4 keys, *key_sch++
 1042 05d2 4346     	    mov     r3, r8
 1043 05d4 F0C3     	    stmia   r3!, {r4-r7}                    @ MixColumns
 1044              	
 1045 05d6 1060     	    str     r0, [r2]                        @ SubBytes
 1046 05d8 7346     	    mov     r3, lr
 1047 05da 1360     	    str     r3, [r2]                        @ SubBytes, ShiftRows
 1048 05dc F0C9     	    ldmia   r1!, {r4-r7}                    @ load next 4 keys, *key_sch++
 1049 05de 4346     	    mov     r3, r8
 1050 05e0 F0C3     	    stmia   r3!, {r4-r7}                    @ MixColumns
 1051              	
 1052              	
 1053 05e2 019B     	    ldr     r3, [sp, #1<<2]                 @ load nr
 1054 05e4 0C2B     	    cmp     r3, #12                         @ check nr
 1055 05e6 0BD0     	    beq     encrypt_end                     @ if aes192, end routine
 1056              	                                            @ else, continue on
 1057              	
 1058 05e8 1060     	    str     r0, [r2]                        @ SubBytes
 1059 05ea 7346     	    mov     r3, lr
 1060 05ec 1360     	    str     r3, [r2]                        @ SubBytes, ShiftRows
 1061 05ee F0C9     	    ldmia   r1!, {r4-r7}                    @ load next 4 keys, *key_sch++
 1062 05f0 4346     	    mov     r3, r8
 1063 05f2 F0C3     	    stmia   r3!, {r4-r7}                    @ MixColumns
 1064              	
 1065 05f4 1060     	    str     r0, [r2]                        @ SubBytes
 1066 05f6 7346     	    mov     r3, lr
 1067 05f8 1360     	    str     r3, [r2]                        @ SubBytes, ShiftRows
 1068 05fa F0C9     	    ldmia   r1!, {r4-r7}                    @ load next 4 keys, *key_sch++
 1069 05fc 4346     	    mov     r3, r8
 1070 05fe F0C3     	    stmia   r3!, {r4-r7}                    @ MixColumns
 1071              	
 1072              	
 1073              	encrypt_end:
 1074              	
 1075 0600 1060     	    str     r0, [r2]                        @ SubBytes
 1076 0602 7346     	    mov     r3, lr
 1077 0604 1360     	    str     r3, [r2]                        @ SubBytes, ShiftRows
ARM GAS  src/mmcau_aes_functions.s 			page 21


 1078              	
 1079              	# XOR the last 4 keys with the 4 words of ciphertext
 1080 0606 5348     	    ldr     r0, =MMCAU_PPB_INDIRECT+(STR+CA0)<<2
 1081 0608 F0C9     	    ldmia   r1!, {r4-r7}                    @ load last 4 keys
 1082 060a 0FC8     	    ldmia   r0, {r0-r3}                     @ load ciphertext
 1083 060c 4440     	    eors    r4, r0
 1084 060e 4D40     	    eors    r5, r1
 1085 0610 5640     	    eors    r6, r2
 1086 0612 5F40     	    eors    r7, r3
 1087 0614 24BA     	    rev     r4, r4
 1088 0616 2DBA     	    rev     r5, r5
 1089 0618 36BA     	    rev     r6, r6
 1090 061a 3FBA     	    rev     r7, r7
 1091 061c 0299     	    ldr     r1, [sp, #2<<2]                 @ get *out
 1092 061e F0C1     	    stmia   r1!, {r4-r7}                    @ store XOR results in out[0-3]
 1093              	
 1094 0620 10BC     	    pop     {r4}                            @ restore high reg
 1095 0622 A046     	    mov     r8, r4
 1096 0624 02B0     	    add     sp, #2<<2                       @ set sp = *{r4-r7}
 1097 0626 F0BD     	    pop     {r4-r7, pc}                     @ restore low regs, exit routine
 1098              	
 1099              	
 1100              	# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
 1101              	#
 1102              	#   MMCAU_AES_DECRYPT
 1103              	#   Decrypts a single 16-byte block
 1104              	#
 1105              	#   ARGUMENTS
 1106              	#   *in             pointer to 16-byte block of input chiphertext
 1107              	#   *key_sch        pointer to key schedule (44, 52, 60 longwords)
 1108              	#   nr              number of AES rounds (10, 12, 14 = f(key_schedule))
 1109              	#   *out            pointer to 16-byte block of output plaintext
 1110              	#
 1111              	#
 1112              	#   CALLING CONVENTION
 1113              	#   void mmcau_aes_decrypt     (const unsigned char     *in,
 1114              	#                               const unsigned char     *key_sch,
 1115              	#                               const int               nr,
 1116              	#                               unsigned char           *out)
 1117              	#
 1118              	#  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #
 1119              	#
 1120              	#    REGISTER  |  ALLOCATION (at the start of mmcau_aes_decrypt)
 1121              	#   -----------+------------------------------------------------------------
 1122              	#          r0  |  *in           (arg0)
 1123              	#          r1  |  *key_sch      (arg1)
 1124              	#          r2  |  nr            (arg2)
 1125              	#          r3  |  *out          (arg3)
 1126              	#              |
 1127              	#        > r3  |  irrelevant
 1128              	#
 1129              	#
 1130              	#    REGISTER  |  ALLOCATION (throughout mmcau_aes_decrypt)
 1131              	#   -----------+------------------------------------------------------------
 1132              	#          r0  |  mmcau_3_cmds(AESIR,AESIS+CA3,AESIS+CA)
 1133              	#          r1  |  *key_sch
 1134              	#          r2  |  *mmcau_direct_cmd()
ARM GAS  src/mmcau_aes_functions.s 			page 22


 1135              	#          r3  |  scratch
 1136              	#          r4  |  *key_sch[0-4i]
 1137              	#          r5  |  *key_sch[1-4i]
 1138              	#          r6  |  *key_sch[2-4i]
 1139              	#          r7  |  *key_sch[3-4i]
 1140              	#          r8  |  mmcau_indirect_cmd(AESIC+CA0)
 1141              	#          r9  |  not used
 1142              	#    (sl) r10  |  not used
 1143              	#    (fp) r11  |  not used
 1144              	#    (ip) r12  |  not used
 1145              	#    (sp) r13  |  stack pointer
 1146              	#    (lr) r14  |  mmcau_2_cmds(AESIS+CA1,AESIS+CA0)
 1147              	#
 1148              	# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
 1149              	
 1150              	    .global _mmcau_aes_decrypt
 1151              	    .global mmcau_aes_decrypt
 1152              	    .type   mmcau_aes_decrypt, %function
 1153 0628 C046C046 	    .align  4
 1153      C046C046 
 1154              	
 1155              	_mmcau_aes_decrypt:
 1156              	mmcau_aes_decrypt:
 1157              	
 1158              	# store nr and *out, we need them later in the routine
 1159              	# store regs r4-r8, we need to restore them at the end of the routine
 1160 0630 FCB5     	    push    {r2-r7, lr}                     @ store nr, *out, low regs, and lr
 1161 0632 4446     	    mov     r4, r8
 1162 0634 10B4     	    push    {r4}                            @ store high reg
 1163              	
 1164              	# *key_sch is adjusted to define the end of the elements, such that
 1165              	# the adjustment factor = f(nr) is defined by the expression:
 1166              	#   end of key_sch = 4 * (nr + 1), where nr = {10, 12, 14}
 1167 0636 1C23     	    movs    r3, #28
 1168 0638 DA41     	    rors    r2, r3
 1169 063a 1144     	    add     r1, r2                          @ calculate end of key_sch
 1170 063c 8E46     	    mov     lr, r1                          @ temporarily store end of key_sch
 1171              	
 1172              	# XOR the last 4 keys into the 4 words of ciphertext
 1173 063e F0C9     	    ldmia   r1!, {r4-r7}                    @ load last 4 keys
 1174 0640 0FC8     	    ldmia   r0, {r0-r3}                     @ load ciphertext
 1175 0642 00BA     	    rev     r0, r0
 1176 0644 09BA     	    rev     r1, r1
 1177 0646 12BA     	    rev     r2, r2
 1178 0648 1BBA     	    rev     r3, r3
 1179 064a 4440     	    eors    r4, r0
 1180 064c 4D40     	    eors    r5, r1
 1181 064e 5640     	    eors    r6, r2
 1182 0650 5F40     	    eors    r7, r3
 1183 0652 3E49     	    ldr     r1, =MMCAU_PPB_INDIRECT+(LDR+CA0)<<2
 1184 0654 F0C1     	    stmia   r1!, {r4-r7}                    @ store XOR results in CA[0-3]
 1185              	
 1186              	# load some of the regs in preperation of the decryption
 1187 0656 4048     	    ldr     r0, =decrypt_reg_data
 1188 0658 0FC8     	    ldmia   r0, {r0-r3}
 1189 065a 8846     	    mov     r8, r1                          @ r8 = mmcau_indirect_cmd(AESC+CA0)
 1190 065c 7146     	    mov     r1, lr                          @ restore end of key_sch
ARM GAS  src/mmcau_aes_functions.s 			page 23


 1191 065e 1039     	    subs    r1, #4<<2                       @ *key_sch--
 1192 0660 9E46     	    mov     lr, r3                          @ lr = mmcau_2_cmds(AESS+CA3,AESR)
 1193              	
 1194              	# send a series of cau commands to perform the decryption
 1195 0662 F0C9     	    ldmia   r1!, {r4-r7}                    @ load previous 4 keys
 1196 0664 1060     	    str     r0, [r2]                        @ InvShiftRows, InvSubBytes
 1197 0666 2039     	    subs    r1, #8<<2                       @ *key_sch--
 1198 0668 1360     	    str     r3, [r2]                        @ InvSubBytes
 1199 066a 4346     	    mov     r3, r8
 1200 066c F0C3     	    stmia   r3!, {r4-r7}                    @ MixColumns
 1201              	
 1202 066e F0C9     	    ldmia   r1!, {r4-r7}                    @ load previous 4 keys
 1203 0670 1060     	    str     r0, [r2]                        @ InvShiftRows, InvSubBytes
 1204 0672 7346     	    mov     r3, lr
 1205 0674 2039     	    subs    r1, #8<<2                       @ *key_sch--
 1206 0676 1360     	    str     r3, [r2]                        @ InvSubBytes
 1207 0678 4346     	    mov     r3, r8
 1208 067a F0C3     	    stmia   r3!, {r4-r7}                    @ MixColumns
 1209              	
 1210 067c F0C9     	    ldmia   r1!, {r4-r7}                    @ load previous 4 keys
 1211 067e 1060     	    str     r0, [r2]                        @ InvShiftRows, InvSubBytes
 1212 0680 7346     	    mov     r3, lr
 1213 0682 2039     	    subs    r1, #8<<2                       @ *key_sch--
 1214 0684 1360     	    str     r3, [r2]                        @ InvSubBytes
 1215 0686 4346     	    mov     r3, r8
 1216 0688 F0C3     	    stmia   r3!, {r4-r7}                    @ MixColumns
 1217              	
 1218 068a F0C9     	    ldmia   r1!, {r4-r7}                    @ load previous 4 keys
 1219 068c 1060     	    str     r0, [r2]                        @ InvShiftRows, InvSubBytes
 1220 068e 7346     	    mov     r3, lr
 1221 0690 2039     	    subs    r1, #8<<2                       @ *key_sch--
 1222 0692 1360     	    str     r3, [r2]                        @ InvSubBytes
 1223 0694 4346     	    mov     r3, r8
 1224 0696 F0C3     	    stmia   r3!, {r4-r7}                    @ MixColumns
 1225              	
 1226 0698 F0C9     	    ldmia   r1!, {r4-r7}                    @ load previous 4 keys
 1227 069a 1060     	    str     r0, [r2]                        @ InvShiftRows, InvSubBytes
 1228 069c 7346     	    mov     r3, lr
 1229 069e 2039     	    subs    r1, #8<<2                       @ *key_sch--
 1230 06a0 1360     	    str     r3, [r2]                        @ InvSubBytes
 1231 06a2 4346     	    mov     r3, r8
 1232 06a4 F0C3     	    stmia   r3!, {r4-r7}                    @ MixColumns
 1233              	
 1234 06a6 F0C9     	    ldmia   r1!, {r4-r7}                    @ load previous 4 keys
 1235 06a8 1060     	    str     r0, [r2]                        @ InvShiftRows, InvSubBytes
 1236 06aa 7346     	    mov     r3, lr
 1237 06ac 2039     	    subs    r1, #8<<2                       @ *key_sch--
 1238 06ae 1360     	    str     r3, [r2]                        @ InvSubBytes
 1239 06b0 4346     	    mov     r3, r8
 1240 06b2 F0C3     	    stmia   r3!, {r4-r7}                    @ MixColumns
 1241              	
 1242 06b4 F0C9     	    ldmia   r1!, {r4-r7}                    @ load previous 4 keys
 1243 06b6 1060     	    str     r0, [r2]                        @ InvShiftRows, InvSubBytes
 1244 06b8 7346     	    mov     r3, lr
 1245 06ba 2039     	    subs    r1, #8<<2                       @ *key_sch--
 1246 06bc 1360     	    str     r3, [r2]                        @ InvSubBytes
 1247 06be 4346     	    mov     r3, r8
ARM GAS  src/mmcau_aes_functions.s 			page 24


 1248 06c0 F0C3     	    stmia   r3!, {r4-r7}                    @ MixColumns
 1249              	
 1250 06c2 F0C9     	    ldmia   r1!, {r4-r7}                    @ load previous 4 keys
 1251 06c4 1060     	    str     r0, [r2]                        @ InvShiftRows, InvSubBytes
 1252 06c6 7346     	    mov     r3, lr
 1253 06c8 2039     	    subs    r1, #8<<2                       @ *key_sch--
 1254 06ca 1360     	    str     r3, [r2]                        @ InvSubBytes
 1255 06cc 4346     	    mov     r3, r8
 1256 06ce F0C3     	    stmia   r3!, {r4-r7}                    @ MixColumns
 1257              	
 1258 06d0 F0C9     	    ldmia   r1!, {r4-r7}                    @ load previous 4 keys
 1259 06d2 1060     	    str     r0, [r2]                        @ InvShiftRows, InvSubBytes
 1260 06d4 7346     	    mov     r3, lr
 1261 06d6 2039     	    subs    r1, #8<<2                       @ *key_sch--
 1262 06d8 1360     	    str     r3, [r2]                        @ InvSubBytes
 1263 06da 4346     	    mov     r3, r8
 1264 06dc F0C3     	    stmia   r3!, {r4-r7}                    @ MixColumns
 1265              	
 1266              	
 1267 06de 019B     	    ldr     r3, [sp, #1<<2]                 @ restore nr
 1268 06e0 0A2B     	    cmp     r3, #10                         @ check nr
 1269 06e2 1ED0     	    beq     decrypt_end                     @ if aes128, end routine
 1270              	                                            @ else, continue on
 1271              	
 1272 06e4 F0C9     	    ldmia   r1!, {r4-r7}                    @ load previous 4 keys
 1273 06e6 1060     	    str     r0, [r2]                        @ InvShiftRows, InvSubBytes
 1274 06e8 7346     	    mov     r3, lr
 1275 06ea 2039     	    subs    r1, #8<<2                       @ *key_sch--
 1276 06ec 1360     	    str     r3, [r2]                        @ InvSubBytes
 1277 06ee 4346     	    mov     r3, r8
 1278 06f0 F0C3     	    stmia   r3!, {r4-r7}                    @ MixColumns
 1279              	
 1280 06f2 F0C9     	    ldmia   r1!, {r4-r7}                    @ load previous 4 keys
 1281 06f4 1060     	    str     r0, [r2]                        @ InvShiftRows, InvSubBytes
 1282 06f6 7346     	    mov     r3, lr
 1283 06f8 2039     	    subs    r1, #8<<2                       @ *key_sch--
 1284 06fa 1360     	    str     r3, [r2]                        @ InvSubBytes
 1285 06fc 4346     	    mov     r3, r8
 1286 06fe F0C3     	    stmia   r3!, {r4-r7}                    @ MixColumns
 1287              	
 1288              	
 1289 0700 019B     	    ldr     r3, [sp, #1<<2]                 @ restore nr
 1290 0702 0C2B     	    cmp     r3, #12                         @ check nr
 1291 0704 0DD0     	    beq     decrypt_end                     @ if aes192, end routine
 1292              	                                            @ else, continue on
 1293              	
 1294 0706 F0C9     	    ldmia   r1!, {r4-r7}                    @ load previous 4 keys
 1295 0708 1060     	    str     r0, [r2]                        @ InvShiftRows, InvSubBytes
 1296 070a 7346     	    mov     r3, lr
 1297 070c 2039     	    subs    r1, #8<<2                       @ *key_sch--
 1298 070e 1360     	    str     r3, [r2]                        @ InvSubBytes
 1299 0710 4346     	    mov     r3, r8
 1300 0712 F0C3     	    stmia   r3!, {r4-r7}                    @ MixColumns
 1301              	
 1302 0714 F0C9     	    ldmia   r1!, {r4-r7}                    @ load previous 4 keys
 1303 0716 1060     	    str     r0, [r2]                        @ InvShiftRows, InvSubBytes
 1304 0718 7346     	    mov     r3, lr
ARM GAS  src/mmcau_aes_functions.s 			page 25


 1305 071a 2039     	    subs    r1, #8<<2                       @ *key_sch--
 1306 071c 1360     	    str     r3, [r2]                        @ InvSubBytes
 1307 071e 4346     	    mov     r3, r8
 1308 0720 F0C3     	    stmia   r3!, {r4-r7}                    @ MixColumns
 1309              	
 1310              	
 1311              	decrypt_end:
 1312              	
 1313 0722 1060     	    str     r0, [r2]                        @ InvShiftRows, InvSubBytes
 1314 0724 7346     	    mov     r3, lr
 1315 0726 1360     	    str     r3, [r2]                        @ InvSubBytes
 1316              	
 1317              	# XOR the first 4 keys with the 4 words of plaintext
 1318 0728 0A48     	    ldr     r0, =MMCAU_PPB_INDIRECT+(STR+CA0)<<2
 1319 072a F0C9     	    ldmia   r1!, {r4-r7}                    @ load first 4 keys
 1320 072c 0FC8     	    ldmia   r0, {r0-r3}                     @ load plaintext
 1321 072e 4440     	    eors    r4, r0
 1322 0730 4D40     	    eors    r5, r1
 1323 0732 5640     	    eors    r6, r2
 1324 0734 5F40     	    eors    r7, r3
 1325 0736 24BA     	    rev     r4, r4
 1326 0738 2DBA     	    rev     r5, r5
 1327 073a 36BA     	    rev     r6, r6
 1328 073c 3FBA     	    rev     r7, r7
 1329 073e 0299     	    ldr     r1, [sp, #2<<2]                 @ get *out
 1330 0740 F0C1     	    stmia   r1!, {r4-r7}                    @ store XOR results in out[0-3]
 1331              	
 1332 0742 10BC     	    pop     {r4}                            @ restore high reg
 1333 0744 A046     	    mov     r8, r4
 1334 0746 02B0     	    add     sp, #2<<2                       @ set sp = *{r4-r7}
 1335 0748 F0BD     	    pop     {r4-r7, pc}                     @ restore low regs, exit routine
 1336              	
 1337              	
 1338              	# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
 1339              	
 1340 074a 0000     	    .data
 1341              	
 1342              	
 1343              	    .type   set_key_reg_data, %object
 1344              	    .align  4
 1345              	
 1346              	set_key_reg_data:
 1347 0000 40000000 	    .word   rcon                            @ r8
 1348 0004 000040A8 	    .word   MMCAU_1_CMD+(AESS+CAA)<<22      @ r9
 1349 0008 005000F0 	    .word   MMCAU_PPB_DIRECT                @ sl
 1350 000c 445800F0 	    .word   MMCAU_PPB_INDIRECT+(LDR+CAA)<<2 @ fp
 1351 0010 845800F0 	    .word   MMCAU_PPB_INDIRECT+(STR+CAA)<<2 @ ip
 1352              	
 1353              	
 1354              	    .type   encrypt_reg_data, %object
 1355 0014 00000000 	    .align  4
 1355      00000000 
 1355      00000000 
 1356              	
 1357              	encrypt_reg_data:
 1358 0020 A41A95A8 	    .word   MMCAU_3_CMDS+(AESS+CA0)<<22+(AESS+CA1)<<11+AESS+CA2 @ r0
 1359 0024 085B00F0 	    .word   MMCAU_PPB_INDIRECT+(AESC+CA0)<<2                    @ r8
ARM GAS  src/mmcau_aes_functions.s 			page 26


 1360 0028 005000F0 	    .word   MMCAU_PPB_DIRECT                                    @ r2
 1361 002c 000057A9 	    .word   MMCAU_2_CMDS+(AESS+CA3)<<22+(AESR)<<11              @ lr
 1362              	
 1363              	
 1364              	    .type   decrypt_reg_data, %object
 1365              	    .align  4
 1366              	
 1367              	decrypt_reg_data:
 1368 0030 B4AA15BC 	    .word   MMCAU_3_CMDS+(AESIR)<<22+(AESIS+CA3)<<11+AESIS+CA2  @ r0
 1369 0034 485B00F0 	    .word   MMCAU_PPB_INDIRECT+(AESIC+CA0)<<2                   @ r8
 1370 0038 005000F0 	    .word   MMCAU_PPB_DIRECT                                    @ r2
 1371 003c 0090D5AC 	    .word   MMCAU_2_CMDS+(AESIS+CA1)<<22+(AESIS+CA0)<<11        @ lr
 1372              	
 1373              	
 1374              	    .type   rcon, %object
 1375              	    .align  4
 1376              	
 1377              	rcon:
 1378 0040 00000001 	    .word 0x01000000
 1379 0044 00000002 	    .word 0x02000000
 1380 0048 00000004 	    .word 0x04000000
 1381 004c 00000008 	    .word 0x08000000
 1382 0050 00000010 	    .word 0x10000000
 1383 0054 00000020 	    .word 0x20000000
 1384 0058 00000040 	    .word 0x40000000
 1385 005c 00000080 	    .word 0x80000000
 1386 0060 0000001B 	    .word 0x1b000000
 1387 0064 00000036 	    .word 0x36000000
 1387      00000000 
 1387      00000000 
