ARM GAS  src/asm/mmcau_md5_functions.s 			page 1


   1              	#*******************************************************************************
   2              	#*******************************************************************************
   3              	#
   4              	# Copyright (c) Freescale Semiconductor, Inc 2011.
   5              	#
   6              	# FILE NAME      : mmcau_md5_functions.s
   7              	# VERSION        : $Id: mmcau_md5_functions.s.rca 1.6 Thu Nov 21 14:18:27 2013 b40907 Experimental 
   8              	# TYPE           : Source Cortex-Mx assembly library code
   9              	# DEPARTMENT     : MSG R&D Core and Platforms
  10              	# AUTHOR         : David Schimke
  11              	# AUTHOR'S EMAIL : David.Schimke@freescale.com
  12              	# -----------------------------------------------------------------------------
  13              	# Release history
  14              	# VERSION  Date       AUTHOR           DESCRIPTION
  15              	#          08-2010    David Schimke    Initial Release
  16              	#          12-2010    David Schimke    Remove "global" on data objects
  17              	#          01-2011    David Schimke    Header added
  18              	#          11-2013    Teejay Ciancio   Cleanup
  19              	#
  20              	#*******************************************************************************
  21              	#*******************************************************************************
  22              	
  23              	    .include "cau2_defines.hdr"
   1              	#ifndef _MMCAU_H_
   2              	#define _MMCAU_H_
   3              	
   4              	    .equ    TL,0
   5              	    .equ    TS,0
   6              	    .equ    CASR,0
   7              	    .equ    CAA,1
   8              	    .equ    CA0,2
   9              	    .equ    CA1,3
  10              	    .equ    CA2,4
  11              	    .equ    CA3,5
  12              	    .equ    CA4,6
  13              	    .equ    CA5,7
  14              	    .equ    CA6,8
  15              	    .equ    CA7,9
  16              	    .equ    CA8,10
  17              	    .equ    CNOP,0x000
  18              	    .equ    LDR,0x010
  19              	    .equ    STR,0x020
  20              	    .equ    ADR,0x030
  21              	    .equ    RADR,0x040
  22              	    .equ    ADRA,0x050
  23              	    .equ    XOR,0x060
  24              	    .equ    ROTL,0x070
  25              	    .equ    MVRA,0x080
  26              	    .equ    MVAR,0x090
  27              	    .equ    AESS,0x0a0
  28              	    .equ    AESIS,0x0b0
  29              	    .equ    AESC,0x0c0
  30              	    .equ    AESIC,0x0d0
  31              	    .equ    AESR,0x0e0
  32              	    .equ    AESIR,0x0f0
  33              	    .equ    DESR,0x100
  34              	    .equ    DESK,0x110
ARM GAS  src/asm/mmcau_md5_functions.s 			page 2


  35              	    .equ    HASH,0x120
  36              	    .equ    SHS,0x130
  37              	    .equ    MDS,0x140
  38              	    .equ    SHS2,0x150
  39              	    .equ    ILL,0x1f0
  40              	    .equ    IP,8
  41              	    .equ    FP,4
  42              	    .equ    DC,1
  43              	    .equ    CP,2
  44              	    .equ    KSL1,0
  45              	    .equ    KSL2,1
  46              	    .equ    KSR1,2
  47              	    .equ    KSR2,3
  48              	    .equ    HFF,0
  49              	    .equ    HFG,1
  50              	    .equ    HFH,2
  51              	    .equ    HFI,3
  52              	    .equ    HFP,2
  53              	    .equ    HFC,4
  54              	    .equ    HFM,5
  55              	    .equ    HF2C,6
  56              	    .equ    HF2M,7
  57              	    .equ    HF2S,8
  58              	    .equ    HF2T,9
  59              	    .equ    HF2U,10
  60              	    .equ    HF2V,11
  61              	
  62              	#endif
  24              	    .equ    MMCAU_PPB_DIRECT,0xe0081000
  25              	    .equ    MMCAU_PPB_INDIRECT,0xe0081800
  26              	
  27              	    .syntax unified
  28              	
  29              	#*******************************************************************************
  30              	#*******************************************************************************
  31              	#
  32              	# MD5: Initializes the MD5 state variables
  33              	#   arguments
  34              	#           *md5_state pointer to 120-bit block of md5 state variables:
  35              	#                           a,b,c,d
  36              	#
  37              	#   calling convention
  38              	#   void    mmcau_md5_initialize_output (const unsigned int *md5_state)
  39              	
  40              	    .global _mmcau_md5_initialize_output
  41              	    .global mmcau_md5_initialize_output
  42              	    .type   mmcau_md5_initialize_output, %function
  43              	    .align  4
  44              	
  45              	_mmcau_md5_initialize_output:
  46              	mmcau_md5_initialize_output:
  47              	
  48 0000 4DF8044D 	    stmdb   sp!, {r4}                               @ save registers
  49              	
  50 0004 40F20001 	    movw    r1, #:lower16:md5_initial_h             @ r1 -> initial data
  51 0008 C0F20001 	    movt    r1, #:upper16:md5_initial_h
  52              	
ARM GAS  src/asm/mmcau_md5_functions.s 			page 3


  53              	# copy initial data into hash output buffer
  54 000c 1EC9     	    ldmia   r1, {r1-r4}                             @ get md5[0-3]
  55 000e 80E81E00 	    stmia   r0, {r1-r4}                             @ copy to md5_state[0-3]
  56              	
  57 0012 10BC     	    ldmia   sp!, {r4}                               @ restore registers
  58 0014 7047     	    bx      lr
  59              	
  60              	
  61              	#*******************************************************************************
  62              	#*******************************************************************************
  63              	#
  64              	# MD5: Updates MD5 state variables for one or more input message blocks
  65              	#
  66              	#   arguments
  67              	#           *msg_data   pointer to start of input message data
  68              	#           num_blks    number of 512-bit blocks to process
  69              	#           *md5_state  pointer to 128-bit block of MD5 state variables: a,b,c,d
  70              	#
  71              	#   calling convention
  72              	#   void    mmucau_md5_hash_n (const unsigned char *msg_data,
  73              	#                              const int            num_blks,
  74              	#                              unsigned char       *md5_state)
  75              	
  76              	    .global _mmcau_md5_hash_n
  77              	    .global mmcau_md5_hash_n
  78              	    .type   mmcau_md5_hash_n, %function
  79 0016 00BFAFF3 	    .align  4
  79      0080AFF3 
  79      0080
  80              	
  81              	_mmcau_md5_hash_n:
  82              	mmcau_md5_hash_n:
  83              	
  84              	#  register allocation
  85              	# --------------------
  86              	#  r0      = input pointer (arg0)
  87              	#  r1      = a / input num_blks (arg1)
  88              	#  r2      = b / output pointer (arg2)
  89              	#  r3      = c
  90              	#  r4      = d
  91              	#  r5      = scratch
  92              	#  r6      = scratch
  93              	#  r7      = pointer to md5_t
  94              	#  r8      = output pointer
  95              	#  r9      = input num_blks
  96              	# r10 (sl) = not used
  97              	# r11 (fp) = not used
  98              	# r12 (ip) = not used
  99              	# r13 (sp) = stack pointer
 100              	# r14 (lr) = link register
 101              	
 102 0020 2DE9F003 	    stmdb   sp!, {r4-r9}                            @ save registers on stack
 103              	
 104 0024 8946     	    mov     r9, r1                                  @ r9 = num_blks
 105 0026 9046     	    mov     r8, r2                                  @ r8 = output pointer
 106              	
 107 0028 98E81E00 	    ldmia   r8, {r1-r4}                             @ get md5_state[0-3]
ARM GAS  src/asm/mmcau_md5_functions.s 			page 4


 108              	
 109 002c 40F20007 	    movw    r7, #:lower16:md5_t                     @ r7 -> md5_t
 110 0030 C0F20007 	    movt    r7, #:upper16:md5_t
 111              	
 112              	    .align  2
 113              	next_blk:
 114              	
 115              	# 16 rounds with F(x,y,z) = (x & y) | (~x & z)
 116              	
 117 0034 24EA0205 	    bic.w   r5, r4, r2                              @ ~b & d
 118 0038 03EA0206 	    and.w   r6, r3, r2                              @ b & c
 119 003c 3543     	    orrs    r5, r6                                  @ F(b,c,d)
 120 003e 2944     	    add     r1, r5                                  @ a += F(b,c,d)
 121 0040 0668     	    ldr     r6, [r0]                                @ input[0]
 122 0042 3144     	    add     r1, r6                                  @ a += input[0]
 123 0044 3E68     	    ldr     r6, [r7]                                @ t[0]
 124 0046 3144     	    add     r1, r6                                  @ a += t[0]
 125 0048 02EB7161 	    add.w   r1, r2, r1, ror #25                     @ a = b + ROTL(a,7)
 126              	
 127 004c 23EA0105 	    bic.w   r5, r3, r1                              @ ~a & c
 128 0050 02EA0106 	    and.w   r6, r2, r1                              @ a & b
 129 0054 3543     	    orrs    r5, r6                                  @ F(a,b,c)
 130 0056 2C44     	    add     r4, r5                                  @ d += F(a,b,c)
 131 0058 4668     	    ldr     r6, [r0, $1<<2]                         @ input[1]
 132 005a 3444     	    add     r4, r6                                  @ d += input[1]
 133 005c 7E68     	    ldr     r6, [r7, $1<<2]                         @ t[1]
 134 005e 3444     	    add     r4, r6                                  @ d += t[1]
 135 0060 01EB3454 	    add.w   r4, r1, r4, ror #20                     @ d = a + ROTL(d,12)
 136              	
 137 0064 22EA0405 	    bic.w   r5, r2, r4                              @ ~d & b
 138 0068 01EA0406 	    and.w   r6, r1, r4                              @ d & a
 139 006c 3543     	    orrs    r5, r6                                  @ F(d,a,b)
 140 006e 2B44     	    add     r3, r5                                  @ c += F(d,a,b)
 141 0070 8668     	    ldr     r6, [r0, $2<<2]                         @ input[2]
 142 0072 3344     	    add     r3, r6                                  @ c += input[2]
 143 0074 BE68     	    ldr     r6, [r7, $2<<2]                         @ t[2]
 144 0076 3344     	    add     r3, r6                                  @ c += t[2]
 145 0078 04EBF333 	    add.w   r3, r4, r3, ror #15                     @ c = d + ROTL(c,17)
 146              	
 147 007c 21EA0305 	    bic.w   r5, r1, r3                              @ ~c & a
 148 0080 04EA0306 	    and.w   r6, r4, r3                              @ c & d
 149 0084 3543     	    orrs    r5, r6                                  @ F(c,d,a)
 150 0086 2A44     	    add     r2, r5                                  @ b += F(c,d,a)
 151 0088 C668     	    ldr     r6, [r0, $3<<2]                         @ input[3]
 152 008a 3244     	    add     r2, r6                                  @ b += input[3]
 153 008c FE68     	    ldr     r6, [r7, $3<<2]                         @ t[3]
 154 008e 3244     	    add     r2, r6                                  @ b += t[3]
 155 0090 03EBB222 	    add.w   r2, r3, r2, ror #10                     @ b = c + ROTL(b,22)
 156              	
 157 0094 24EA0205 	    bic.w   r5, r4, r2                              @ ~b & d
 158 0098 03EA0206 	    and.w   r6, r3, r2                              @ b & c
 159 009c 3543     	    orrs    r5, r6                                  @ F(b,c,d)
 160 009e 2944     	    add     r1, r5                                  @ a += F(b,c,d)
 161 00a0 0669     	    ldr     r6, [r0, $4<<2]                         @ input[4]
 162 00a2 3144     	    add     r1, r6                                  @ a += input[4]
 163 00a4 3E69     	    ldr     r6, [r7, $4<<2]                         @ t[4]
 164 00a6 3144     	    add     r1, r6                                  @ a += t[4]
ARM GAS  src/asm/mmcau_md5_functions.s 			page 5


 165 00a8 02EB7161 	    add.w   r1, r2, r1, ror #25                     @ a = b + ROTL(a,7)
 166              	
 167 00ac 23EA0105 	    bic.w   r5, r3, r1                              @ ~a & c
 168 00b0 02EA0106 	    and.w   r6, r2, r1                              @ a & b
 169 00b4 3543     	    orrs    r5, r6                                  @ F(a,b,c)
 170 00b6 2C44     	    add     r4, r5                                  @ d += F(a,b,c)
 171 00b8 4669     	    ldr     r6, [r0, $5<<2]                         @ input[5]
 172 00ba 3444     	    add     r4, r6                                  @ d += input[5]
 173 00bc 7E69     	    ldr     r6, [r7, $5<<2]                         @ t[5]
 174 00be 3444     	    add     r4, r6                                  @ d += t[5]
 175 00c0 01EB3454 	    add.w   r4, r1, r4, ror #20                     @ d = a + ROTL(d,12)
 176              	
 177 00c4 22EA0405 	    bic.w   r5, r2, r4                              @ ~d & b
 178 00c8 01EA0406 	    and.w   r6, r1, r4                              @ d & a
 179 00cc 3543     	    orrs    r5, r6                                  @ F(d,a,b)
 180 00ce 2B44     	    add     r3, r5                                  @ c += F(d,a,b)
 181 00d0 8669     	    ldr     r6, [r0, $6<<2]                         @ input[6]
 182 00d2 3344     	    add     r3, r6                                  @ c += input[6]
 183 00d4 BE69     	    ldr     r6, [r7, $6<<2]                         @ t[6]
 184 00d6 3344     	    add     r3, r6                                  @ c += t[6]
 185 00d8 04EBF333 	    add.w   r3, r4, r3, ror #15                     @ c = d + ROTL(c,17)
 186              	
 187 00dc 21EA0305 	    bic.w   r5, r1, r3                              @ ~c & a
 188 00e0 04EA0306 	    and.w   r6, r4, r3                              @ c & d
 189 00e4 3543     	    orrs    r5, r6                                  @ F(c,d,a)
 190 00e6 2A44     	    add     r2, r5                                  @ b += F(c,d,a)
 191 00e8 C669     	    ldr     r6, [r0, $7<<2]                         @ input[7]
 192 00ea 3244     	    add     r2, r6                                  @ b += input[7]
 193 00ec FE69     	    ldr     r6, [r7, $7<<2]                         @ t[7]
 194 00ee 3244     	    add     r2, r6                                  @ b += t[7]
 195 00f0 03EBB222 	    add.w   r2, r3, r2, ror #10                     @ b = c + ROTL(b,22)
 196              	
 197 00f4 24EA0205 	    bic.w   r5, r4, r2                              @ ~b & d
 198 00f8 03EA0206 	    and.w   r6, r3, r2                              @ b & c
 199 00fc 3543     	    orrs    r5, r6                                  @ F(b,c,d)
 200 00fe 2944     	    add     r1, r5                                  @ a += F(b,c,d)
 201 0100 066A     	    ldr     r6, [r0, $8<<2]                         @ input[8]
 202 0102 3144     	    add     r1, r6                                  @ a += input[8]
 203 0104 3E6A     	    ldr     r6, [r7, $8<<2]                         @ t[8]
 204 0106 3144     	    add     r1, r6                                  @ a += t[8]
 205 0108 02EB7161 	    add.w   r1, r2, r1, ror #25                     @ a = b + ROTL(a,7)
 206              	
 207 010c 23EA0105 	    bic.w   r5, r3, r1                              @ ~a & c
 208 0110 02EA0106 	    and.w   r6, r2, r1                              @ a & b
 209 0114 3543     	    orrs    r5, r6                                  @ F(a,b,c)
 210 0116 2C44     	    add     r4, r5                                  @ d += F(a,b,c)
 211 0118 466A     	    ldr     r6, [r0, $9<<2]                         @ input[9]
 212 011a 3444     	    add     r4, r6                                  @ d += input[9]
 213 011c 7E6A     	    ldr     r6, [r7, $9<<2]                         @ t[9]
 214 011e 3444     	    add     r4, r6                                  @ d += t[9]
 215 0120 01EB3454 	    add.w   r4, r1, r4, ror #20                     @ d = a + ROTL(d,12)
 216              	
 217 0124 22EA0405 	    bic.w   r5, r2, r4                              @ ~d & b
 218 0128 01EA0406 	    and.w   r6, r1, r4                              @ d & a
 219 012c 3543     	    orrs    r5, r6                                  @ F(d,a,b)
 220 012e 2B44     	    add     r3, r5                                  @ c += F(d,a,b)
 221 0130 866A     	    ldr     r6, [r0, $10<<2]                        @ input[10]
ARM GAS  src/asm/mmcau_md5_functions.s 			page 6


 222 0132 3344     	    add     r3, r6                                  @ c += input[10]
 223 0134 BE6A     	    ldr     r6, [r7, $10<<2]                        @ t[10]
 224 0136 3344     	    add     r3, r6                                  @ c += t[10]
 225 0138 04EBF333 	    add.w   r3, r4, r3, ror #15                     @ c = d + ROTL(c,17)
 226              	
 227 013c 21EA0305 	    bic.w   r5, r1, r3                              @ ~c & a
 228 0140 04EA0306 	    and.w   r6, r4, r3                              @ c & d
 229 0144 3543     	    orrs    r5, r6                                  @ F(c,d,a)
 230 0146 2A44     	    add     r2, r5                                  @ b += F(c,d,a)
 231 0148 C66A     	    ldr     r6, [r0, $11<<2]                        @ input[11]
 232 014a 3244     	    add     r2, r6                                  @ b += input[11]
 233 014c FE6A     	    ldr     r6, [r7, $11<<2]                        @ t[11]
 234 014e 3244     	    add     r2, r6                                  @ b += t[11]
 235 0150 03EBB222 	    add.w   r2, r3, r2, ror #10                     @ b = c + ROTL(b,22)
 236              	
 237 0154 24EA0205 	    bic.w   r5, r4, r2                              @ ~b & d
 238 0158 03EA0206 	    and.w   r6, r3, r2                              @ b & c
 239 015c 3543     	    orrs    r5, r6                                  @ F(b,c,d)
 240 015e 2944     	    add     r1, r5                                  @ a += F(b,c,d)
 241 0160 066B     	    ldr     r6, [r0, $12<<2]                        @ input[12]
 242 0162 3144     	    add     r1, r6                                  @ a += input[12]
 243 0164 3E6B     	    ldr     r6, [r7, $12<<2]                        @ t[12]
 244 0166 3144     	    add     r1, r6                                  @ a += t[12]
 245 0168 02EB7161 	    add.w   r1, r2, r1, ror #25                     @ a = b + ROTL(a,7)
 246              	
 247 016c 23EA0105 	    bic.w   r5, r3, r1                              @ ~a & c
 248 0170 02EA0106 	    and.w   r6, r2, r1                              @ a & b
 249 0174 3543     	    orrs    r5, r6                                  @ F(a,b,c)
 250 0176 2C44     	    add     r4, r5                                  @ d += F(a,b,c)
 251 0178 466B     	    ldr     r6, [r0, $13<<2]                        @ input[13]
 252 017a 3444     	    add     r4, r6                                  @ d += input[13]
 253 017c 7E6B     	    ldr     r6, [r7, $13<<2]                        @ t[13]
 254 017e 3444     	    add     r4, r6                                  @ d += t[13]
 255 0180 01EB3454 	    add.w   r4, r1, r4, ror #20                     @ d = a + ROTL(d,12)
 256              	
 257 0184 22EA0405 	    bic.w   r5, r2, r4                              @ ~d & b
 258 0188 01EA0406 	    and.w   r6, r1, r4                              @ d & a
 259 018c 3543     	    orrs    r5, r6                                  @ F(d,a,b)
 260 018e 2B44     	    add     r3, r5                                  @ c += F(d,a,b)
 261 0190 866B     	    ldr     r6, [r0, $14<<2]                        @ input[14]
 262 0192 3344     	    add     r3, r6                                  @ c += input[14]
 263 0194 BE6B     	    ldr     r6, [r7, $14<<2]                        @ t[14]
 264 0196 3344     	    add     r3, r6                                  @ c += t[14]
 265 0198 04EBF333 	    add.w   r3, r4, r3, ror #15                     @ c = d + ROTL(c,17)
 266              	
 267 019c 21EA0305 	    bic.w   r5, r1, r3                              @ ~c & a
 268 01a0 04EA0306 	    and.w   r6, r4, r3                              @ c & d
 269 01a4 3543     	    orrs    r5, r6                                  @ F(c,d,a)
 270 01a6 2A44     	    add     r2, r5                                  @ b += F(c,d,a)
 271 01a8 C66B     	    ldr     r6, [r0, $15<<2]                        @ input[15]
 272 01aa 3244     	    add     r2, r6                                  @ b += input[15]
 273 01ac FE6B     	    ldr     r6, [r7, $15<<2]                        @ t[15]
 274 01ae 3244     	    add     r2, r6                                  @ b += t[15]
 275 01b0 03EBB222 	    add.w   r2, r3, r2, ror #10                     @ b = c + ROTL(b,22)
 276              	
 277              	# 16 rounds with G(x,y,z) = (x & z) | (y & ~z)
 278              	
ARM GAS  src/asm/mmcau_md5_functions.s 			page 7


 279 01b4 23EA0405 	    bic.w   r5, r3, r4                              @ ~d & c
 280 01b8 02EA0406 	    and.w   r6, r2, r4                              @ d & b
 281 01bc 3543     	    orrs    r5, r6                                  @ G(b,c,d)
 282 01be 2944     	    add     r1, r5                                  @ a += G(b,c,d)
 283 01c0 4668     	    ldr     r6, [r0, $1<<2]                         @ input[1]
 284 01c2 3144     	    add     r1, r6                                  @ a += input[1]
 285 01c4 3E6C     	    ldr     r6, [r7, $16<<2]                        @ t[16]
 286 01c6 3144     	    add     r1, r6                                  @ a += t[16]
 287 01c8 02EBF161 	    add.w   r1, r2, r1, ror #27                     @ a = b + ROTL(a,5)
 288              	
 289 01cc 22EA0305 	    bic.w   r5, r2, r3                              @ ~c & b
 290 01d0 01EA0306 	    and.w   r6, r1, r3                              @ c & a
 291 01d4 3543     	    orrs    r5, r6                                  @ G(a,b,c)
 292 01d6 2C44     	    add     r4, r5                                  @ d += G(a,b,c)
 293 01d8 8669     	    ldr     r6, [r0, $6<<2]                         @ input[6]
 294 01da 3444     	    add     r4, r6                                  @ d += input[6]
 295 01dc 7E6C     	    ldr     r6, [r7, $17<<2]                        @ t[17]
 296 01de 3444     	    add     r4, r6                                  @ d += t[17]
 297 01e0 01EBF454 	    add.w   r4, r1, r4, ror #23                     @ d = a + ROTL(d,9)
 298              	
 299 01e4 21EA0205 	    bic.w   r5, r1, r2                              @ ~b & a
 300 01e8 04EA0206 	    and.w   r6, r4, r2                              @ b & d
 301 01ec 3543     	    orrs    r5, r6                                  @ G(d,a,b)
 302 01ee 2B44     	    add     r3, r5                                  @ c += G(d,a,b)
 303 01f0 C66A     	    ldr     r6, [r0, $11<<2]                        @ input[11]
 304 01f2 3344     	    add     r3, r6                                  @ c += input[11]
 305 01f4 BE6C     	    ldr     r6, [r7, $18<<2]                        @ t[18]
 306 01f6 3344     	    add     r3, r6                                  @ c += t[18]
 307 01f8 04EBB343 	    add.w   r3, r4, r3, ror #18                     @ c = d + ROTL(c,14)
 308              	
 309 01fc 24EA0105 	    bic.w   r5, r4, r1                              @ ~a & d
 310 0200 03EA0106 	    and.w   r6, r3, r1                              @ a & c
 311 0204 3543     	    orrs    r5, r6                                  @ G(d,a,b)
 312 0206 2A44     	    add     r2, r5                                  @ b += G(c,d,a)
 313 0208 0668     	    ldr     r6, [r0]                                @ input[0]
 314 020a 3244     	    add     r2, r6                                  @ b += input[0]
 315 020c FE6C     	    ldr     r6, [r7, $19<<2]                        @ t[19]
 316 020e 3244     	    add     r2, r6                                  @ b += t[19]
 317 0210 03EB3232 	    add.w   r2, r3, r2, ror #12                     @ b = c + ROTL(b,20)
 318              	
 319 0214 23EA0405 	    bic.w   r5, r3, r4                              @ ~d & c
 320 0218 02EA0406 	    and.w   r6, r2, r4                              @ d & b
 321 021c 3543     	    orrs    r5, r6                                  @ G(b,c,d)
 322 021e 2944     	    add     r1, r5                                  @ a += G(b,c,d)
 323 0220 4669     	    ldr     r6, [r0, $5<<2]                         @ input[5]
 324 0222 3144     	    add     r1, r6                                  @ a += input[5]
 325 0224 3E6D     	    ldr     r6, [r7, $20<<2]                        @ t[20]
 326 0226 3144     	    add     r1, r6                                  @ a += t[20]
 327 0228 02EBF161 	    add.w   r1, r2, r1, ror #27                     @ a = b + ROTL(a,5)
 328              	
 329 022c 22EA0305 	    bic.w   r5, r2, r3                              @ ~c & b
 330 0230 01EA0306 	    and.w   r6, r1, r3                              @ c & a
 331 0234 3543     	    orrs    r5, r6                                  @ G(a,b,c)
 332 0236 2C44     	    add     r4, r5                                  @ d += G(a,b,c)
 333 0238 866A     	    ldr     r6, [r0, $10<<2]                        @ input[10]
 334 023a 3444     	    add     r4, r6                                  @ d += input[10]
 335 023c 7E6D     	    ldr     r6, [r7, $21<<2]                        @ t[21]
ARM GAS  src/asm/mmcau_md5_functions.s 			page 8


 336 023e 3444     	    add     r4, r6                                  @ d += t[21]
 337 0240 01EBF454 	    add.w   r4, r1, r4, ror #23                     @ d = a + ROTL(d,9)
 338              	
 339 0244 21EA0205 	    bic.w   r5, r1, r2                              @ ~b & a
 340 0248 04EA0206 	    and.w   r6, r4, r2                              @ b & d
 341 024c 3543     	    orrs    r5, r6                                  @ G(d,a,b)
 342 024e 2B44     	    add     r3, r5                                  @ c += G(d,a,b)
 343 0250 C66B     	    ldr     r6, [r0, $15<<2]                        @ input[15]
 344 0252 3344     	    add     r3, r6                                  @ c += input[15]
 345 0254 BE6D     	    ldr     r6, [r7, $22<<2]                        @ t[22]
 346 0256 3344     	    add     r3, r6                                  @ c += t[22]
 347 0258 04EBB343 	    add.w   r3, r4, r3, ror #18                     @ c = d + ROTL(c,14)
 348              	
 349 025c 24EA0105 	    bic.w   r5, r4, r1                              @ ~a & d
 350 0260 03EA0106 	    and.w   r6, r3, r1                              @ a & c
 351 0264 3543     	    orrs    r5, r6                                  @ G(d,a,b)
 352 0266 2A44     	    add     r2, r5                                  @ b += G(c,d,a)
 353 0268 0669     	    ldr     r6, [r0, $4<<2]                         @ input[4]
 354 026a 3244     	    add     r2, r6                                  @ b += input[4]
 355 026c FE6D     	    ldr     r6, [r7, $23<<2]                        @ t[23]
 356 026e 3244     	    add     r2, r6                                  @ b += t[23]
 357 0270 03EB3232 	    add.w   r2, r3, r2, ror #12                     @ b = c + ROTL(b,20)
 358              	
 359 0274 23EA0405 	    bic.w   r5, r3, r4                              @ ~d & c
 360 0278 02EA0406 	    and.w   r6, r2, r4                              @ d & b
 361 027c 3543     	    orrs    r5, r6                                  @ G(b,c,d)
 362 027e 2944     	    add     r1, r5                                  @ a += G(b,c,d)
 363 0280 466A     	    ldr     r6, [r0, $9<<2]                         @ input[9]
 364 0282 3144     	    add     r1, r6                                  @ a += input[9]
 365 0284 3E6E     	    ldr     r6, [r7, $24<<2]                        @ t[24]
 366 0286 3144     	    add     r1, r6                                  @ a += t[24]
 367 0288 02EBF161 	    add.w   r1, r2, r1, ror #27                     @ a = b + ROTL(a,5)
 368              	
 369 028c 22EA0305 	    bic.w   r5, r2, r3                              @ ~c & b
 370 0290 01EA0306 	    and.w   r6, r1, r3                              @ c & a
 371 0294 3543     	    orrs    r5, r6                                  @ G(a,b,c)
 372 0296 2C44     	    add     r4, r5                                  @ d += G(a,b,c)
 373 0298 866B     	    ldr     r6, [r0, $14<<2]                        @ input[14]
 374 029a 3444     	    add     r4, r6                                  @ d += input[14]
 375 029c 7E6E     	    ldr     r6, [r7, $25<<2]                        @ t[25]
 376 029e 3444     	    add     r4, r6                                  @ d += t[25]
 377 02a0 01EBF454 	    add.w   r4, r1, r4, ror #23                     @ d = a + ROTL(d,9)
 378              	
 379 02a4 21EA0205 	    bic.w   r5, r1, r2                              @ ~b & a
 380 02a8 04EA0206 	    and.w   r6, r4, r2                              @ b & d
 381 02ac 3543     	    orrs    r5, r6                                  @ G(d,a,b)
 382 02ae 2B44     	    add     r3, r5                                  @ c += G(d,a,b)
 383 02b0 C668     	    ldr     r6, [r0, $3<<2]                         @ input[3]
 384 02b2 3344     	    add     r3, r6                                  @ c += input[3]
 385 02b4 BE6E     	    ldr     r6, [r7, $26<<2]                        @ t[26]
 386 02b6 3344     	    add     r3, r6                                  @ c += t[26]
 387 02b8 04EBB343 	    add.w   r3, r4, r3, ror #18                     @ c = d + ROTL(c,14)
 388              	
 389 02bc 24EA0105 	    bic.w   r5, r4, r1                              @ ~a & d
 390 02c0 03EA0106 	    and.w   r6, r3, r1                              @ a & c
 391 02c4 3543     	    orrs    r5, r6                                  @ G(d,a,b)
 392 02c6 2A44     	    add     r2, r5                                  @ b += G(c,d,a)
ARM GAS  src/asm/mmcau_md5_functions.s 			page 9


 393 02c8 066A     	    ldr     r6, [r0, $8<<2]                         @ input[8]
 394 02ca 3244     	    add     r2, r6                                  @ b += input[8]
 395 02cc FE6E     	    ldr     r6, [r7, $27<<2]                        @ t[27]
 396 02ce 3244     	    add     r2, r6                                  @ b += t[27]
 397 02d0 03EB3232 	    add.w   r2, r3, r2, ror #12                     @ b = c + ROTL(b,20)
 398              	
 399 02d4 23EA0405 	    bic.w   r5, r3, r4                              @ ~d & c
 400 02d8 02EA0406 	    and.w   r6, r2, r4                              @ d & b
 401 02dc 3543     	    orrs    r5, r6                                  @ G(b,c,d)
 402 02de 2944     	    add     r1, r5                                  @ a += G(b,c,d)
 403 02e0 466B     	    ldr     r6, [r0, $13<<2]                        @ input[13]
 404 02e2 3144     	    add     r1, r6                                  @ a += input[13]
 405 02e4 3E6F     	    ldr     r6, [r7, $28<<2]                        @ t[28]
 406 02e6 3144     	    add     r1, r6                                  @ a += t[28]
 407 02e8 02EBF161 	    add.w   r1, r2, r1, ror #27                     @ a = b + ROTL(a,5)
 408              	
 409 02ec 22EA0305 	    bic.w   r5, r2, r3                              @ ~c & b
 410 02f0 01EA0306 	    and.w   r6, r1, r3                              @ c & a
 411 02f4 3543     	    orrs    r5, r6                                  @ G(a,b,c)
 412 02f6 2C44     	    add     r4, r5                                  @ d += G(a,b,c)
 413 02f8 8668     	    ldr     r6, [r0, $2<<2]                         @ input[2]
 414 02fa 3444     	    add     r4, r6                                  @ d += input[2]
 415 02fc 7E6F     	    ldr     r6, [r7, $29<<2]                        @ t[29]
 416 02fe 3444     	    add     r4, r6                                  @ d += t[29]
 417 0300 01EBF454 	    add.w   r4, r1, r4, ror #23                     @ d = a + ROTL(d,9)
 418              	
 419 0304 21EA0205 	    bic.w   r5, r1, r2                              @ ~b & a
 420 0308 04EA0206 	    and.w   r6, r4, r2                              @ b & d
 421 030c 3543     	    orrs    r5, r6                                  @ G(d,a,b)
 422 030e 2B44     	    add     r3, r5                                  @ c += G(d,a,b)
 423 0310 C669     	    ldr     r6, [r0, $7<<2]                         @ input[7]
 424 0312 3344     	    add     r3, r6                                  @ c += input[7]
 425 0314 BE6F     	    ldr     r6, [r7, $30<<2]                        @ t[30]
 426 0316 3344     	    add     r3, r6                                  @ c += t[30]
 427 0318 04EBB343 	    add.w   r3, r4, r3, ror #18                     @ c = d + ROTL(c,14)
 428              	
 429 031c 24EA0105 	    bic.w   r5, r4, r1                              @ ~a & d
 430 0320 03EA0106 	    and.w   r6, r3, r1                              @ a & c
 431 0324 3543     	    orrs    r5, r6                                  @ G(d,a,b)
 432 0326 2A44     	    add     r2, r5                                  @ b += G(c,d,a)
 433 0328 066B     	    ldr     r6, [r0, $12<<2]                        @ input[12]
 434 032a 3244     	    add     r2, r6                                  @ b += input[12]
 435 032c FE6F     	    ldr     r6, [r7, $31<<2]                        @ t[31]
 436 032e 3244     	    add     r2, r6                                  @ b += t[31]
 437 0330 03EB3232 	    add.w   r2, r3, r2, ror #12                     @ b = c + ROTL(b,20)
 438              	
 439              	# 16 rounds with H(x,y,z) = x ^ y ^ z
 440              	
 441 0334 82EA0305 	    eor.w   r5, r2, r3                              @ b ^ c
 442 0338 6540     	    eors    r5, r4                                  @ H(b,c,d)
 443 033a 2944     	    add     r1, r5                                  @ a += H(b,c,d)
 444 033c 4669     	    ldr     r6, [r0, $5<<2]                         @ input[5]
 445 033e 3144     	    add     r1, r6                                  @ a += input[5]
 446 0340 D7F88060 	    ldr     r6, [r7, $32<<2]                        @ t[32]
 447 0344 3144     	    add     r1, r6                                  @ a += t[32]
 448 0346 02EB3171 	    add.w   r1, r2, r1, ror #28                     @ a = b + ROTL(a,4)
 449              	
ARM GAS  src/asm/mmcau_md5_functions.s 			page 10


 450 034a 81EA0205 	    eor.w   r5, r1, r2                              @ a ^ b
 451 034e 5D40     	    eors    r5, r3                                  @ H(a,b,c)
 452 0350 2C44     	    add     r4, r5                                  @ d += H(a,b,c)
 453 0352 066A     	    ldr     r6, [r0, $8<<2]                         @ input[8]
 454 0354 3444     	    add     r4, r6                                  @ d += input[8]
 455 0356 D7F88460 	    ldr     r6, [r7, $33<<2]                        @ t[33]
 456 035a 3444     	    add     r4, r6                                  @ d += t[33]
 457 035c 01EB7454 	    add.w   r4, r1, r4, ror #21                     @ d = a + ROTL(d,11)
 458              	
 459 0360 84EA0105 	    eor.w   r5, r4, r1                              @ d ^ a
 460 0364 5540     	    eors    r5, r2                                  @ H(d,a,b)
 461 0366 2B44     	    add     r3, r5                                  @ c += H(d,a,b)
 462 0368 C66A     	    ldr     r6, [r0, $11<<2]                        @ input[11]
 463 036a 3344     	    add     r3, r6                                  @ c += input[11]
 464 036c D7F88860 	    ldr     r6, [r7, $34<<2]                        @ t[34]
 465 0370 3344     	    add     r3, r6                                  @ c += t[34]
 466 0372 04EB3343 	    add.w   r3, r4, r3, ror #16                     @ c = d + ROTL(c,16)
 467              	
 468 0376 83EA0405 	    eor.w   r5, r3, r4                              @ c ^ d
 469 037a 4D40     	    eors    r5, r1                                  @ H(c,d,a)
 470 037c 2A44     	    add     r2, r5                                  @ b += H(c,d,a)
 471 037e 866B     	    ldr     r6, [r0, $14<<2]                        @ input[14]
 472 0380 3244     	    add     r2, r6                                  @ b += input[14]
 473 0382 D7F88C60 	    ldr     r6, [r7, $35<<2]                        @ t[35]
 474 0386 3244     	    add     r2, r6                                  @ b += t[35]
 475 0388 03EB7222 	    add.w   r2, r3, r2, ror #9                      @ b = c + ROTL(d,23)
 476              	
 477 038c 82EA0305 	    eor.w   r5, r2, r3                              @ b ^ c
 478 0390 6540     	    eors    r5, r4                                  @ H(b,c,d)
 479 0392 2944     	    add     r1, r5                                  @ a += H(b,c,d)
 480 0394 4668     	    ldr     r6, [r0, $1<<2]                         @ input[1]
 481 0396 3144     	    add     r1, r6                                  @ a += input[1]
 482 0398 D7F89060 	    ldr     r6, [r7, $36<<2]                        @ t[36]
 483 039c 3144     	    add     r1, r6                                  @ a += t[36]
 484 039e 02EB3171 	    add.w   r1, r2, r1, ror #28                     @ a = b + ROTL(a,4)
 485              	
 486 03a2 81EA0205 	    eor.w   r5, r1, r2                              @ a ^ b
 487 03a6 5D40     	    eors    r5, r3                                  @ H(a,b,c)
 488 03a8 2C44     	    add     r4, r5                                  @ d += H(a,b,c)
 489 03aa 0669     	    ldr     r6, [r0, $4<<2]                         @ input[4]
 490 03ac 3444     	    add     r4, r6                                  @ d += input[4]
 491 03ae D7F89460 	    ldr     r6, [r7, $37<<2]                        @ t[37]
 492 03b2 3444     	    add     r4, r6                                  @ d += t[37]
 493 03b4 01EB7454 	    add.w   r4, r1, r4, ror #21                     @ d = a + ROTL(d,11)
 494              	
 495 03b8 84EA0105 	    eor.w   r5, r4, r1                              @ d ^ a
 496 03bc 5540     	    eors    r5, r2                                  @ H(d,a,b)
 497 03be 2B44     	    add     r3, r5                                  @ c += H(d,a,b)
 498 03c0 C669     	    ldr     r6, [r0, $7<<2]                         @ input[7]
 499 03c2 3344     	    add     r3, r6                                  @ c += input[7]
 500 03c4 D7F89860 	    ldr     r6, [r7, $38<<2]                        @ t[38]
 501 03c8 3344     	    add     r3, r6                                  @ c += t[38]
 502 03ca 04EB3343 	    add.w   r3, r4, r3, ror #16                     @ c = d + ROTL(c,16)
 503              	
 504 03ce 83EA0405 	    eor.w   r5, r3, r4                              @ c ^ d
 505 03d2 4D40     	    eors    r5, r1                                  @ H(c,d,a)
 506 03d4 2A44     	    add     r2, r5                                  @ b += H(c,d,a)
ARM GAS  src/asm/mmcau_md5_functions.s 			page 11


 507 03d6 866A     	    ldr     r6, [r0, $10<<2]                        @ input[10]
 508 03d8 3244     	    add     r2, r6                                  @ b += input[10]
 509 03da D7F89C60 	    ldr     r6, [r7, $39<<2]                        @ t[39]
 510 03de 3244     	    add     r2, r6                                  @ b += t[39]
 511 03e0 03EB7222 	    add.w   r2, r3, r2, ror #9                      @ b = c + ROTL(d,23)
 512              	
 513 03e4 82EA0305 	    eor.w   r5, r2, r3                              @ b ^ c
 514 03e8 6540     	    eors    r5, r4                                  @ H(b,c,d)
 515 03ea 2944     	    add     r1, r5                                  @ a += H(b,c,d)
 516 03ec 466B     	    ldr     r6, [r0, $13<<2]                        @ input[13]
 517 03ee 3144     	    add     r1, r6                                  @ a += input[13]
 518 03f0 D7F8A060 	    ldr     r6, [r7, $40<<2]                        @ t[40]
 519 03f4 3144     	    add     r1, r6                                  @ a += t[40]
 520 03f6 02EB3171 	    add.w   r1, r2, r1, ror #28                     @ a = b + ROTL(a,4)
 521              	
 522 03fa 81EA0205 	    eor.w   r5, r1, r2                              @ a ^ b
 523 03fe 5D40     	    eors    r5, r3                                  @ H(a,b,c)
 524 0400 2C44     	    add     r4, r5                                  @ d += H(a,b,c)
 525 0402 0668     	    ldr     r6, [r0]                                @ input[0]
 526 0404 3444     	    add     r4, r6                                  @ d += input[0]
 527 0406 D7F8A460 	    ldr     r6, [r7, $41<<2]                        @ t[41]
 528 040a 3444     	    add     r4, r6                                  @ d += t[41]
 529 040c 01EB7454 	    add.w   r4, r1, r4, ror #21                     @ d = a + ROTL(d,11)
 530              	
 531 0410 84EA0105 	    eor.w   r5, r4, r1                              @ d ^ a
 532 0414 5540     	    eors    r5, r2                                  @ H(d,a,b)
 533 0416 2B44     	    add     r3, r5                                  @ c += H(d,a,b)
 534 0418 C668     	    ldr     r6, [r0, $3<<2]                         @ input[3]
 535 041a 3344     	    add     r3, r6                                  @ c += input[3]
 536 041c D7F8A860 	    ldr     r6, [r7, $42<<2]                        @ t[42]
 537 0420 3344     	    add     r3, r6                                  @ c += t[42]
 538 0422 04EB3343 	    add.w   r3, r4, r3, ror #16                     @ c = d + ROTL(c,16)
 539              	
 540 0426 83EA0405 	    eor.w   r5, r3, r4                              @ c ^ d
 541 042a 4D40     	    eors    r5, r1                                  @ H(c,d,a)
 542 042c 2A44     	    add     r2, r5                                  @ b += H(c,d,a)
 543 042e 8669     	    ldr     r6, [r0, $6<<2]                         @ input[6]
 544 0430 3244     	    add     r2, r6                                  @ b += input[6]
 545 0432 D7F8AC60 	    ldr     r6, [r7, $43<<2]                        @ t[43]
 546 0436 3244     	    add     r2, r6                                  @ b += t[43]
 547 0438 03EB7222 	    add.w   r2, r3, r2, ror #9                      @ b = c + ROTL(d,23)
 548              	
 549 043c 82EA0305 	    eor.w   r5, r2, r3                              @ b ^ c
 550 0440 6540     	    eors    r5, r4                                  @ H(b,c,d)
 551 0442 2944     	    add     r1, r5                                  @ a += H(b,c,d)
 552 0444 466A     	    ldr     r6, [r0, $9<<2]                         @ input[9]
 553 0446 3144     	    add     r1, r6                                  @ a += input[9]
 554 0448 D7F8B060 	    ldr     r6, [r7, $44<<2]                        @ t[44]
 555 044c 3144     	    add     r1, r6                                  @ a += t[44]
 556 044e 02EB3171 	    add.w   r1, r2, r1, ror #28                     @ a = b + ROTL(a,4)
 557              	
 558 0452 81EA0205 	    eor.w   r5, r1, r2                              @ a ^ b
 559 0456 5D40     	    eors    r5, r3                                  @ H(a,b,c)
 560 0458 2C44     	    add     r4, r5                                  @ d += H(a,b,c)
 561 045a 066B     	    ldr     r6, [r0, $12<<2]                        @ input[12]
 562 045c 3444     	    add     r4, r6                                  @ d += input[12]
 563 045e D7F8B460 	    ldr     r6, [r7, $45<<2]                        @ t[45]
ARM GAS  src/asm/mmcau_md5_functions.s 			page 12


 564 0462 3444     	    add     r4, r6                                  @ d += t[45]
 565 0464 01EB7454 	    add.w   r4, r1, r4, ror #21                     @ d = a + ROTL(d,11)
 566              	
 567 0468 84EA0105 	    eor.w   r5, r4, r1                              @ d ^ a
 568 046c 5540     	    eors    r5, r2                                  @ H(d,a,b)
 569 046e 2B44     	    add     r3, r5                                  @ c += H(d,a,b)
 570 0470 C66B     	    ldr     r6, [r0, $15<<2]                        @ input[15]
 571 0472 3344     	    add     r3, r6                                  @ c += input[15]
 572 0474 D7F8B860 	    ldr     r6, [r7, $46<<2]                        @ t[46]
 573 0478 3344     	    add     r3, r6                                  @ c += t[46]
 574 047a 04EB3343 	    add.w   r3, r4, r3, ror #16                     @ c = d + ROTL(c,16)
 575              	
 576 047e 83EA0405 	    eor.w   r5, r3, r4                              @ c ^ d
 577 0482 4D40     	    eors    r5, r1                                  @ H(c,d,a)
 578 0484 2A44     	    add     r2, r5                                  @ b += H(c,d,a)
 579 0486 8668     	    ldr     r6, [r0, $2<<2]                         @ input[2]
 580 0488 3244     	    add     r2, r6                                  @ b += input[2]
 581 048a D7F8BC60 	    ldr     r6, [r7, $47<<2]                        @ t[47]
 582 048e 3244     	    add     r2, r6                                  @ b += t[47]
 583 0490 03EB7222 	    add.w   r2, r3, r2, ror #9                      @ b = c + ROTL(d,23)
 584              	
 585              	# 16 rounds with I(x,y,z) = y ^ (x | ~z)
 586              	
 587 0494 62EA0405 	    orn     r5, r2, r4                              @ b | ~d
 588 0498 5D40     	    eors    r5, r3                                  @ I(b,c,d)
 589 049a 2944     	    add     r1, r5                                  @ a += I(b,c,d)
 590 049c 0668     	    ldr     r6, [r0]                                @ input[0]
 591 049e 3144     	    add     r1, r6                                  @ a += input[0]
 592 04a0 D7F8C060 	    ldr     r6, [r7, $48<<2]                        @ t[48]
 593 04a4 3144     	    add     r1, r6                                  @ a += t[48]
 594 04a6 02EBB161 	    add.w   r1, r2, r1, ror #26                     @ a = b + ROTL(a,6)
 595              	
 596 04aa 61EA0305 	    orn     r5, r1, r3                              @ a | ~c
 597 04ae 5540     	    eors    r5, r2                                  @ I(a,b,c)
 598 04b0 2C44     	    add     r4, r5                                  @ d += I(a,b,c)
 599 04b2 C669     	    ldr     r6, [r0, $7<<2]                         @ input[7]
 600 04b4 3444     	    add     r4, r6                                  @ d += input[7]
 601 04b6 D7F8C460 	    ldr     r6, [r7, $49<<2]                        @ t[49]
 602 04ba 3444     	    add     r4, r6                                  @ d += t[49]
 603 04bc 01EBB454 	    add.w   r4, r1, r4, ror #22                     @ d = a + ROTL(d,10)
 604              	
 605 04c0 64EA0205 	    orn     r5, r4, r2                              @ d | ~b
 606 04c4 4D40     	    eors    r5, r1                                  @ I(d,a,b)
 607 04c6 2B44     	    add     r3, r5                                  @ c += I(d,a,b)
 608 04c8 866B     	    ldr     r6, [r0, $14<<2]                        @ input[14]
 609 04ca 3344     	    add     r3, r6                                  @ c += input[14]
 610 04cc D7F8C860 	    ldr     r6, [r7, $50<<2]                        @ t[50]
 611 04d0 3344     	    add     r3, r6                                  @ c += t[50]
 612 04d2 04EB7343 	    add.w   r3, r4, r3, ror #17                     @ c = d + ROTL(c,15)
 613              	
 614 04d6 63EA0105 	    orn     r5, r3, r1                              @ c | ~a
 615 04da 6540     	    eors    r5, r4                                  @ I(c,d,a)
 616 04dc 2A44     	    add     r2, r5                                  @ b += I(c,d,a)
 617 04de 4669     	    ldr     r6, [r0, $5<<2]                         @ input[5]
 618 04e0 3244     	    add     r2, r6                                  @ b += input[5]
 619 04e2 D7F8CC60 	    ldr     r6, [r7, $51<<2]                        @ t[51]
 620 04e6 3244     	    add     r2, r6                                  @ b += t[51]
ARM GAS  src/asm/mmcau_md5_functions.s 			page 13


 621 04e8 03EBF222 	    add.w   r2, r3, r2, ror #11                     @ b = c + ROTL(b,21)
 622              	
 623 04ec 62EA0405 	    orn     r5, r2, r4                              @ b | ~d
 624 04f0 5D40     	    eors    r5, r3                                  @ I(b,c,d)
 625 04f2 2944     	    add     r1, r5                                  @ a += I(b,c,d)
 626 04f4 066B     	    ldr     r6, [r0, $12<<2]                        @ input[12]
 627 04f6 3144     	    add     r1, r6                                  @ a += input[12]
 628 04f8 D7F8D060 	    ldr     r6, [r7, $52<<2]                        @ t[52]
 629 04fc 3144     	    add     r1, r6                                  @ a += t[52]
 630 04fe 02EBB161 	    add.w   r1, r2, r1, ror #26                     @ a = b + ROTL(a,6)
 631              	
 632 0502 61EA0305 	    orn     r5, r1, r3                              @ a | ~c
 633 0506 5540     	    eors    r5, r2                                  @ I(a,b,c)
 634 0508 2C44     	    add     r4, r5                                  @ d += I(a,b,c)
 635 050a C668     	    ldr     r6, [r0, $3<<2]                         @ input[3]
 636 050c 3444     	    add     r4, r6                                  @ d += input[3]
 637 050e D7F8D460 	    ldr     r6, [r7, $53<<2]                        @ t[53]
 638 0512 3444     	    add     r4, r6                                  @ d += t[53]
 639 0514 01EBB454 	    add.w   r4, r1, r4, ror #22                     @ d = a + ROTL(d,10)
 640              	
 641 0518 64EA0205 	    orn     r5, r4, r2                              @ d | ~b
 642 051c 4D40     	    eors    r5, r1                                  @ I(d,a,b)
 643 051e 2B44     	    add     r3, r5                                  @ c += I(d,a,b)
 644 0520 866A     	    ldr     r6, [r0, $10<<2]                        @ input[10]
 645 0522 3344     	    add     r3, r6                                  @ c += input[10]
 646 0524 D7F8D860 	    ldr     r6, [r7, $54<<2]                        @ t[54]
 647 0528 3344     	    add     r3, r6                                  @ c += t[54]
 648 052a 04EB7343 	    add.w   r3, r4, r3, ror #17                     @ c = d + ROTL(c,15)
 649              	
 650 052e 63EA0105 	    orn     r5, r3, r1                              @ c | ~a
 651 0532 6540     	    eors    r5, r4                                  @ I(c,d,a)
 652 0534 2A44     	    add     r2, r5                                  @ b += I(c,d,a)
 653 0536 4668     	    ldr     r6, [r0, $1<<2]                         @ input[1]
 654 0538 3244     	    add     r2, r6                                  @ b += input[1]
 655 053a D7F8DC60 	    ldr     r6, [r7, $55<<2]                        @ t[55]
 656 053e 3244     	    add     r2, r6                                  @ b += t[55]
 657 0540 03EBF222 	    add.w   r2, r3, r2, ror #11                     @ b = c + ROTL(b,21)
 658              	
 659 0544 62EA0405 	    orn     r5, r2, r4                              @ b | ~d
 660 0548 5D40     	    eors    r5, r3                                  @ I(b,c,d)
 661 054a 2944     	    add     r1, r5                                  @ a += I(b,c,d)
 662 054c 066A     	    ldr     r6, [r0, $8<<2]                         @ input[8]
 663 054e 3144     	    add     r1, r6                                  @ a += input[8]
 664 0550 D7F8E060 	    ldr     r6, [r7, $56<<2]                        @ t[56]
 665 0554 3144     	    add     r1, r6                                  @ a += t[56]
 666 0556 02EBB161 	    add.w   r1, r2, r1, ror #26                     @ a = b + ROTL(a,6)
 667              	
 668 055a 61EA0305 	    orn     r5, r1, r3                              @ a | ~c
 669 055e 5540     	    eors    r5, r2                                  @ I(a,b,c)
 670 0560 2C44     	    add     r4, r5                                  @ d += I(a,b,c)
 671 0562 C66B     	    ldr     r6, [r0, $15<<2]                        @ input[15]
 672 0564 3444     	    add     r4, r6                                  @ d += input[15]
 673 0566 D7F8E460 	    ldr     r6, [r7, $57<<2]                        @ t[57]
 674 056a 3444     	    add     r4, r6                                  @ d += t[57]
 675 056c 01EBB454 	    add.w   r4, r1, r4, ror #22                     @ d = a + ROTL(d,10)
 676              	
 677 0570 64EA0205 	    orn     r5, r4, r2                              @ d | ~b
ARM GAS  src/asm/mmcau_md5_functions.s 			page 14


 678 0574 4D40     	    eors    r5, r1                                  @ I(d,a,b)
 679 0576 2B44     	    add     r3, r5                                  @ c += I(d,a,b)
 680 0578 8669     	    ldr     r6, [r0, $6<<2]                         @ input[6]
 681 057a 3344     	    add     r3, r6                                  @ c += input[6]
 682 057c D7F8E860 	    ldr     r6, [r7, $58<<2]                        @ t[58]
 683 0580 3344     	    add     r3, r6                                  @ c += t[58]
 684 0582 04EB7343 	    add.w   r3, r4, r3, ror #17                     @ c = d + ROTL(c,15)
 685              	
 686 0586 63EA0105 	    orn     r5, r3, r1                              @ c | ~a
 687 058a 6540     	    eors    r5, r4                                  @ I(c,d,a)
 688 058c 2A44     	    add     r2, r5                                  @ b += I(c,d,a)
 689 058e 466B     	    ldr     r6, [r0, $13<<2]                        @ input[13]
 690 0590 3244     	    add     r2, r6                                  @ b += input[13]
 691 0592 D7F8EC60 	    ldr     r6, [r7, $59<<2]                        @ t[59]
 692 0596 3244     	    add     r2, r6                                  @ b += t[59]
 693 0598 03EBF222 	    add.w   r2, r3, r2, ror #11                     @ b = c + ROTL(b,21)
 694              	
 695 059c 62EA0405 	    orn     r5, r2, r4                              @ b | ~d
 696 05a0 5D40     	    eors    r5, r3                                  @ I(b,c,d)
 697 05a2 2944     	    add     r1, r5                                  @ a += I(b,c,d)
 698 05a4 0669     	    ldr     r6, [r0, $4<<2]                         @ input[4]
 699 05a6 3144     	    add     r1, r6                                  @ a += input[4]
 700 05a8 D7F8F060 	    ldr     r6, [r7, $60<<2]                        @ t[60]
 701 05ac 3144     	    add     r1, r6                                  @ a += t[60]
 702 05ae 02EBB161 	    add.w   r1, r2, r1, ror #26                     @ a = b + ROTL(a,6)
 703              	
 704 05b2 61EA0305 	    orn     r5, r1, r3                              @ a | ~c
 705 05b6 5540     	    eors    r5, r2                                  @ I(a,b,c)
 706 05b8 2C44     	    add     r4, r5                                  @ d += I(a,b,c)
 707 05ba C66A     	    ldr     r6, [r0, $11<<2]                        @ input[11]
 708 05bc 3444     	    add     r4, r6                                  @ d += input[11]
 709 05be D7F8F460 	    ldr     r6, [r7, $61<<2]                        @ t[61]
 710 05c2 3444     	    add     r4, r6                                  @ d += t[61]
 711 05c4 01EBB454 	    add.w   r4, r1, r4, ror #22                     @ d = a + ROTL(d,10)
 712              	
 713 05c8 64EA0205 	    orn     r5, r4, r2                              @ d | ~b
 714 05cc 4D40     	    eors    r5, r1                                  @ I(d,a,b)
 715 05ce 2B44     	    add     r3, r5                                  @ c += I(d,a,b)
 716 05d0 8668     	    ldr     r6, [r0, $2<<2]                         @ input[2]
 717 05d2 3344     	    add     r3, r6                                  @ c += input[2]
 718 05d4 D7F8F860 	    ldr     r6, [r7, $62<<2]                        @ t[62]
 719 05d8 3344     	    add     r3, r6                                  @ c += t[62]
 720 05da 04EB7343 	    add.w   r3, r4, r3, ror #17                     @ c = d + ROTL(c,15)
 721              	
 722 05de 63EA0105 	    orn     r5, r3, r1                              @ c | ~a
 723 05e2 6540     	    eors    r5, r4                                  @ I(c,d,a)
 724 05e4 2A44     	    add     r2, r5                                  @ b += I(c,d,a)
 725 05e6 466A     	    ldr     r6, [r0, $9<<2]                         @ input[9]
 726 05e8 3244     	    add     r2, r6                                  @ b += input[9]
 727 05ea D7F8FC60 	    ldr     r6, [r7, $63<<2]                        @ t[63]
 728 05ee 3244     	    add     r2, r6                                  @ b += t[63]
 729 05f0 03EBF222 	    add.w   r2, r3, r2, ror #11                     @ b = c + ROTL(b,21)
 730              	
 731 05f4 D8F80050 	    ldr     r5, [r8]                                @ get original md5_stats[0]
 732 05f8 2944     	    add     r1, r5
 733 05fa D8F80450 	    ldr     r5, [r8, $1<<2]                         @ get original md5_stats[1]
 734 05fe 2A44     	    add     r2, r5
ARM GAS  src/asm/mmcau_md5_functions.s 			page 15


 735 0600 D8F80850 	    ldr     r5, [r8, $2<<2]                         @ get original md5_stats[2]
 736 0604 2B44     	    add     r3, r5
 737 0606 D8F80C50 	    ldr     r5, [r8, $3<<2]                         @ get original md5_stats[3]
 738 060a 2C44     	    add     r4, r5
 739              	
 740 060c 88E81E00 	    stmia   r8, {r1-r4}                             @ store new md5_state[0-3]
 741              	
 742 0610 00F14000 	    add     r0, $64                                 @ input ptr -> next block
 743 0614 B9F10109 	    subs    r9, $1                                  @ decrement num_blks
 744 0618 7FF40CAD 	    bne     next_blk
 745              	
 746 061c BDE8F003 	    ldmia   sp!, {r4-r9}                            @ restore regs and return
 747 0620 7047     	    bx      lr
 748              	
 749              	
 750              	#*******************************************************************************
 751              	#*******************************************************************************
 752              	#
 753              	# MD5: Updates MD5 state variables for one or more input message blocks
 754              	#   arguments
 755              	#           *msg_data   pointer to start of input message data
 756              	#           num_blks    number of 512-bit blocks to process
 757              	#           *md5_state  pointer to 120-bit block of MD5 state variables:
 758              	#                           a,b,c,d
 759              	#
 760              	#   calling convention
 761              	#   void    mmcau_md5_update  (const unsigned char *msg_data,
 762              	#                              const int            num_blks,
 763              	#                              unsigned char       *md5_state)
 764              	
 765              	
 766              	    .global _mmcau_md5_update
 767              	    .global mmcau_md5_update
 768              	    .type   mmcau_md5_update, %function
 769 0622 00BFAFF3 	    .align  4
 769      0080AFF3 
 769      0080AFF3 
 769      0080
 770              	
 771              	_mmcau_md5_update:
 772              	mmcau_md5_update:
 773              	
 774 0630 F0B5     	    push    {r4-r7,lr}
 775              	
 776 0632 40F20004 	    movw    r4, #:lower16:md5_initial_h             @ r4 -> initial data
 777 0636 C0F20004 	    movt    r4, #:upper16:md5_initial_h
 778              	
 779              	# copy initial data into hash output buffer
 780 063a F0CC     	    ldmia   r4, {r4-r7}                             @ get md5[0-3]
 781 063c 82E8F000 	    stmia   r2, {r4-r7}                             @ copy to md5_state[0-3]
 782              	
 783 0640 FFF7FEFF 	    bl      mmcau_md5_hash_n                        @ call hash_n routine
 784              	
 785 0644 F0BD     	    pop     {r4-r7,pc}
 786              	
 787              	#*******************************************************************************
 788              	#*******************************************************************************
ARM GAS  src/asm/mmcau_md5_functions.s 			page 16


 789              	#
 790              	# MD5: Updates MD5 state variables for one input message block
 791              	#
 792              	#   arguments
 793              	#           *msg_data   pointer to start of input message data
 794              	#           *md5_state  pointer to 128-bit block of MD5 state variables: a,b,c,d
 795              	#
 796              	#   calling convention
 797              	#   void    mmucau_md5_hash (const unsigned char *msg_data,
 798              	#                            unsigned char       *md5_state)
 799              	
 800              	    .global _mmcau_md5_hash
 801              	    .global mmcau_md5_hash
 802              	    .type   mmcau_md5_hash, %function
 803 0646 00BFAFF3 	    .align  4
 803      0080AFF3 
 803      0080
 804              	
 805              	_mmcau_md5_hash:
 806              	mmcau_md5_hash:
 807              	
 808 0650 0A46     	    mov    r2, r1                                   @ arg1 (*md5_state) to arg2
 809 0652 4FF00101 	    mov    r1, $1                                   @ num_blks = 1
 810 0656 FEE7     	    b      mmcau_md5_hash_n                         @ call hash_n routine
 811              	
 812              	
 813              	#*******************************************************************************
 814              	
 815 0658 AFF30080 	    .data
 815      AFF30080 
 816              	    .type   md5_initial_h, %object
 817              	    .align  4
 818              	
 819              	md5_initial_h:
 820 0000 01234567 	    .word   0x67452301                              @ initial a
 821 0004 89ABCDEF 	    .word   0xefcdab89                              @ initial b
 822 0008 FEDCBA98 	    .word   0x98badcfe                              @ initial c
 823 000c 76543210 	    .word   0x10325476                              @ initial d
 824              	
 825              	    .type   md5_t, %object
 826              	    .align  4
 827              	md5_t:
 828 0010 78A46AD7 	    .word   0xd76aa478
 829 0014 56B7C7E8 	    .word   0xe8c7b756
 830 0018 DB702024 	    .word   0x242070db
 831 001c EECEBDC1 	    .word   0xc1bdceee
 832 0020 AF0F7CF5 	    .word   0xf57c0faf
 833 0024 2AC68747 	    .word   0x4787c62a
 834 0028 134630A8 	    .word   0xa8304613
 835 002c 019546FD 	    .word   0xfd469501
 836 0030 D8988069 	    .word   0x698098d8
 837 0034 AFF7448B 	    .word   0x8b44f7af
 838 0038 B15BFFFF 	    .word   0xffff5bb1
 839 003c BED75C89 	    .word   0x895cd7be
 840 0040 2211906B 	    .word   0x6b901122
 841 0044 937198FD 	    .word   0xfd987193
 842 0048 8E4379A6 	    .word   0xa679438e
ARM GAS  src/asm/mmcau_md5_functions.s 			page 17


 843 004c 2108B449 	    .word   0x49b40821
 844 0050 62251EF6 	    .word   0xf61e2562
 845 0054 40B340C0 	    .word   0xc040b340
 846 0058 515A5E26 	    .word   0x265e5a51
 847 005c AAC7B6E9 	    .word   0xe9b6c7aa
 848 0060 5D102FD6 	    .word   0xd62f105d
 849 0064 53144402 	    .word   0x02441453
 850 0068 81E6A1D8 	    .word   0xd8a1e681
 851 006c C8FBD3E7 	    .word   0xe7d3fbc8
 852 0070 E6CDE121 	    .word   0x21e1cde6
 853 0074 D60737C3 	    .word   0xc33707d6
 854 0078 870DD5F4 	    .word   0xf4d50d87
 855 007c ED145A45 	    .word   0x455a14ed
 856 0080 05E9E3A9 	    .word   0xa9e3e905
 857 0084 F8A3EFFC 	    .word   0xfcefa3f8
 858 0088 D9026F67 	    .word   0x676f02d9
 859 008c 8A4C2A8D 	    .word   0x8d2a4c8a
 860 0090 4239FAFF 	    .word   0xfffa3942
 861 0094 81F67187 	    .word   0x8771f681
 862 0098 22619D6D 	    .word   0x6d9d6122
 863 009c 0C38E5FD 	    .word   0xfde5380c
 864 00a0 44EABEA4 	    .word   0xa4beea44
 865 00a4 A9CFDE4B 	    .word   0x4bdecfa9
 866 00a8 604BBBF6 	    .word   0xf6bb4b60
 867 00ac 70BCBFBE 	    .word   0xbebfbc70
 868 00b0 C67E9B28 	    .word   0x289b7ec6
 869 00b4 FA27A1EA 	    .word   0xeaa127fa
 870 00b8 8530EFD4 	    .word   0xd4ef3085
 871 00bc 051D8804 	    .word   0x04881d05
 872 00c0 39D0D4D9 	    .word   0xd9d4d039
 873 00c4 E599DBE6 	    .word   0xe6db99e5
 874 00c8 F87CA21F 	    .word   0x1fa27cf8
 875 00cc 6556ACC4 	    .word   0xc4ac5665
 876 00d0 442229F4 	    .word   0xf4292244
 877 00d4 97FF2A43 	    .word   0x432aff97
 878 00d8 A72394AB 	    .word   0xab9423a7
 879 00dc 39A093FC 	    .word   0xfc93a039
 880 00e0 C3595B65 	    .word   0x655b59c3
 881 00e4 92CC0C8F 	    .word   0x8f0ccc92
 882 00e8 7DF4EFFF 	    .word   0xffeff47d
 883 00ec D15D8485 	    .word   0x85845dd1
 884 00f0 4F7EA86F 	    .word   0x6fa87e4f
 885 00f4 E0E62CFE 	    .word   0xfe2ce6e0
 886 00f8 144301A3 	    .word   0xa3014314
 887 00fc A111084E 	    .word   0x4e0811a1
 888 0100 827E53F7 	    .word   0xf7537e82
 889 0104 35F23ABD 	    .word   0xbd3af235
 890 0108 BBD2D72A 	    .word   0x2ad7d2bb
 891 010c 91D386EB 	    .word   0xeb86d391
