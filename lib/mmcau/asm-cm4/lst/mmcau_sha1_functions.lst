ARM GAS  src/asm/mmcau_sha1_functions.s 			page 1


   1              	#*******************************************************************************
   2              	#*******************************************************************************
   3              	#
   4              	# Copyright (c) Freescale Semiconductor, Inc 2011.
   5              	#
   6              	# FILE NAME      : mmcau_sha1_functions.s
   7              	# VERSION        : $Id: mmcau_sha1_functions.s.rca 1.5 Thu Nov 21 14:17:37 2013 b40907 Experimental
   8              	# TYPE           : Source Cortex-Mx assembly library code
   9              	# DEPARTMENT     : MSG R&D Core and Platforms
  10              	# AUTHOR         : David Schimke
  11              	# AUTHOR'S EMAIL : David.Schimke@freescale.com
  12              	# -----------------------------------------------------------------------------
  13              	# Release history
  14              	# VERSION  Date       AUTHOR           DESCRIPTION
  15              	#          08-2010    David Schimke    Initial Release
  16              	#          12-2010    David Schimke    Remove "global" on data objects
  17              	#          01-2011    David Schimke    Header added
  18              	#          11-2013    Teejay Ciancio   Cleanup
  19              	#
  20              	#*******************************************************************************
  21              	#*******************************************************************************
  22              	
  23              	    .include "cau2_defines.hdr"
   1              	#ifndef _MMCAU_H_
   2              	#define _MMCAU_H_
   3              	
   4              	    .equ    TL,0
   5              	    .equ    TS,0
   6              	    .equ    CASR,0
   7              	    .equ    CAA,1
   8              	    .equ    CA0,2
   9              	    .equ    CA1,3
  10              	    .equ    CA2,4
  11              	    .equ    CA3,5
  12              	    .equ    CA4,6
  13              	    .equ    CA5,7
  14              	    .equ    CA6,8
  15              	    .equ    CA7,9
  16              	    .equ    CA8,10
  17              	    .equ    CNOP,0x000
  18              	    .equ    LDR,0x010
  19              	    .equ    STR,0x020
  20              	    .equ    ADR,0x030
  21              	    .equ    RADR,0x040
  22              	    .equ    ADRA,0x050
  23              	    .equ    XOR,0x060
  24              	    .equ    ROTL,0x070
  25              	    .equ    MVRA,0x080
  26              	    .equ    MVAR,0x090
  27              	    .equ    AESS,0x0a0
  28              	    .equ    AESIS,0x0b0
  29              	    .equ    AESC,0x0c0
  30              	    .equ    AESIC,0x0d0
  31              	    .equ    AESR,0x0e0
  32              	    .equ    AESIR,0x0f0
  33              	    .equ    DESR,0x100
  34              	    .equ    DESK,0x110
ARM GAS  src/asm/mmcau_sha1_functions.s 			page 2


  35              	    .equ    HASH,0x120
  36              	    .equ    SHS,0x130
  37              	    .equ    MDS,0x140
  38              	    .equ    SHS2,0x150
  39              	    .equ    ILL,0x1f0
  40              	    .equ    IP,8
  41              	    .equ    FP,4
  42              	    .equ    DC,1
  43              	    .equ    CP,2
  44              	    .equ    KSL1,0
  45              	    .equ    KSL2,1
  46              	    .equ    KSR1,2
  47              	    .equ    KSR2,3
  48              	    .equ    HFF,0
  49              	    .equ    HFG,1
  50              	    .equ    HFH,2
  51              	    .equ    HFI,3
  52              	    .equ    HFP,2
  53              	    .equ    HFC,4
  54              	    .equ    HFM,5
  55              	    .equ    HF2C,6
  56              	    .equ    HF2M,7
  57              	    .equ    HF2S,8
  58              	    .equ    HF2T,9
  59              	    .equ    HF2U,10
  60              	    .equ    HF2V,11
  61              	
  62              	#endif
  24              	    .equ    MMCAU_PPB_DIRECT,0xe0081000
  25              	    .equ    MMCAU_PPB_INDIRECT,0xe0081800
  26              	    .equ    MMCAU_1_CMD, 0x80000000
  27              	    .equ    MMCAU_2_CMDS, 0x80100000
  28              	
  29              	    .syntax unified
  30              	
  31              	#*******************************************************************************
  32              	#*******************************************************************************
  33              	#
  34              	# SHA1: Initializes the SHA1 state variables
  35              	#   arguments
  36              	#           *sha1_state pointer to 160-bit block of SHA1 state variables:
  37              	#                           a,b,c,d,e
  38              	#
  39              	#   calling convention
  40              	#   void    mmcau_sha1_initialize_output (const unsigned int *sha1_state)
  41              	
  42              	    .global _mmcau_sha1_initialize_output
  43              	    .global mmcau_sha1_initialize_output
  44              	    .type   mmcau_sha1_initialize_output, %function
  45              	    .align  4
  46              	
  47              	_mmcau_sha1_initialize_output:
  48              	mmcau_sha1_initialize_output:
  49              	
  50 0000 2DE93000 	    stmdb   sp!, {r4-r5}                            @ save registers
  51              	
  52 0004 40F20001 	    movw    r1, #:lower16:sha1_initial_h            @ r1 -> initial data
ARM GAS  src/asm/mmcau_sha1_functions.s 			page 3


  53 0008 C0F20001 	    movt    r1, #:upper16:sha1_initial_h
  54              	
  55              	# copy initial data into hash output buffer
  56 000c 3EC9     	    ldmia   r1, {r1-r5}                             @ get sha1[0-4]
  57 000e 80E83E00 	    stmia   r0, {r1-r5}                             @ copy to sha1_state[0-4]
  58              	
  59 0012 30BC     	    ldmia   sp!, {r4-r5}                            @ restore registers
  60 0014 7047     	    bx      lr
  61              	
  62              	
  63              	#*******************************************************************************
  64              	#*******************************************************************************
  65              	#
  66              	# SHA1: Perform the hash and generate SHA1 state variables for one or more
  67              	#       input message blocks
  68              	#
  69              	#   arguments
  70              	#           *msg_data   pointer to start of input message data
  71              	#           num_blks    number of 512-bit blocks to process
  72              	#           *sha1_state pointer to 160-bit block of SHA1 state variables:
  73              	#                           a,b,c,d,e
  74              	#
  75              	#   NOTE    Input message and digest output blocks must not overlap
  76              	#
  77              	#   calling convention
  78              	#   void    mmcau_sha1_hash_n (const unsigned char *msg_data,
  79              	#                              const int            num_blks,
  80              	#                              unsigned int        *sha1_state)
  81              	
  82              	    .global _mmcau_sha1_hash_n
  83              	    .global mmcau_sha1_hash_n
  84              	    .type   mmcau_sha1_hash_n, %function
  85 0016 00BFAFF3 	    .align  4
  85      0080AFF3 
  85      0080
  86              	
  87              	_mmcau_sha1_hash_n:
  88              	mmcau_sha1_hash_n:
  89              	
  90              	#  register allocation
  91              	# --------------------
  92              	#  r0      = scratch / input pointer (arg0)
  93              	#  r1      = scratch / input num_blks (arg1)
  94              	#  r2      = scratch / output pointer (arg2)
  95              	#  r3      = scratch
  96              	#  r4      = scratch
  97              	#  r5      = scratch / mmcau_1_cmd(SHS)
  98              	#  r6      = scratch / mmcau_2_cmds(HASH+HFC,ADRA+CA4)
  99              	#  r7      = scratch
 100              	#  r8      = scratch / mmcau_2_cmds(HASH+HFP,ADRA+CA4)
 101              	#  r9      = scratch / mmcau_2_cmds(HASH+HFM,ADRA+CA4)
 102              	# r10 (sl) = scratch / pointer to sha1_k
 103              	# r11 (fp) = pointer to MMCAU_PPB_DIRECT
 104              	
 105 0020 2DE9F00F 	    stmdb   sp!, {r4-fp}                            @ save registers on stack
 106              	
 107 0024 E0B0     	    sub     sp, $384                                @ reserve stack space
ARM GAS  src/asm/mmcau_sha1_functions.s 			page 4


 108              	
 109 0026 41F2000B 	    movw    fp, #:lower16:MMCAU_PPB_DIRECT          @ fp -> MMCAU_PPB_DIRECT
 110 002a CEF2080B 	    movt    fp, #:upper16:MMCAU_PPB_DIRECT
 111              	
 112 002e 0BF64808 	    add     r8, fp, $0x800+((LDR+CA0)<<2)           @ r8 = INDIRECT (LDR+CA0)
 113 0032 0DF11C09 	    add     r9, sp, $28                             @ r9 -> sha1_state (stack)
 114              	
 115              	# initialize the CAU data registers with the current contents of sha1_state[]
 116 0036 92E8F800 	    ldmia   r2, {r3-r7}                             @ get sha1_state[0-4]
 117 003a 88E8F800 	    stmia   r8, {r3-r7}                             @ load CA0-CA4
 118              	
 119 003e 00BF     	    .align  2
 120              	next_blk:
 121 0040 89E8F800 	    stmia   r9, {r3-r7}                             @ copy sha1_state to stack
 122              	
 123 0044 4FEAF365 	    ror     r5, r3, $27                             @ rotate CA0 by 5
 124 0048 CBF84458 	    str     r5, [fp, $0x800+((LDR+CAA)<<2)]         @ load into CAA
 125              	
 126 004c 40F20005 	    movw    r5, #:lower16:MMCAU_1_CMD+(SHS)<<22
 127 0050 4BF20006 	    movw    r6, #:lower16:MMCAU_2_CMDS+(HASH+HFC)<<22+(ADRA+CA4)<<11
 128 0054 40F2000A 	    movw    sl, #:lower16:sha1_k
 129 0058 CCF60045 	    movt    r5, #:upper16:MMCAU_1_CMD+(SHS)<<22
 130 005c CCF61216 	    movt    r6, #:upper16:MMCAU_2_CMDS+(HASH+HFC)<<22+(ADRA+CA4)<<11
 131 0060 C0F2000A 	    movt    sl, #:upper16:sha1_k
 132              	
 133              	# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
 134              	#   for (j = 0; j < 16; j++, k++)
 135              	#   {
 136              	#       w[i] = byterev(msg_data[k]);                           // m[k] -> w[i]
 137              	#       *(MMCAU_PPB_DIRECT) = mmcau_2_cmds(HASH+HFC,ADRA+CA4); // +Ch(b,c,d),+e
 138              	#       *(MMCAU_PPB_INDIRECT + (ADR+CAA))  = sha1_k[0];        // add k[0]
 139              	#       *(MMCAU_PPB_INDIRECT + (ADR+CAA))  = w[i++];           // add w[i]
 140              	#       *(MMCAU_PPB_DIRECT) = mmcau_1_cmd(SHS);                // shift regs
 141              	#   }
 142              	# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
 143              	
 144              	# -- (loop unrolled)
 145              	
 146 0064 5AF8047B 	    ldr     r7, [sl], $4                            @ get k[0]; sl++
 147              	
 148 0068 50F8043B 	    ldr     r3, [r0], $4                            @ r3 = input[0]
 149 006c 1CBA     	    rev     r4, r3                                  @ byte reverse
 150 006e CBF80060 	    str     r6, [fp]                                @ +Ch(b,c,d), +e
 151 0072 1094     	    str     r4, [sp, $64]                           @ w[0] = m[0]
 152 0074 3C44     	    add     r4, r7                                  @ add k[0] to w[0]
 153 0076 CBF8C448 	    str     r4, [fp, $0x800+((ADR+CAA)<<2)]         @ add sum to CAA
 154 007a CBF80050 	    str     r5, [fp]                                @ shift registers
 155              	
 156 007e 50F8043B 	    ldr     r3, [r0], $4                            @ r3 = input[1]
 157 0082 1CBA     	    rev     r4, r3                                  @ byte reverse
 158 0084 CBF80060 	    str     r6, [fp]                                @ +Ch(b,c,d), +e
 159 0088 1194     	    str     r4, [sp, $68]                           @ w[1] = m[1]
 160 008a 3C44     	    add     r4, r7                                  @ add k[0] to w[1]
 161 008c CBF8C448 	    str     r4, [fp, $0x800+((ADR+CAA)<<2)]         @ add sum to CAA
 162 0090 CBF80050 	    str     r5, [fp]                                @ shift registers
 163              	
 164 0094 50F8043B 	    ldr     r3, [r0], $4                            @ r3 = input[2]
ARM GAS  src/asm/mmcau_sha1_functions.s 			page 5


 165 0098 1CBA     	    rev     r4, r3                                  @ byte reverse
 166 009a CBF80060 	    str     r6, [fp]                                @ +Ch(b,c,d), +e
 167 009e 1294     	    str     r4, [sp, $72]                           @ w[2] = m[2]
 168 00a0 3C44     	    add     r4, r7                                  @ add k[0] to w[2]
 169 00a2 CBF8C448 	    str     r4, [fp, $0x800+((ADR+CAA)<<2)]         @ add sum to CAA
 170 00a6 CBF80050 	    str     r5, [fp]                                @ shift registers
 171              	
 172 00aa 50F8043B 	    ldr     r3, [r0], $4                            @ r3 = input[3]
 173 00ae 1CBA     	    rev     r4, r3                                  @ byte reverse
 174 00b0 CBF80060 	    str     r6, [fp]                                @ +Ch(b,c,d), +e
 175 00b4 1394     	    str     r4, [sp, $76]                           @ w[3] = m[3]
 176 00b6 3C44     	    add     r4, r7                                  @ add k[0] to w[3]
 177 00b8 CBF8C448 	    str     r4, [fp, $0x800+((ADR+CAA)<<2)]         @ add sum to CAA
 178 00bc CBF80050 	    str     r5, [fp]                                @ shift registers
 179              	
 180 00c0 50F8043B 	    ldr     r3, [r0], $4                            @ r3 = input[4]
 181 00c4 1CBA     	    rev     r4, r3                                  @ byte reverse
 182 00c6 CBF80060 	    str     r6, [fp]                                @ +Ch(b,c,d), +e
 183 00ca 1494     	    str     r4, [sp, $80]                           @ w[4] = m[4]
 184 00cc 3C44     	    add     r4, r7                                  @ add k[0] to w[4]
 185 00ce CBF8C448 	    str     r4, [fp, $0x800+((ADR+CAA)<<2)]         @ add sum to CAA
 186 00d2 CBF80050 	    str     r5, [fp]                                @ shift registers
 187              	
 188 00d6 50F8043B 	    ldr     r3, [r0], $4                            @ r3 = input[5]
 189 00da 1CBA     	    rev     r4, r3                                  @ byte reverse
 190 00dc CBF80060 	    str     r6, [fp]                                @ +Ch(b,c,d), +e
 191 00e0 1594     	    str     r4, [sp, $84]                           @ w[5] = m[5]
 192 00e2 3C44     	    add     r4, r7                                  @ add k[0] to w[5]
 193 00e4 CBF8C448 	    str     r4, [fp, $0x800+((ADR+CAA)<<2)]         @ add sum to CAA
 194 00e8 CBF80050 	    str     r5, [fp]                                @ shift registers
 195              	
 196 00ec 50F8043B 	    ldr     r3, [r0], $4                            @ r3 = input[6]
 197 00f0 1CBA     	    rev     r4, r3                                  @ byte reverse
 198 00f2 CBF80060 	    str     r6, [fp]                                @ +Ch(b,c,d), +e
 199 00f6 1694     	    str     r4, [sp, $88]                           @ w[6] = m[6]
 200 00f8 3C44     	    add     r4, r7                                  @ add k[0] to w[6]
 201 00fa CBF8C448 	    str     r4, [fp, $0x800+((ADR+CAA)<<2)]         @ add sum to CAA
 202 00fe CBF80050 	    str     r5, [fp]                                @ shift registers
 203              	
 204 0102 50F8043B 	    ldr     r3, [r0], $4                            @ r3 = input[7]
 205 0106 1CBA     	    rev     r4, r3                                  @ byte reverse
 206 0108 CBF80060 	    str     r6, [fp]                                @ +Ch(b,c,d), +e
 207 010c 1794     	    str     r4, [sp, $92]                           @ w[7] = m[7]
 208 010e 3C44     	    add     r4, r7                                  @ add k[0] to w[7]
 209 0110 CBF8C448 	    str     r4, [fp, $0x800+((ADR+CAA)<<2)]         @ add sum to CAA
 210 0114 CBF80050 	    str     r5, [fp]                                @ shift registers
 211              	
 212 0118 50F8043B 	    ldr     r3, [r0], $4                            @ r3 = input[8]
 213 011c 1CBA     	    rev     r4, r3                                  @ byte reverse
 214 011e CBF80060 	    str     r6, [fp]                                @ +Ch(b,c,d), +e
 215 0122 1894     	    str     r4, [sp, $96]                           @ w[8] = m[8]
 216 0124 3C44     	    add     r4, r7                                  @ add k[0] to w[8]
 217 0126 CBF8C448 	    str     r4, [fp, $0x800+((ADR+CAA)<<2)]         @ add sum to CAA
 218 012a CBF80050 	    str     r5, [fp]                                @ shift registers
 219              	
 220 012e 50F8043B 	    ldr     r3, [r0], $4                            @ r3 = input[9]
 221 0132 1CBA     	    rev     r4, r3                                  @ byte reverse
ARM GAS  src/asm/mmcau_sha1_functions.s 			page 6


 222 0134 CBF80060 	    str     r6, [fp]                                @ +Ch(b,c,d), +e
 223 0138 1994     	    str     r4, [sp, $100]                          @ w[9] = m[9]
 224 013a 3C44     	    add     r4, r7                                  @ add k[0] to w[9]
 225 013c CBF8C448 	    str     r4, [fp, $0x800+((ADR+CAA)<<2)]         @ add sum to CAA
 226 0140 CBF80050 	    str     r5, [fp]                                @ shift registers
 227              	
 228 0144 50F8043B 	    ldr     r3, [r0], $4                            @ r3 = input[10]
 229 0148 1CBA     	    rev     r4, r3                                  @ byte reverse
 230 014a CBF80060 	    str     r6, [fp]                                @ +Ch(b,c,d), +e
 231 014e 1A94     	    str     r4, [sp, $104]                          @ w[10] = m[10]
 232 0150 3C44     	    add     r4, r7                                  @ add k[0] to w[10]
 233 0152 CBF8C448 	    str     r4, [fp, $0x800+((ADR+CAA)<<2)]         @ add sum to CAA
 234 0156 CBF80050 	    str     r5, [fp]                                @ shift registers
 235              	
 236 015a 50F8043B 	    ldr     r3, [r0], $4                            @ r3 = input[11]
 237 015e 1CBA     	    rev     r4, r3                                  @ byte reverse
 238 0160 CBF80060 	    str     r6, [fp]                                @ +Ch(b,c,d), +e
 239 0164 1B94     	    str     r4, [sp, $108]                          @ w[11] = m[11]
 240 0166 3C44     	    add     r4, r7                                  @ add k[0] to w[11]
 241 0168 CBF8C448 	    str     r4, [fp, $0x800+((ADR+CAA)<<2)]         @ add sum to CAA
 242 016c CBF80050 	    str     r5, [fp]                                @ shift registers
 243              	
 244 0170 50F8043B 	    ldr     r3, [r0], $4                            @ r3 = input[12]
 245 0174 1CBA     	    rev     r4, r3                                  @ byte reverse
 246 0176 CBF80060 	    str     r6, [fp]                                @ +Ch(b,c,d), +e
 247 017a 1C94     	    str     r4, [sp, $112]                          @ w[12] = m[12]
 248 017c 3C44     	    add     r4, r7                                  @ add k[0] to w[12]
 249 017e CBF8C448 	    str     r4, [fp, $0x800+((ADR+CAA)<<2)]         @ add sum to CAA
 250 0182 CBF80050 	    str     r5, [fp]                                @ shift registers
 251              	
 252 0186 50F8043B 	    ldr     r3, [r0], $4                            @ r3 = input[13]
 253 018a 1CBA     	    rev     r4, r3                                  @ byte reverse
 254 018c CBF80060 	    str     r6, [fp]                                @ +Ch(b,c,d), +e
 255 0190 1D94     	    str     r4, [sp, $116]                          @ w[13] = m[13]
 256 0192 3C44     	    add     r4, r7                                  @ add k[0] to w[13]
 257 0194 CBF8C448 	    str     r4, [fp, $0x800+((ADR+CAA)<<2)]         @ add sum to CAA
 258 0198 CBF80050 	    str     r5, [fp]                                @ shift registers
 259              	
 260 019c 50F8043B 	    ldr     r3, [r0], $4                            @ r3 = input[14]
 261 01a0 1CBA     	    rev     r4, r3                                  @ byte reverse
 262 01a2 CBF80060 	    str     r6, [fp]                                @ +Ch(b,c,d), +e
 263 01a6 1E94     	    str     r4, [sp, $120]                          @ w[14] = m[14]
 264 01a8 3C44     	    add     r4, r7                                  @ add k[0] to w[14]
 265 01aa CBF8C448 	    str     r4, [fp, $0x800+((ADR+CAA)<<2)]         @ add sum to CAA
 266 01ae CBF80050 	    str     r5, [fp]                                @ shift registers
 267              	
 268 01b2 50F8043B 	    ldr     r3, [r0], $4                            @ r3 = input[15]
 269 01b6 1CBA     	    rev     r4, r3                                  @ byte reverse
 270 01b8 CBF80060 	    str     r6, [fp]                                @ +Ch(b,c,d), +e
 271 01bc 1F94     	    str     r4, [sp, $124]                          @ w[15] = m[15]
 272 01be 3C44     	    add     r4, r7                                  @ add k[0] to w[15]
 273 01c0 CBF8C448 	    str     r4, [fp, $0x800+((ADR+CAA)<<2)]         @ add sum to CAA
 274 01c4 CBF80050 	    str     r5, [fp]                                @ shift registers
 275              	
 276              	# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
 277              	# for (j = 0; j < 4; j++)
 278              	# {
ARM GAS  src/asm/mmcau_sha1_functions.s 			page 7


 279              	#   *(MMCAU_PPB_DIRECT) = mmcau_2_cmds(HASH+HFC,ADRA+CA4); // +Ch(b,c,d), +e
 280              	#   *(MMCAU_PPB_INDIRECT + (ADR+CAA))  = sha1_k[0];        // +k[0]
 281              	#   *(MMCAU_PPB_INDIRECT + (LDR+CA5))  = w[i-16];          // ld w[i-16] -> CA5
 282              	#   *(MMCAU_PPB_INDIRECT + (XOR+CA5))  = w[i-14];          // xor w[i-14]
 283              	#   *(MMCAU_PPB_INDIRECT + (XOR+CA5))  = w[i-8];           // xor w[i-8]
 284              	#   *(MMCAU_PPB_INDIRECT + (XOR+CA5))  = w[i-3];           // xor w[i-3]
 285              	#   *(MMCAU_PPB_INDIRECT + (ROTL+CA5)) = 1;                // rotate by 1
 286              	#   w[i++] = *(MMCAU_PPB_INDIRECT + (STR+CA5));            // store w[i]
 287              	#   *(MMCAU_PPB_DIRECT) = mmcau_2_cmds(ADRA+CA5,SHS);      // +w[i], shift regs
 288              	# }
 289              	# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
 290              	
 291              	# -- (loop unrolled)
 292              	
 293 01c8 CBF80060 	    str     r6, [fp]                                @ +Ch(b,c,d), +e
 294 01cc 109C     	    ldr     r4, [sp, $64]                           @ r4 = w[0]
 295 01ce 129B     	    ldr     r3, [sp, $72]                           @ r3 = w[2]
 296 01d0 84EA0304 	    eor     r4, r3                                  @ XOR w[i-14]
 297 01d4 189B     	    ldr     r3, [sp, $96]                           @ r3 = w[8]
 298 01d6 84EA0304 	    eor     r4, r3                                  @ XOR w[i-8]
 299 01da 1D9B     	    ldr     r3, [sp, $116]                          @ r3 = w[13]
 300 01dc 84EA0304 	    eor     r4, r3                                  @ XOR w[i-3]
 301 01e0 4FEAF473 	    ror     r3, r4, $31                             @ rotate left by 1
 302 01e4 2093     	    str     r3, [sp, $128]                          @ store w[16]
 303 01e6 3B44     	    add     r3, r7                                  @ add k[0] to w[16]
 304 01e8 CBF8C438 	    str     r3, [fp, $0x800+((ADR+CAA)<<2)]         @ add sum to CAA
 305 01ec CBF80050 	    str     r5, [fp]                                @ shift regs
 306              	
 307 01f0 CBF80060 	    str     r6, [fp]                                @ +Ch(b,c,d), +e
 308 01f4 119C     	    ldr     r4, [sp, $68]                           @ r4 = w[1]
 309 01f6 139B     	    ldr     r3, [sp, $76]                           @ r3 = w[3]
 310 01f8 84EA0304 	    eor     r4, r3                                  @ XOR w[i-14]
 311 01fc 199B     	    ldr     r3, [sp, $100]                          @ r3 = w[9]
 312 01fe 84EA0304 	    eor     r4, r3                                  @ XOR w[i-9]
 313 0202 1E9B     	    ldr     r3, [sp, $120]                          @ r3 = w[14]
 314 0204 84EA0304 	    eor     r4, r3                                  @ XOR w[i-3]
 315 0208 4FEAF473 	    ror     r3, r4, $31                             @ rotate left by 1
 316 020c 2193     	    str     r3, [sp, $132]                          @ store w[17]
 317 020e 3B44     	    add     r3, r7                                  @ add k[0] to w[17]
 318 0210 CBF8C438 	    str     r3, [fp, $0x800+((ADR+CAA)<<2)]         @ add sum to CAA
 319 0214 CBF80050 	    str     r5, [fp]                                @ shift regs
 320              	
 321 0218 CBF80060 	    str     r6, [fp]                                @ +Ch(b,c,d), +e
 322 021c 129C     	    ldr     r4, [sp, $72]                           @ r4 = w[2]
 323 021e 149B     	    ldr     r3, [sp, $80]                           @ r3 = w[4]
 324 0220 84EA0304 	    eor     r4, r3                                  @ XOR w[i-14]
 325 0224 1A9B     	    ldr     r3, [sp, $104]                          @ r4 = w[10]
 326 0226 84EA0304 	    eor     r4, r3                                  @ XOR w[i-9]
 327 022a 1F9B     	    ldr     r3, [sp, $124]                          @ r3 = w[15]
 328 022c 84EA0304 	    eor     r4, r3                                  @ XOR w[i-3]
 329 0230 4FEAF473 	    ror     r3, r4, $31                             @ rotate left by 1
 330 0234 2293     	    str     r3, [sp, $136]                          @ store w[18]
 331 0236 3B44     	    add     r3, r7                                  @ add k[0] to w[18]
 332 0238 CBF8C438 	    str     r3, [fp, $0x800+((ADR+CAA)<<2)]         @ add sum to CAA
 333 023c CBF80050 	    str     r5, [fp]                                @ shift regs
 334              	
 335 0240 CBF80060 	    str     r6, [fp]                                @ +Ch(b,c,d), +e
ARM GAS  src/asm/mmcau_sha1_functions.s 			page 8


 336 0244 139C     	    ldr     r4, [sp, $76]                           @ r4 = w[3]
 337 0246 159B     	    ldr     r3, [sp, $84]                           @ r3 = w[5]
 338 0248 84EA0304 	    eor     r4, r3                                  @ XOR w[i-14]
 339 024c 1B9B     	    ldr     r3, [sp, $108]                          @ r4 = w[11]
 340 024e 84EA0304 	    eor     r4, r3                                  @ XOR w[i-9]
 341 0252 209B     	    ldr     r3, [sp, $128]                          @ r3 = w[16]
 342 0254 84EA0304 	    eor     r4, r3                                  @ XOR w[i-3]
 343 0258 4FEAF473 	    ror     r3, r4, $31                             @ rotate left by 1
 344 025c 2393     	    str     r3, [sp, $140]                          @ store w[19]
 345 025e 3B44     	    add     r3, r7                                  @ add k[0] to w[19]
 346 0260 CBF8C438 	    str     r3, [fp, $0x800+((ADR+CAA)<<2)]         @ add sum to CAA
 347 0264 CBF80050 	    str     r5, [fp]                                @ shift regs
 348              	
 349              	
 350              	# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
 351              	# for (j = 0; j < 20; j++)
 352              	# {
 353              	#   *(MMCAU_PPB_DIRECT) = mmcau_2_cmds(HASH+HFP,ADRA+CA4); // +Par(b,c,d), +e
 354              	#   *(MMCAU_PPB_INDIRECT + (ADR+CAA))  = sha1_k[1];        // +k[1]
 355              	#   *(MMCAU_PPB_INDIRECT + (LDR+CA5))  = w[i-16];          // ld w[i-16] -> CA5
 356              	#   *(MMCAU_PPB_INDIRECT + (XOR+CA5))  = w[i-14];          // xor w[i-14]
 357              	#   *(MMCAU_PPB_INDIRECT + (XOR+CA5))  = w[i-8];           // xor w[i-8]
 358              	#   *(MMCAU_PPB_INDIRECT + (XOR+CA5))  = w[i-3];           // xor w[i-3]
 359              	#   *(MMCAU_PPB_INDIRECT + (ROTL+CA5)) = 1;                // rotate by 1
 360              	#   w[i++] = *(MMCAU_PPB_INDIRECT + (STR+CA5));            // store w[i]
 361              	#   *(MMCAU_PPB_DIRECT) = mmcau_2_cmds(ADRA+CA5,SHS);      // +w[i], shift regs
 362              	# }
 363              	# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
 364              	
 365 0268 4BF20008 	    movw    r8, #:lower16:MMCAU_2_CMDS+(HASH+HFP)<<22+(ADRA+CA4)<<11
 366 026c CCF69208 	    movt    r8, #:upper16:MMCAU_2_CMDS+(HASH+HFP)<<22+(ADRA+CA4)<<11
 367 0270 5AF8047B 	    ldr     r7, [sl], $4                            @ get k[1]; sl++
 368              	
 369              	# -- (loop unrolled)
 370              	
 371 0274 CBF80080 	    str     r8, [fp]                                @ +Par(b,c,d), +e
 372 0278 149C     	    ldr     r4, [sp, $80]                           @ r4 = w[i-16]
 373 027a 169B     	    ldr     r3, [sp, $88]                           @ r3 = w[i-14]
 374 027c 84EA0304 	    eor     r4, r3                                  @ XOR w[i-14]
 375 0280 1C9B     	    ldr     r3, [sp, $112]                          @ r3 = w[i-8]
 376 0282 84EA0304 	    eor     r4, r3                                  @ XOR w[i-8]
 377 0286 219B     	    ldr     r3, [sp, $132]                          @ r4 = w[i-3]
 378 0288 84EA0304 	    eor     r4, r3                                  @ XOR w[i-3]
 379 028c 4FEAF473 	    ror     r3, r4, $31                             @ rotate left by 1
 380 0290 2493     	    str     r3, [sp, $144]                          @ store w[20]
 381 0292 3B44     	    add     r3, r7                                  @ add k[1] to w[20]
 382 0294 CBF8C438 	    str     r3, [fp, $0x800+((ADR+CAA)<<2)]         @ add sum to CAA
 383 0298 CBF80050 	    str     r5, [fp]                                @ shift regs
 384              	
 385 029c CBF80080 	    str     r8, [fp]                                @ +Par(b,c,d), +e
 386 02a0 159C     	    ldr     r4, [sp, $84]                           @ r4 = w[i-16]
 387 02a2 179B     	    ldr     r3, [sp, $92]                           @ r3 = w[i-14]
 388 02a4 84EA0304 	    eor     r4, r3                                  @ XOR w[i-14]
 389 02a8 1D9B     	    ldr     r3, [sp, $116]                          @ r3 = w[i-8]
 390 02aa 84EA0304 	    eor     r4, r3                                  @ XOR w[i-8]
 391 02ae 229B     	    ldr     r3, [sp, $136]                          @ r3 = w[i-3]
 392 02b0 84EA0304 	    eor     r4, r3                                  @ XOR w[i-3]
ARM GAS  src/asm/mmcau_sha1_functions.s 			page 9


 393 02b4 4FEAF473 	    ror     r3, r4, $31                             @ rotate left by 1
 394 02b8 2593     	    str     r3, [sp, $148]                          @ store w[21]
 395 02ba 3B44     	    add     r3, r7                                  @ add k[1] to w[21]
 396 02bc CBF8C438 	    str     r3, [fp, $0x800+((ADR+CAA)<<2)]         @ add sum to CAA
 397 02c0 CBF80050 	    str     r5, [fp]                                @ shift regs
 398              	
 399 02c4 CBF80080 	    str     r8, [fp]                                @ +Par(b,c,d), +e
 400 02c8 169C     	    ldr     r4, [sp, $88]                           @ r4 = w[i-16]
 401 02ca 189B     	    ldr     r3, [sp, $96]                           @ r3 = w[i-14]
 402 02cc 84EA0304 	    eor     r4, r3                                  @ XOR w[i-14]
 403 02d0 1E9B     	    ldr     r3, [sp, $120]                          @ r3 = w[i-8]
 404 02d2 84EA0304 	    eor     r4, r3                                  @ XOR w[i-8]
 405 02d6 239B     	    ldr     r3, [sp, $140]                          @ r3 = w[i-3]
 406 02d8 84EA0304 	    eor     r4, r3                                  @ XOR w[i-3]
 407 02dc 4FEAF473 	    ror     r3, r4, $31                             @ rotate left by 1
 408 02e0 2693     	    str     r3, [sp, $152]                          @ store w[22]
 409 02e2 3B44     	    add     r3, r7                                  @ add k[1] to w[22]
 410 02e4 CBF8C438 	    str     r3, [fp, $0x800+((ADR+CAA)<<2)]         @ add sum to CAA
 411 02e8 CBF80050 	    str     r5, [fp]                                @ shift regs
 412              	
 413 02ec CBF80080 	    str     r8, [fp]                                @ +Par(b,c,d), +e
 414 02f0 179C     	    ldr     r4, [sp, $92]                           @ r4 = w[i-16]
 415 02f2 199B     	    ldr     r3, [sp, $100]                          @ r3 = w[i-14]
 416 02f4 84EA0304 	    eor     r4, r3                                  @ XOR w[i-14]
 417 02f8 1F9B     	    ldr     r3, [sp, $124]                          @ r3 = w[i-8]
 418 02fa 84EA0304 	    eor     r4, r3                                  @ XOR w[i-8]
 419 02fe 249B     	    ldr     r3, [sp, $144]                          @ r3 = w[i-3]
 420 0300 84EA0304 	    eor     r4, r3                                  @ XOR w[i-3]
 421 0304 4FEAF473 	    ror     r3, r4, $31                             @ rotate left by 1
 422 0308 2793     	    str     r3, [sp, $156]                          @ store w[23]
 423 030a 3B44     	    add     r3, r7                                  @ add k[1] to w[23]
 424 030c CBF8C438 	    str     r3, [fp, $0x800+((ADR+CAA)<<2)]         @ add sum to CAA
 425 0310 CBF80050 	    str     r5, [fp]                                @ shift regs
 426              	
 427 0314 CBF80080 	    str     r8, [fp]                                @ +Par(b,c,d), +e
 428 0318 189C     	    ldr     r4, [sp, $96]                           @ r4 = w[i-16]
 429 031a 1A9B     	    ldr     r3, [sp, $104]                          @ r3 = w[i-14]
 430 031c 84EA0304 	    eor     r4, r3                                  @ XOR w[i-14]
 431 0320 209B     	    ldr     r3, [sp, $128]                          @ r3 = w[i-8]
 432 0322 84EA0304 	    eor     r4, r3                                  @ XOR w[i-8]
 433 0326 259B     	    ldr     r3, [sp, $148]                          @ r3 = w[i-3]
 434 0328 84EA0304 	    eor     r4, r3                                  @ XOR w[i-3]
 435 032c 4FEAF473 	    ror     r3, r4, $31                             @ rotate left by 1
 436 0330 2893     	    str     r3, [sp, $160]                          @ store w[24]
 437 0332 3B44     	    add     r3, r7                                  @ add k[1] to w[24]
 438 0334 CBF8C438 	    str     r3, [fp, $0x800+((ADR+CAA)<<2)]         @ add sum to CAA
 439 0338 CBF80050 	    str     r5, [fp]                                @ shift regs
 440              	
 441 033c CBF80080 	    str     r8, [fp]                                @ +Par(b,c,d), +e
 442 0340 199C     	    ldr     r4, [sp, $100]                          @ r4 = w[i-16]
 443 0342 1B9B     	    ldr     r3, [sp, $108]                          @ r3 = w[i-14]
 444 0344 84EA0304 	    eor     r4, r3                                  @ XOR w[i-14]
 445 0348 219B     	    ldr     r3, [sp, $132]                          @ r3 = w[i-8]
 446 034a 84EA0304 	    eor     r4, r3                                  @ XOR w[i-8]
 447 034e 269B     	    ldr     r3, [sp, $152]                          @ r3 = w[i-3]
 448 0350 84EA0304 	    eor     r4, r3                                  @ XOR w[i-3]
 449 0354 4FEAF473 	    ror     r3, r4, $31                             @ rotate left by 1
ARM GAS  src/asm/mmcau_sha1_functions.s 			page 10


 450 0358 2993     	    str     r3, [sp, $164]                          @ store w[25]
 451 035a 3B44     	    add     r3, r7                                  @ add k[1] to w[25]
 452 035c CBF8C438 	    str     r3, [fp, $0x800+((ADR+CAA)<<2)]         @ add sum to CAA
 453 0360 CBF80050 	    str     r5, [fp]                                @ shift regs
 454              	
 455 0364 CBF80080 	    str     r8, [fp]                                @ +Par(b,c,d), +e
 456 0368 1A9C     	    ldr     r4, [sp, $104]                          @ r4 = w[i-16]
 457 036a 1C9B     	    ldr     r3, [sp, $112]                          @ r3 = w[i-14]
 458 036c 84EA0304 	    eor     r4, r3                                  @ XOR w[i-14]
 459 0370 229B     	    ldr     r3, [sp, $136]                          @ r3 = w[i-8]
 460 0372 84EA0304 	    eor     r4, r3                                  @ XOR w[i-8]
 461 0376 279B     	    ldr     r3, [sp, $156]                          @ r3 = w[i-3]
 462 0378 84EA0304 	    eor     r4, r3                                  @ XOR w[i-3]
 463 037c 4FEAF473 	    ror     r3, r4, $31                             @ rotate left by 1
 464 0380 2A93     	    str     r3, [sp, $168]                          @ store w[26]
 465 0382 3B44     	    add     r3, r7                                  @ add k[1] to w[26]
 466 0384 CBF8C438 	    str     r3, [fp, $0x800+((ADR+CAA)<<2)]         @ add sum to CAA
 467 0388 CBF80050 	    str     r5, [fp]                                @ shift regs
 468              	
 469 038c CBF80080 	    str     r8, [fp]                                @ +Par(b,c,d), +e
 470 0390 1B9C     	    ldr     r4, [sp, $108]                          @ r4 = w[i-16]
 471 0392 1D9B     	    ldr     r3, [sp, $116]                          @ r3 = w[i-14]
 472 0394 84EA0304 	    eor     r4, r3                                  @ XOR w[i-14]
 473 0398 239B     	    ldr     r3, [sp, $140]                          @ r3 = w[i-8]
 474 039a 84EA0304 	    eor     r4, r3                                  @ XOR w[i-8]
 475 039e 289B     	    ldr     r3, [sp, $160]                          @ r3 = w[i-3]
 476 03a0 84EA0304 	    eor     r4, r3                                  @ XOR w[i-3]
 477 03a4 4FEAF473 	    ror     r3, r4, $31                             @ rotate left by 1
 478 03a8 2B93     	    str     r3, [sp, $172]                          @ store w[27]
 479 03aa 3B44     	    add     r3, r7                                  @ add k[1] to w[27]
 480 03ac CBF8C438 	    str     r3, [fp, $0x800+((ADR+CAA)<<2)]         @ add sum to CAA
 481 03b0 CBF80050 	    str     r5, [fp]                                @ shift regs
 482              	
 483 03b4 CBF80080 	    str     r8, [fp]                                @ +Par(b,c,d), +e
 484 03b8 1C9C     	    ldr     r4, [sp, $112]                          @ r4 = w[i-16]
 485 03ba 1E9B     	    ldr     r3, [sp, $120]                          @ r3 = w[i-14]
 486 03bc 84EA0304 	    eor     r4, r3                                  @ XOR w[i-14]
 487 03c0 249B     	    ldr     r3, [sp, $144]                          @ r3 = w[i-8]
 488 03c2 84EA0304 	    eor     r4, r3                                  @ XOR w[i-8]
 489 03c6 299B     	    ldr     r3, [sp, $164]                          @ r3 = w[i-3]
 490 03c8 84EA0304 	    eor     r4, r3                                  @ XOR w[i-3]
 491 03cc 4FEAF473 	    ror     r3, r4, $31                             @ rotate left by 1
 492 03d0 2C93     	    str     r3, [sp, $176]                          @ store w[28]
 493 03d2 3B44     	    add     r3, r7                                  @ add k[1] to w[28]
 494 03d4 CBF8C438 	    str     r3, [fp, $0x800+((ADR+CAA)<<2)]         @ add sum to CAA
 495 03d8 CBF80050 	    str     r5, [fp]                                @ shift regs
 496              	
 497 03dc CBF80080 	    str     r8, [fp]                                @ +Par(b,c,d), +e
 498 03e0 1D9C     	    ldr     r4, [sp, $116]                          @ r4 = w[i-16]
 499 03e2 1F9B     	    ldr     r3, [sp, $124]                          @ r3 = w[i-14]
 500 03e4 84EA0304 	    eor     r4, r3                                  @ XOR w[i-14]
 501 03e8 259B     	    ldr     r3, [sp, $148]                          @ r3 = w[i-8]
 502 03ea 84EA0304 	    eor     r4, r3                                  @ XOR w[i-8]
 503 03ee 2A9B     	    ldr     r3, [sp, $168]                          @ r3 = w[i-3]
 504 03f0 84EA0304 	    eor     r4, r3                                  @ XOR w[i-3]
 505 03f4 4FEAF473 	    ror     r3, r4, $31                             @ rotate left by 1
 506 03f8 2D93     	    str     r3, [sp, $180]                          @ store w[29]
ARM GAS  src/asm/mmcau_sha1_functions.s 			page 11


 507 03fa 3B44     	    add     r3, r7                                  @ add k[1] to w[29]
 508 03fc CBF8C438 	    str     r3, [fp, $0x800+((ADR+CAA)<<2)]         @ add sum to CAA
 509 0400 CBF80050 	    str     r5, [fp]                                @ shift regs
 510              	
 511 0404 CBF80080 	    str     r8, [fp]                                @ +Par(b,c,d), +e
 512 0408 1E9C     	    ldr     r4, [sp, $120]                          @ r4 = w[i-16]
 513 040a 209B     	    ldr     r3, [sp, $128]                          @ r3 = w[i-14]
 514 040c 84EA0304 	    eor     r4, r3                                  @ XOR w[i-14]
 515 0410 269B     	    ldr     r3, [sp, $152]                          @ r3 = w[i-8]
 516 0412 84EA0304 	    eor     r4, r3                                  @ XOR w[i-8]
 517 0416 2B9B     	    ldr     r3, [sp, $172]                          @ r3 = w[i-3]
 518 0418 84EA0304 	    eor     r4, r3                                  @ XOR w[i-3]
 519 041c 4FEAF473 	    ror     r3, r4, $31                             @ rotate left by 1
 520 0420 2E93     	    str     r3, [sp, $184]                          @ store w[30]
 521 0422 3B44     	    add     r3, r7                                  @ add k[1] to w[30]
 522 0424 CBF8C438 	    str     r3, [fp, $0x800+((ADR+CAA)<<2)]         @ add sum to CAA
 523 0428 CBF80050 	    str     r5, [fp]                                @ shift regs
 524              	
 525 042c CBF80080 	    str     r8, [fp]                                @ +Par(b,c,d), +e
 526 0430 1F9C     	    ldr     r4, [sp, $124]                          @ r4 = w[i-16]
 527 0432 219B     	    ldr     r3, [sp, $132]                          @ r3 = w[i-14]
 528 0434 84EA0304 	    eor     r4, r3                                  @ XOR w[i-14]
 529 0438 279B     	    ldr     r3, [sp, $156]                          @ r3 = w[i-8]
 530 043a 84EA0304 	    eor     r4, r3                                  @ XOR w[i-8]
 531 043e 2C9B     	    ldr     r3, [sp, $176]                          @ r3 = w[i-3]
 532 0440 84EA0304 	    eor     r4, r3                                  @ XOR w[i-3]
 533 0444 4FEAF473 	    ror     r3, r4, $31                             @ rotate left by 1
 534 0448 2F93     	    str     r3, [sp, $188]                          @ store w[31]
 535 044a 3B44     	    add     r3, r7                                  @ add k[1] to w[31]
 536 044c CBF8C438 	    str     r3, [fp, $0x800+((ADR+CAA)<<2)]         @ add sum to CAA
 537 0450 CBF80050 	    str     r5, [fp]                                @ shift regs
 538              	
 539 0454 CBF80080 	    str     r8, [fp]                                @ +Par(b,c,d), +e
 540 0458 209C     	    ldr     r4, [sp, $128]                          @ r4 = w[i-16]
 541 045a 229B     	    ldr     r3, [sp, $136]                          @ r3 = w[i-14]
 542 045c 84EA0304 	    eor     r4, r3                                  @ XOR w[i-14]
 543 0460 289B     	    ldr     r3, [sp, $160]                          @ r3 = w[i-8]
 544 0462 84EA0304 	    eor     r4, r3                                  @ XOR w[i-8]
 545 0466 2D9B     	    ldr     r3, [sp, $180]                          @ r3 = w[i-3]
 546 0468 84EA0304 	    eor     r4, r3                                  @ XOR w[i-3]
 547 046c 4FEAF473 	    ror     r3, r4, $31                             @ rotate left by 1
 548 0470 3093     	    str     r3, [sp, $192]                          @ store w[32]
 549 0472 3B44     	    add     r3, r7                                  @ add k[1] to w[32]
 550 0474 CBF8C438 	    str     r3, [fp, $0x800+((ADR+CAA)<<2)]         @ add sum to CAA
 551 0478 CBF80050 	    str     r5, [fp]                                @ shift regs
 552              	
 553 047c CBF80080 	    str     r8, [fp]                                @ +Par(b,c,d), +e
 554 0480 219C     	    ldr     r4, [sp, $132]                          @ r4 = w[i-16]
 555 0482 239B     	    ldr     r3, [sp, $140]                          @ r3 = w[i-14]
 556 0484 84EA0304 	    eor     r4, r3                                  @ XOR w[i-14]
 557 0488 299B     	    ldr     r3, [sp, $164]                          @ r3 = w[i-8]
 558 048a 84EA0304 	    eor     r4, r3                                  @ XOR w[i-8]
 559 048e 2E9B     	    ldr     r3, [sp, $184]                          @ r3 = w[i-3]
 560 0490 84EA0304 	    eor     r4, r3                                  @ XOR w[i-3]
 561 0494 4FEAF473 	    ror     r3, r4, $31                             @ rotate left by 1
 562 0498 3193     	    str     r3, [sp, $196]                          @ store w[33]
 563 049a 3B44     	    add     r3, r7                                  @ add k[1] to w[33]
ARM GAS  src/asm/mmcau_sha1_functions.s 			page 12


 564 049c CBF8C438 	    str     r3, [fp, $0x800+((ADR+CAA)<<2)]         @ add sum to CAA
 565 04a0 CBF80050 	    str     r5, [fp]                                @ shift regs
 566              	
 567 04a4 CBF80080 	    str     r8, [fp]                                @ +Par(b,c,d), +e
 568 04a8 229C     	    ldr     r4, [sp, $136]                          @ r4 = w[i-16]
 569 04aa 249B     	    ldr     r3, [sp, $144]                          @ r3 = w[i-14]
 570 04ac 84EA0304 	    eor     r4, r3                                  @ XOR w[i-14]
 571 04b0 2A9B     	    ldr     r3, [sp, $168]                          @ r3 = w[i-8]
 572 04b2 84EA0304 	    eor     r4, r3                                  @ XOR w[i-8]
 573 04b6 2F9B     	    ldr     r3, [sp, $188]                          @ r3 = w[i-3]
 574 04b8 84EA0304 	    eor     r4, r3                                  @ XOR w[i-3]
 575 04bc 4FEAF473 	    ror     r3, r4, $31                             @ rotate left by 1
 576 04c0 3293     	    str     r3, [sp, $200]                          @ store w[34]
 577 04c2 3B44     	    add     r3, r7                                  @ add k[1] to w[34]
 578 04c4 CBF8C438 	    str     r3, [fp, $0x800+((ADR+CAA)<<2)]         @ add sum to CAA
 579 04c8 CBF80050 	    str     r5, [fp]                                @ shift regs
 580              	
 581 04cc CBF80080 	    str     r8, [fp]                                @ +Par(b,c,d), +e
 582 04d0 239C     	    ldr     r4, [sp, $140]                          @ r4 = w[i-16]
 583 04d2 259B     	    ldr     r3, [sp, $148]                          @ r3 = w[i-14]
 584 04d4 84EA0304 	    eor     r4, r3                                  @ XOR w[i-14]
 585 04d8 2B9B     	    ldr     r3, [sp, $172]                          @ r3 = w[i-8]
 586 04da 84EA0304 	    eor     r4, r3                                  @ XOR w[i-8]
 587 04de 309B     	    ldr     r3, [sp, $192]                          @ r3 = w[i-3]
 588 04e0 84EA0304 	    eor     r4, r3                                  @ XOR w[i-3]
 589 04e4 4FEAF473 	    ror     r3, r4, $31                             @ rotate left by 1
 590 04e8 3393     	    str     r3, [sp, $204]                          @ store w[35]
 591 04ea 3B44     	    add     r3, r7                                  @ add k[1] to w[35]
 592 04ec CBF8C438 	    str     r3, [fp, $0x800+((ADR+CAA)<<2)]         @ add sum to CAA
 593 04f0 CBF80050 	    str     r5, [fp]                                @ shift regs
 594              	
 595 04f4 CBF80080 	    str     r8, [fp]                                @ +Par(b,c,d), +e
 596 04f8 249C     	    ldr     r4, [sp, $144]                          @ r4 = w[i-16]
 597 04fa 269B     	    ldr     r3, [sp, $152]                          @ r3 = w[i-14]
 598 04fc 84EA0304 	    eor     r4, r3                                  @ XOR w[i-14]
 599 0500 2C9B     	    ldr     r3, [sp, $176]                          @ r3 = w[i-8]
 600 0502 84EA0304 	    eor     r4, r3                                  @ XOR w[i-8]
 601 0506 319B     	    ldr     r3, [sp, $196]                          @ r3 = w[i-3]
 602 0508 84EA0304 	    eor     r4, r3                                  @ XOR w[i-3]
 603 050c 4FEAF473 	    ror     r3, r4, $31                             @ rotate left by 1
 604 0510 3493     	    str     r3, [sp, $208]                          @ store w[36]
 605 0512 3B44     	    add     r3, r7                                  @ add k[1] to w[36]
 606 0514 CBF8C438 	    str     r3, [fp, $0x800+((ADR+CAA)<<2)]         @ add sum to CAA
 607 0518 CBF80050 	    str     r5, [fp]                                @ shift regs
 608              	
 609 051c CBF80080 	    str     r8, [fp]                                @ +Par(b,c,d), +e
 610 0520 259C     	    ldr     r4, [sp, $148]                          @ r4 = w[i-16]
 611 0522 279B     	    ldr     r3, [sp, $156]                          @ r3 = w[i-14]
 612 0524 84EA0304 	    eor     r4, r3                                  @ XOR w[i-14]
 613 0528 2D9B     	    ldr     r3, [sp, $180]                          @ r3 = w[i-8]
 614 052a 84EA0304 	    eor     r4, r3                                  @ XOR w[i-8]
 615 052e 329B     	    ldr     r3, [sp, $200]                          @ r3 = w[i-3]
 616 0530 84EA0304 	    eor     r4, r3                                  @ XOR w[i-3]
 617 0534 4FEAF473 	    ror     r3, r4, $31                             @ rotate left by 1
 618 0538 3593     	    str     r3, [sp, $212]                          @ store w[37]
 619 053a 3B44     	    add     r3, r7                                  @ add k[1] to w[37]
 620 053c CBF8C438 	    str     r3, [fp, $0x800+((ADR+CAA)<<2)]         @ add sum to CAA
ARM GAS  src/asm/mmcau_sha1_functions.s 			page 13


 621 0540 CBF80050 	    str     r5, [fp]                                @ shift regs
 622              	
 623 0544 CBF80080 	    str     r8, [fp]                                @ +Par(b,c,d), +e
 624 0548 269C     	    ldr     r4, [sp, $152]                          @ r4 = w[i-16]
 625 054a 289B     	    ldr     r3, [sp, $160]                          @ r3 = w[i-14]
 626 054c 84EA0304 	    eor     r4, r3                                  @ XOR w[i-14]
 627 0550 2E9B     	    ldr     r3, [sp, $184]                          @ r3 = w[i-8]
 628 0552 84EA0304 	    eor     r4, r3                                  @ XOR w[i-8]
 629 0556 339B     	    ldr     r3, [sp, $204]                          @ r3 = w[i-3]
 630 0558 84EA0304 	    eor     r4, r3                                  @ XOR w[i-3]
 631 055c 4FEAF473 	    ror     r3, r4, $31                             @ rotate left by 1
 632 0560 3693     	    str     r3, [sp, $216]                          @ store w[38]
 633 0562 3B44     	    add     r3, r7                                  @ add k[1] to w[38]
 634 0564 CBF8C438 	    str     r3, [fp, $0x800+((ADR+CAA)<<2)]         @ add sum to CAA
 635 0568 CBF80050 	    str     r5, [fp]                                @ shift regs
 636              	
 637 056c CBF80080 	    str     r8, [fp]                                @ +Par(b,c,d), +e
 638 0570 279C     	    ldr     r4, [sp, $156]                          @ r4 = w[i-16]
 639 0572 299B     	    ldr     r3, [sp, $164]                          @ r3 = w[i-14]
 640 0574 84EA0304 	    eor     r4, r3                                  @ XOR w[i-14]
 641 0578 2F9B     	    ldr     r3, [sp, $188]                          @ r3 = w[i-8]
 642 057a 84EA0304 	    eor     r4, r3                                  @ XOR w[i-8]
 643 057e 349B     	    ldr     r3, [sp, $208]                          @ r3 = w[i-3]
 644 0580 84EA0304 	    eor     r4, r3                                  @ XOR w[i-3]
 645 0584 4FEAF473 	    ror     r3, r4, $31                             @ rotate left by 1
 646 0588 3793     	    str     r3, [sp, $220]                          @ store w[39]
 647 058a 3B44     	    add     r3, r7                                  @ add k[1] to w[39]
 648 058c CBF8C438 	    str     r3, [fp, $0x800+((ADR+CAA)<<2)]         @ add sum to CAA
 649 0590 CBF80050 	    str     r5, [fp]                                @ shift regs
 650              	
 651              	
 652              	# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
 653              	# for (j = 0; j < 20; j++)
 654              	# {
 655              	#   *(MMCAU_PPB_DIRECT) = mmcau_2_cmds(HASH+HFM,ADRA+CA4); // +Maj(b,c,d), +e
 656              	#   *(MMCAU_PPB_INDIRECT + (ADR+CAA))  = sha1_k[2];        // +k[2]
 657              	#   *(MMCAU_PPB_INDIRECT + (LDR+CA5))  = w[i-16];          // ld w[i-16] -> CA5
 658              	#   *(MMCAU_PPB_INDIRECT + (XOR+CA5))  = w[i-14];          // xor w[i-14]
 659              	#   *(MMCAU_PPB_INDIRECT + (XOR+CA5))  = w[i-8];           // xor w[i-8]
 660              	#   *(MMCAU_PPB_INDIRECT + (XOR+CA5))  = w[i-3];           // xor w[i-3]
 661              	#   *(MMCAU_PPB_INDIRECT + (ROTL+CA5)) = 1;                // rotate by 1
 662              	#   w[i++] = *(MMCAU_PPB_INDIRECT + (STR+CA5));            // store w[i]
 663              	#   *(MMCAU_PPB_DIRECT) = mmcau_2_cmds(ADRA+CA5,SHS);      // +w[i], shift regs
 664              	# }
 665              	# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
 666              	
 667 0594 4BF20009 	    movw    r9, #:lower16:MMCAU_2_CMDS+(HASH+HFM)<<22+(ADRA+CA4)<<11
 668 0598 CCF65219 	    movt    r9, #:upper16:MMCAU_2_CMDS+(HASH+HFM)<<22+(ADRA+CA4)<<11
 669 059c 5AF8047B 	    ldr     r7, [sl], $4                            @ get k[2]; sl++
 670              	
 671              	# -- (loop unrolled)
 672              	
 673 05a0 CBF80090 	    str     r9, [fp]                                @ +Maj(b,c,d), +e
 674 05a4 289C     	    ldr     r4, [sp, $160]                          @ r4 = w[i-16]
 675 05a6 2A9B     	    ldr     r3, [sp, $168]                          @ r3 = w[i-14]
 676 05a8 84EA0304 	    eor     r4, r3                                  @ XOR w[i-14]
 677 05ac 309B     	    ldr     r3, [sp, $192]                          @ r3 = w[i-8]
ARM GAS  src/asm/mmcau_sha1_functions.s 			page 14


 678 05ae 84EA0304 	    eor     r4, r3                                  @ XOR w[i-8]
 679 05b2 359B     	    ldr     r3, [sp, $212]                          @ r3 = w[i-3]
 680 05b4 84EA0304 	    eor     r4, r3                                  @ XOR w[i-3]
 681 05b8 4FEAF473 	    ror     r3, r4, $31                             @ rotate left by 1
 682 05bc 3893     	    str     r3, [sp, $224]                          @ store w[40]
 683 05be 3B44     	    add     r3, r7                                  @ add k[2] to w[40]
 684 05c0 CBF8C438 	    str     r3, [fp, $0x800+((ADR+CAA)<<2)]         @ add sum to CAA
 685 05c4 CBF80050 	    str     r5, [fp]                                @ shift regs
 686              	
 687 05c8 CBF80090 	    str     r9, [fp]                                @ +Maj(b,c,d), +e
 688 05cc 299C     	    ldr     r4, [sp, $164]                          @ r4 = w[i-16]
 689 05ce 2B9B     	    ldr     r3, [sp, $172]                          @ r3 = w[i-14]
 690 05d0 84EA0304 	    eor     r4, r3                                  @ XOR w[i-14]
 691 05d4 319B     	    ldr     r3, [sp, $196]                          @ r3 = w[i-8]
 692 05d6 84EA0304 	    eor     r4, r3                                  @ XOR w[i-8]
 693 05da 369B     	    ldr     r3, [sp, $216]                          @ r3 = w[i-3]
 694 05dc 84EA0304 	    eor     r4, r3                                  @ XOR w[i-3]
 695 05e0 4FEAF473 	    ror     r3, r4, $31                             @ rotate left by 1
 696 05e4 3993     	    str     r3, [sp, $228]                          @ store w[41]
 697 05e6 3B44     	    add     r3, r7                                  @ add k[2] to w[41]
 698 05e8 CBF8C438 	    str     r3, [fp, $0x800+((ADR+CAA)<<2)]         @ add sum to CAA
 699 05ec CBF80050 	    str     r5, [fp]                                @ shift regs
 700              	
 701 05f0 CBF80090 	    str     r9, [fp]                                @ +Maj(b,c,d), +e
 702 05f4 2A9C     	    ldr     r4, [sp, $168]                          @ r4 = w[i-16]
 703 05f6 2C9B     	    ldr     r3, [sp, $176]                          @ r3 = w[i-14]
 704 05f8 84EA0304 	    eor     r4, r3                                  @ XOR w[i-14]
 705 05fc 329B     	    ldr     r3, [sp, $200]                          @ r3 = w[i-8]
 706 05fe 84EA0304 	    eor     r4, r3                                  @ XOR w[i-8]
 707 0602 379B     	    ldr     r3, [sp, $220]                          @ r3 = w[i-3]
 708 0604 84EA0304 	    eor     r4, r3                                  @ XOR w[i-3]
 709 0608 4FEAF473 	    ror     r3, r4, $31                             @ rotate left by 1
 710 060c 3A93     	    str     r3, [sp, $232]                          @ store w[42]
 711 060e 3B44     	    add     r3, r7                                  @ add k[2] to w[42]
 712 0610 CBF8C438 	    str     r3, [fp, $0x800+((ADR+CAA)<<2)]         @ add sum to CAA
 713 0614 CBF80050 	    str     r5, [fp]                                @ shift regs
 714              	
 715 0618 CBF80090 	    str     r9, [fp]                                @ +Maj(b,c,d), +e
 716 061c 2B9C     	    ldr     r4, [sp, $172]                          @ r4 = w[i-16]
 717 061e 2D9B     	    ldr     r3, [sp, $180]                          @ r3 = w[i-14]
 718 0620 84EA0304 	    eor     r4, r3                                  @ XOR w[i-14]
 719 0624 339B     	    ldr     r3, [sp, $204]                          @ r3 = w[i-8]
 720 0626 84EA0304 	    eor     r4, r3                                  @ XOR w[i-8]
 721 062a 389B     	    ldr     r3, [sp, $224]                          @ r3 = w[i-3]
 722 062c 84EA0304 	    eor     r4, r3                                  @ XOR w[i-3]
 723 0630 4FEAF473 	    ror     r3, r4, $31                             @ rotate left by 1
 724 0634 3B93     	    str     r3, [sp, $236]                          @ store w[43]
 725 0636 3B44     	    add     r3, r7                                  @ add k[2] to w[43]
 726 0638 CBF8C438 	    str     r3, [fp, $0x800+((ADR+CAA)<<2)]         @ add sum to CAA
 727 063c CBF80050 	    str     r5, [fp]                                @ shift regs
 728              	
 729 0640 CBF80090 	    str     r9, [fp]                                @ +Maj(b,c,d), +e
 730 0644 2C9C     	    ldr     r4, [sp, $176]                          @ r4 = w[i-16]
 731 0646 2E9B     	    ldr     r3, [sp, $184]                          @ r3 = w[i-14]
 732 0648 84EA0304 	    eor     r4, r3                                  @ XOR w[i-14]
 733 064c 349B     	    ldr     r3, [sp, $208]                          @ r3 = w[i-8]
 734 064e 84EA0304 	    eor     r4, r3                                  @ XOR w[i-8]
ARM GAS  src/asm/mmcau_sha1_functions.s 			page 15


 735 0652 399B     	    ldr     r3, [sp, $228]                          @ r3 = w[i-3]
 736 0654 84EA0304 	    eor     r4, r3                                  @ XOR w[i-3]
 737 0658 4FEAF473 	    ror     r3, r4, $31                             @ rotate left by 1
 738 065c 3C93     	    str     r3, [sp, $240]                          @ store w[44]
 739 065e 3B44     	    add     r3, r7                                  @ add k[2] to w[44]
 740 0660 CBF8C438 	    str     r3, [fp, $0x800+((ADR+CAA)<<2)]         @ add sum to CAA
 741 0664 CBF80050 	    str     r5, [fp]                                @ shift regs
 742              	
 743 0668 CBF80090 	    str     r9, [fp]                                @ +Maj(b,c,d), +e
 744 066c 2D9C     	    ldr     r4, [sp, $180]                          @ r4 = w[i-16]
 745 066e 2F9B     	    ldr     r3, [sp, $188]                          @ r3 = w[i-14]
 746 0670 84EA0304 	    eor     r4, r3                                  @ XOR w[i-14]
 747 0674 359B     	    ldr     r3, [sp, $212]                          @ r3 = w[i-8]
 748 0676 84EA0304 	    eor     r4, r3                                  @ XOR w[i-8]
 749 067a 3A9B     	    ldr     r3, [sp, $232]                          @ r3 = w[i-3]
 750 067c 84EA0304 	    eor     r4, r3                                  @ XOR w[i-3]
 751 0680 4FEAF473 	    ror     r3, r4, $31                             @ rotate left by 1
 752 0684 3D93     	    str     r3, [sp, $244]                          @ store w[45]
 753 0686 3B44     	    add     r3, r7                                  @ add k[2] to w[45]
 754 0688 CBF8C438 	    str     r3, [fp, $0x800+((ADR+CAA)<<2)]         @ add sum to CAA
 755 068c CBF80050 	    str     r5, [fp]                                @ shift regs
 756              	
 757 0690 CBF80090 	    str     r9, [fp]                                @ +Maj(b,c,d), +e
 758 0694 2E9C     	    ldr     r4, [sp, $184]                          @ r4 = w[i-16]
 759 0696 309B     	    ldr     r3, [sp, $192]                          @ r3 = w[i-14]
 760 0698 84EA0304 	    eor     r4, r3                                  @ XOR w[i-14]
 761 069c 369B     	    ldr     r3, [sp, $216]                          @ r3 = w[i-8]
 762 069e 84EA0304 	    eor     r4, r3                                  @ XOR w[i-8]
 763 06a2 3B9B     	    ldr     r3, [sp, $236]                          @ r3 = w[i-3]
 764 06a4 84EA0304 	    eor     r4, r3                                  @ XOR w[i-3]
 765 06a8 4FEAF473 	    ror     r3, r4, $31                             @ rotate left by 1
 766 06ac 3E93     	    str     r3, [sp, $248]                          @ store w[46]
 767 06ae 3B44     	    add     r3, r7                                  @ add k[2] to w[46]
 768 06b0 CBF8C438 	    str     r3, [fp, $0x800+((ADR+CAA)<<2)]         @ add sum to CAA
 769 06b4 CBF80050 	    str     r5, [fp]                                @ shift regs
 770              	
 771 06b8 CBF80090 	    str     r9, [fp]                                @ +Maj(b,c,d), +e
 772 06bc 2F9C     	    ldr     r4, [sp, $188]                          @ r4 = w[i-16]
 773 06be 319B     	    ldr     r3, [sp, $196]                          @ r3 = w[i-14]
 774 06c0 84EA0304 	    eor     r4, r3                                  @ XOR w[i-14]
 775 06c4 379B     	    ldr     r3, [sp, $220]                          @ r3 = w[i-8]
 776 06c6 84EA0304 	    eor     r4, r3                                  @ XOR w[i-8]
 777 06ca 3C9B     	    ldr     r3, [sp, $240]                          @ r3 = w[i-3]
 778 06cc 84EA0304 	    eor     r4, r3                                  @ XOR w[i-3]
 779 06d0 4FEAF473 	    ror     r3, r4, $31                             @ rotate left by 1
 780 06d4 3F93     	    str     r3, [sp, $252]                          @ store w[47]
 781 06d6 3B44     	    add     r3, r7                                  @ add k[2] to w[47]
 782 06d8 CBF8C438 	    str     r3, [fp, $0x800+((ADR+CAA)<<2)]         @ add sum to CAA
 783 06dc CBF80050 	    str     r5, [fp]                                @ shift regs
 784              	
 785 06e0 CBF80090 	    str     r9, [fp]                                @ +Maj(b,c,d), +e
 786 06e4 309C     	    ldr     r4, [sp, $192]                          @ r4 = w[i-16]
 787 06e6 329B     	    ldr     r3, [sp, $200]                          @ r3 = w[i-14]
 788 06e8 84EA0304 	    eor     r4, r3                                  @ XOR w[i-14]
 789 06ec 389B     	    ldr     r3, [sp, $224]                          @ r3 = w[i-8]
 790 06ee 84EA0304 	    eor     r4, r3                                  @ XOR w[i-8]
 791 06f2 3D9B     	    ldr     r3, [sp, $244]                          @ r3 = w[i-3]
ARM GAS  src/asm/mmcau_sha1_functions.s 			page 16


 792 06f4 84EA0304 	    eor     r4, r3                                  @ XOR w[i-3]
 793 06f8 4FEAF473 	    ror     r3, r4, $31                             @ rotate left by 1
 794 06fc 4093     	    str     r3, [sp, $256]                          @ store w[48]
 795 06fe 3B44     	    add     r3, r7                                  @ add k[2] to w[48]
 796 0700 CBF8C438 	    str     r3, [fp, $0x800+((ADR+CAA)<<2)]         @ add sum to CAA
 797 0704 CBF80050 	    str     r5, [fp]                                @ shift regs
 798              	
 799 0708 CBF80090 	    str     r9, [fp]                                @ +Maj(b,c,d), +e
 800 070c 319C     	    ldr     r4, [sp, $196]                          @ r4 = w[i-16]
 801 070e 339B     	    ldr     r3, [sp, $204]                          @ r3 = w[i-14]
 802 0710 84EA0304 	    eor     r4, r3                                  @ XOR w[i-14]
 803 0714 399B     	    ldr     r3, [sp, $228]                          @ r3 = w[i-8]
 804 0716 84EA0304 	    eor     r4, r3                                  @ XOR w[i-8]
 805 071a 3E9B     	    ldr     r3, [sp, $248]                          @ r3 = w[i-3]
 806 071c 84EA0304 	    eor     r4, r3                                  @ XOR w[i-3]
 807 0720 4FEAF473 	    ror     r3, r4, $31                             @ rotate left by 1
 808 0724 4193     	    str     r3, [sp, $260]                          @ store w[49]
 809 0726 3B44     	    add     r3, r7                                  @ add k[2] to w[49]
 810 0728 CBF8C438 	    str     r3, [fp, $0x800+((ADR+CAA)<<2)]         @ add sum to CAA
 811 072c CBF80050 	    str     r5, [fp]                                @ shift regs
 812              	
 813 0730 CBF80090 	    str     r9, [fp]                                @ +Maj(b,c,d), +e
 814 0734 329C     	    ldr     r4, [sp, $200]                          @ r4 = w[i-16]
 815 0736 349B     	    ldr     r3, [sp, $208]                          @ r3 = w[i-14]
 816 0738 84EA0304 	    eor     r4, r3                                  @ XOR w[i-14]
 817 073c 3A9B     	    ldr     r3, [sp, $232]                          @ r3 = w[i-8]
 818 073e 84EA0304 	    eor     r4, r3                                  @ XOR w[i-8]
 819 0742 3F9B     	    ldr     r3, [sp, $252]                          @ r3 = w[i-3]
 820 0744 84EA0304 	    eor     r4, r3                                  @ XOR w[i-3]
 821 0748 4FEAF473 	    ror     r3, r4, $31                             @ rotate left by 1
 822 074c 4293     	    str     r3, [sp, $264]                          @ store w[50]
 823 074e 3B44     	    add     r3, r7                                  @ add k[2] to w[50]
 824 0750 CBF8C438 	    str     r3, [fp, $0x800+((ADR+CAA)<<2)]         @ add w[50] to CAA
 825 0754 CBF80050 	    str     r5, [fp]                                @ shift regs
 826              	
 827 0758 CBF80090 	    str     r9, [fp]                                @ +Maj(b,c,d), +e
 828 075c 339C     	    ldr     r4, [sp, $204]                          @ r4 = w[i-16]
 829 075e 359B     	    ldr     r3, [sp, $212]                          @ r3 = w[i-14]
 830 0760 84EA0304 	    eor     r4, r3                                  @ XOR w[i-14]
 831 0764 3B9B     	    ldr     r3, [sp, $236]                          @ r3 = w[i-8]
 832 0766 84EA0304 	    eor     r4, r3                                  @ XOR w[i-8]
 833 076a 409B     	    ldr     r3, [sp, $256]                          @ r3 = w[i-3]
 834 076c 84EA0304 	    eor     r4, r3                                  @ XOR w[i-3]
 835 0770 4FEAF473 	    ror     r3, r4, $31                             @ rotate left by 1
 836 0774 4393     	    str     r3, [sp, $268]                          @ store w[51]
 837 0776 3B44     	    add     r3, r7                                  @ add k[2] to w[51]
 838 0778 CBF8C438 	    str     r3, [fp, $0x800+((ADR+CAA)<<2)]         @ add sum to CAA
 839 077c CBF80050 	    str     r5, [fp]                                @ shift regs
 840              	
 841 0780 CBF80090 	    str     r9, [fp]                                @ +Maj(b,c,d), +e
 842 0784 349C     	    ldr     r4, [sp, $208]                          @ r4 = w[i-16]
 843 0786 369B     	    ldr     r3, [sp, $216]                          @ r3 = w[i-14]
 844 0788 84EA0304 	    eor     r4, r3                                  @ XOR w[i-14]
 845 078c 3C9B     	    ldr     r3, [sp, $240]                          @ r3 = w[i-8]
 846 078e 84EA0304 	    eor     r4, r3                                  @ XOR w[i-8]
 847 0792 419B     	    ldr     r3, [sp, $260]                          @ r3 = w[i-3]
 848 0794 84EA0304 	    eor     r4, r3                                  @ XOR w[i-3]
ARM GAS  src/asm/mmcau_sha1_functions.s 			page 17


 849 0798 4FEAF473 	    ror     r3, r4, $31                             @ rotate left by 1
 850 079c 4493     	    str     r3, [sp, $272]                          @ store w[52]
 851 079e 3B44     	    add     r3, r7                                  @ add k[2] to w[52]
 852 07a0 CBF8C438 	    str     r3, [fp, $0x800+((ADR+CAA)<<2)]         @ add sum to CAA
 853 07a4 CBF80050 	    str     r5, [fp]                                @ shift regs
 854              	
 855 07a8 CBF80090 	    str     r9, [fp]                                @ +Maj(b,c,d), +e
 856 07ac 359C     	    ldr     r4, [sp, $212]                          @ r4 = w[i-16]
 857 07ae 379B     	    ldr     r3, [sp, $220]                          @ r3 = w[i-14]
 858 07b0 84EA0304 	    eor     r4, r3                                  @ XOR w[i-14]
 859 07b4 3D9B     	    ldr     r3, [sp, $244]                          @ r3 = w[i-8]
 860 07b6 84EA0304 	    eor     r4, r3                                  @ XOR w[i-8]
 861 07ba 429B     	    ldr     r3, [sp, $264]                          @ r3 = w[i-3]
 862 07bc 84EA0304 	    eor     r4, r3                                  @ XOR w[i-3]
 863 07c0 4FEAF473 	    ror     r3, r4, $31                             @ rotate left by 1
 864 07c4 4593     	    str     r3, [sp, $276]                          @ store w[53]
 865 07c6 3B44     	    add     r3, r7                                  @ add k[2] to w[53]
 866 07c8 CBF8C438 	    str     r3, [fp, $0x800+((ADR+CAA)<<2)]         @ add sum to CAA
 867 07cc CBF80050 	    str     r5, [fp]                                @ shift regs
 868              	
 869 07d0 CBF80090 	    str     r9, [fp]                                @ +Maj(b,c,d), +e
 870 07d4 369C     	    ldr     r4, [sp, $216]                          @ r4 = w[i-16]
 871 07d6 389B     	    ldr     r3, [sp, $224]                          @ r3 = w[i-14]
 872 07d8 84EA0304 	    eor     r4, r3                                  @ XOR w[i-14]
 873 07dc 3E9B     	    ldr     r3, [sp, $248]                          @ r3 = w[i-8]
 874 07de 84EA0304 	    eor     r4, r3                                  @ XOR w[i-8]
 875 07e2 439B     	    ldr     r3, [sp, $268]                          @ r3 = w[i-3]
 876 07e4 84EA0304 	    eor     r4, r3                                  @ XOR w[i-3]
 877 07e8 4FEAF473 	    ror     r3, r4, $31                             @ rotate left by 1
 878 07ec 4693     	    str     r3, [sp, $280]                          @ store w[54]
 879 07ee 3B44     	    add     r3, r7                                  @ add k[2] to w[54]
 880 07f0 CBF8C438 	    str     r3, [fp, $0x800+((ADR+CAA)<<2)]         @ add sum to CAA
 881 07f4 CBF80050 	    str     r5, [fp]                                @ shift regs
 882              	
 883 07f8 CBF80090 	    str     r9, [fp]                                @ +Maj(b,c,d), +e
 884 07fc 379C     	    ldr     r4, [sp, $220]                          @ r4 = w[i-16]
 885 07fe 399B     	    ldr     r3, [sp, $228]                          @ r3 = w[i-14]
 886 0800 84EA0304 	    eor     r4, r3                                  @ XOR w[i-14]
 887 0804 3F9B     	    ldr     r3, [sp, $252]                          @ r3 = w[i-8]
 888 0806 84EA0304 	    eor     r4, r3                                  @ XOR w[i-8]
 889 080a 449B     	    ldr     r3, [sp, $272]                          @ r3 = w[i-3]
 890 080c 84EA0304 	    eor     r4, r3                                  @ XOR w[i-3]
 891 0810 4FEAF473 	    ror     r3, r4, $31                             @ rotate left by 1
 892 0814 4793     	    str     r3, [sp, $284]                          @ store w[55]
 893 0816 3B44     	    add     r3, r7                                  @ add k[2] to w[55]
 894 0818 CBF8C438 	    str     r3, [fp, $0x800+((ADR+CAA)<<2)]         @ add sum to CAA
 895 081c CBF80050 	    str     r5, [fp]                                @ shift regs
 896              	
 897 0820 CBF80090 	    str     r9, [fp]                                @ +Maj(b,c,d), +e
 898 0824 389C     	    ldr     r4, [sp, $224]                          @ r4 = w[i-16]
 899 0826 3A9B     	    ldr     r3, [sp, $232]                          @ r3 = w[i-14]
 900 0828 84EA0304 	    eor     r4, r3                                  @ XOR w[i-14]
 901 082c 409B     	    ldr     r3, [sp, $256]                          @ r3 = w[i-8]
 902 082e 84EA0304 	    eor     r4, r3                                  @ XOR w[i-8]
 903 0832 459B     	    ldr     r3, [sp, $276]                          @ r3 = w[i-3]
 904 0834 84EA0304 	    eor     r4, r3                                  @ XOR w[i-3]
 905 0838 4FEAF473 	    ror     r3, r4, $31                             @ rotate left by 1
ARM GAS  src/asm/mmcau_sha1_functions.s 			page 18


 906 083c 4893     	    str     r3, [sp, $288]                          @ store w[56]
 907 083e 3B44     	    add     r3, r7                                  @ add k[2] to w[56]
 908 0840 CBF8C438 	    str     r3, [fp, $0x800+((ADR+CAA)<<2)]         @ add sum to CAA
 909 0844 CBF80050 	    str     r5, [fp]                                @ shift regs
 910              	
 911 0848 CBF80090 	    str     r9, [fp]                                @ +Maj(b,c,d), +e
 912 084c 399C     	    ldr     r4, [sp, $228]                          @ r4 = w[i-16]
 913 084e 3B9B     	    ldr     r3, [sp, $236]                          @ r3 = w[i-14]
 914 0850 84EA0304 	    eor     r4, r3                                  @ XOR w[i-14]
 915 0854 419B     	    ldr     r3, [sp, $260]                          @ r3 = w[i-8]
 916 0856 84EA0304 	    eor     r4, r3                                  @ XOR w[i-8]
 917 085a 469B     	    ldr     r3, [sp, $280]                          @ r3 = w[i-3]
 918 085c 84EA0304 	    eor     r4, r3                                  @ XOR w[i-3]
 919 0860 4FEAF473 	    ror     r3, r4, $31                             @ rotate left by 1
 920 0864 4993     	    str     r3, [sp, $292]                          @ store w[57]
 921 0866 3B44     	    add     r3, r7                                  @ add k[2] to w[57]
 922 0868 CBF8C438 	    str     r3, [fp, $0x800+((ADR+CAA)<<2)]         @ add sum to CAA
 923 086c CBF80050 	    str     r5, [fp]                                @ shift regs
 924              	
 925 0870 CBF80090 	    str     r9, [fp]                                @ +Maj(b,c,d), +e
 926 0874 3A9C     	    ldr     r4, [sp, $232]                          @ r4 = w[i-16]
 927 0876 3C9B     	    ldr     r3, [sp, $240]                          @ r3 = w[i-14]
 928 0878 84EA0304 	    eor     r4, r3                                  @ XOR w[i-14]
 929 087c 429B     	    ldr     r3, [sp, $264]                          @ r3 = w[i-8]
 930 087e 84EA0304 	    eor     r4, r3                                  @ XOR w[i-8]
 931 0882 479B     	    ldr     r3, [sp, $284]                          @ r3 = w[i-3]
 932 0884 84EA0304 	    eor     r4, r3                                  @ XOR w[i-3]
 933 0888 4FEAF473 	    ror     r3, r4, $31                             @ rotate left by 1
 934 088c 4A93     	    str     r3, [sp, $296]                          @ store w[58]
 935 088e 3B44     	    add     r3, r7                                  @ add k[2] to w[58]
 936 0890 CBF8C438 	    str     r3, [fp, $0x800+((ADR+CAA)<<2)]         @ add sum to CAA
 937 0894 CBF80050 	    str     r5, [fp]                                @ shift regs
 938              	
 939 0898 CBF80090 	    str     r9, [fp]                                @ +Maj(b,c,d), +e
 940 089c 3B9C     	    ldr     r4, [sp, $236]                          @ r4 = w[i-16]
 941 089e 3D9B     	    ldr     r3, [sp, $244]                          @ r3 = w[i-14]
 942 08a0 84EA0304 	    eor     r4, r3                                  @ XOR w[i-14]
 943 08a4 439B     	    ldr     r3, [sp, $268]                          @ r3 = w[i-8]
 944 08a6 84EA0304 	    eor     r4, r3                                  @ XOR w[i-8]
 945 08aa 489B     	    ldr     r3, [sp, $288]                          @ r3 = w[i-3]
 946 08ac 84EA0304 	    eor     r4, r3                                  @ XOR w[i-3]
 947 08b0 4FEAF473 	    ror     r3, r4, $31                             @ rotate left by 1
 948 08b4 4B93     	    str     r3, [sp, $300]                          @ store w[59]
 949 08b6 3B44     	    add     r3, r7                                  @ add k[2] to w[59]
 950 08b8 CBF8C438 	    str     r3, [fp, $0x800+((ADR+CAA)<<2)]         @ add sum to CAA
 951 08bc CBF80050 	    str     r5, [fp]                                @ shift regs
 952              	
 953              	
 954              	# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
 955              	# for (j = 0; j < 20; j++)
 956              	# {
 957              	#   *(MMCAU_PPB_DIRECT) = mmcau_2_cmds(HASH+HFP,ADRA+CA4); // +Par(b,c,d), +e
 958              	#   *(MMCAU_PPB_INDIRECT + (ADR+CAA))  = sha1_k[3];        // +k[3]
 959              	#   *(MMCAU_PPB_INDIRECT + (LDR+CA5))  = w[i-16];          // ld w[i-16] -> CA5
 960              	#   *(MMCAU_PPB_INDIRECT + (XOR+CA5))  = w[i-14];          // xor w[i-14]
 961              	#   *(MMCAU_PPB_INDIRECT + (XOR+CA5))  = w[i-8];           // xor w[i-8]
 962              	#   *(MMCAU_PPB_INDIRECT + (XOR+CA5))  = w[i-3];           // xor w[i-3]
ARM GAS  src/asm/mmcau_sha1_functions.s 			page 19


 963              	#   *(MMCAU_PPB_INDIRECT + (ROTL+CA5)) = 1;                // rotate by 1
 964              	#   w[i++] = *(MMCAU_PPB_INDIRECT + (STR+CA5));            // store w[i]
 965              	#   *(MMCAU_PPB_DIRECT) = mmcau_2_cmds(ADRA+CA5,SHS);      // +w[i], shift regs
 966              	# }
 967              	# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
 968              	
 969 08c0 DAF80070 	    ldr     r7, [sl]                                @ get k[3]
 970              	
 971              	# -- (loop unrolled)
 972              	
 973 08c4 CBF80080 	    str     r8, [fp]                                @ +Par(b,c,d), +e
 974 08c8 3C9C     	    ldr     r4, [sp, $240]                          @ r4 = w[i-16]
 975 08ca 3E9B     	    ldr     r3, [sp, $248]                          @ r3 = w[i-14]
 976 08cc 84EA0304 	    eor     r4, r3                                  @ XOR w[i-14]
 977 08d0 449B     	    ldr     r3, [sp, $272]                          @ r3 = w[i-8]
 978 08d2 84EA0304 	    eor     r4, r3                                  @ XOR w[i-8]
 979 08d6 499B     	    ldr     r3, [sp, $292]                          @ r3 = w[i-3]
 980 08d8 84EA0304 	    eor     r4, r3                                  @ XOR w[i-3]
 981 08dc 4FEAF473 	    ror     r3, r4, $31                             @ rotate left by 1
 982 08e0 4C93     	    str     r3, [sp, $304]                          @ store w[60]
 983 08e2 3B44     	    add     r3, r7                                  @ add k[3] to w[60]
 984 08e4 CBF8C438 	    str     r3, [fp, $0x800+((ADR+CAA)<<2)]         @ add sum to CAA
 985 08e8 CBF80050 	    str     r5, [fp]                                @ shift regs
 986              	
 987 08ec CBF80080 	    str     r8, [fp]                                @ +Par(b,c,d), +e
 988 08f0 3D9C     	    ldr     r4, [sp, $244]                          @ r4 = w[i-16]
 989 08f2 3F9B     	    ldr     r3, [sp, $252]                          @ r3 = w[i-14]
 990 08f4 84EA0304 	    eor     r4, r3                                  @ XOR w[i-14]
 991 08f8 459B     	    ldr     r3, [sp, $276]                          @ r3 = w[i-8]
 992 08fa 84EA0304 	    eor     r4, r3                                  @ XOR w[i-8]
 993 08fe 4A9B     	    ldr     r3, [sp, $296]                          @ r3 = w[i-3]
 994 0900 84EA0304 	    eor     r4, r3                                  @ XOR w[i-3]
 995 0904 4FEAF473 	    ror     r3, r4, $31                             @ rotate left by 1
 996 0908 4D93     	    str     r3, [sp, $308]                          @ store w[61]
 997 090a 3B44     	    add     r3, r7                                  @ add k[3] to w[61]
 998 090c CBF8C438 	    str     r3, [fp, $0x800+((ADR+CAA)<<2)]         @ add sum to CAA
 999 0910 CBF80050 	    str     r5, [fp]                                @ shift regs
 1000              	
 1001 0914 CBF80080 	    str     r8, [fp]                                @ +Par(b,c,d), +e
 1002 0918 3E9C     	    ldr     r4, [sp, $248]                          @ r4 = w[i-16]
 1003 091a 409B     	    ldr     r3, [sp, $256]                          @ r3 = w[i-14]
 1004 091c 84EA0304 	    eor     r4, r3                                  @ XOR w[i-14]
 1005 0920 469B     	    ldr     r3, [sp, $280]                          @ r3 = w[i-8]
 1006 0922 84EA0304 	    eor     r4, r3                                  @ XOR w[i-8]
 1007 0926 4B9B     	    ldr     r3, [sp, $300]                          @ r3 = w[i-3]
 1008 0928 84EA0304 	    eor     r4, r3                                  @ XOR w[i-3]
 1009 092c 4FEAF473 	    ror     r3, r4, $31                             @ rotate left by 1
 1010 0930 4E93     	    str     r3, [sp, $312]                          @ store w[62]
 1011 0932 3B44     	    add     r3, r7                                  @ add k[3] to w[62]
 1012 0934 CBF8C438 	    str     r3, [fp, $0x800+((ADR+CAA)<<2)]         @ add sum to CAA
 1013 0938 CBF80050 	    str     r5, [fp]                                @ shift regs
 1014              	
 1015 093c CBF80080 	    str     r8, [fp]                                @ +Par(b,c,d), +e
 1016 0940 3F9C     	    ldr     r4, [sp, $252]                          @ r4 = w[i-16]
 1017 0942 419B     	    ldr     r3, [sp, $260]                          @ r3 = w[i-14]
 1018 0944 84EA0304 	    eor     r4, r3                                  @ XOR w[i-14]
 1019 0948 479B     	    ldr     r3, [sp, $284]                          @ r3 = w[i-8]
ARM GAS  src/asm/mmcau_sha1_functions.s 			page 20


 1020 094a 84EA0304 	    eor     r4, r3                                  @ XOR w[i-8]
 1021 094e 4C9B     	    ldr     r3, [sp, $304]                          @ r3 = w[i-3]
 1022 0950 84EA0304 	    eor     r4, r3                                  @ XOR w[i-3]
 1023 0954 4FEAF473 	    ror     r3, r4, $31                             @ rotate left by 1
 1024 0958 4F93     	    str     r3, [sp, $316]                          @ store w[63]
 1025 095a 3B44     	    add     r3, r7                                  @ add k[3] to w[63]
 1026 095c CBF8C438 	    str     r3, [fp, $0x800+((ADR+CAA)<<2)]         @ add sum to CAA
 1027 0960 CBF80050 	    str     r5, [fp]                                @ shift regs
 1028              	
 1029 0964 CBF80080 	    str     r8, [fp]                                @ +Par(b,c,d), +e
 1030 0968 409C     	    ldr     r4, [sp, $256]                          @ r4 = w[i-16]
 1031 096a 429B     	    ldr     r3, [sp, $264]                          @ r3 = w[i-14]
 1032 096c 84EA0304 	    eor     r4, r3                                  @ XOR w[i-14]
 1033 0970 489B     	    ldr     r3, [sp, $288]                          @ r3 = w[i-8]
 1034 0972 84EA0304 	    eor     r4, r3                                  @ XOR w[i-8]
 1035 0976 4D9B     	    ldr     r3, [sp, $308]                          @ r3 = w[i-3]
 1036 0978 84EA0304 	    eor     r4, r3                                  @ XOR w[i-3]
 1037 097c 4FEAF473 	    ror     r3, r4, $31                             @ rotate left by 1
 1038 0980 5093     	    str     r3, [sp, $320]                          @ store w[64]
 1039 0982 3B44     	    add     r3, r7                                  @ add k[3] to w[64]
 1040 0984 CBF8C438 	    str     r3, [fp, $0x800+((ADR+CAA)<<2)]         @ add sum to CAA
 1041 0988 CBF80050 	    str     r5, [fp]                                @ shift regs
 1042              	
 1043 098c CBF80080 	    str     r8, [fp]                                @ +Par(b,c,d), +e
 1044 0990 419C     	    ldr     r4, [sp, $260]                          @ r4 = w[i-16]
 1045 0992 439B     	    ldr     r3, [sp, $268]                          @ r3 = w[i-14]
 1046 0994 84EA0304 	    eor     r4, r3                                  @ XOR w[i-14]
 1047 0998 499B     	    ldr     r3, [sp, $292]                          @ r3 = w[i-8]
 1048 099a 84EA0304 	    eor     r4, r3                                  @ XOR w[i-8]
 1049 099e 4E9B     	    ldr     r3, [sp, $312]                          @ r3 = w[i-3]
 1050 09a0 84EA0304 	    eor     r4, r3                                  @ XOR w[i-3]
 1051 09a4 4FEAF473 	    ror     r3, r4, $31                             @ rotate left by 1
 1052 09a8 5193     	    str     r3, [sp, $324]                          @ store w[65]
 1053 09aa 3B44     	    add     r3, r7                                  @ add k[3] to w[65]
 1054 09ac CBF8C438 	    str     r3, [fp, $0x800+((ADR+CAA)<<2)]         @ add sum to CAA
 1055 09b0 CBF80050 	    str     r5, [fp]                                @ shift regs
 1056              	
 1057 09b4 CBF80080 	    str     r8, [fp]                                @ +Par(b,c,d), +e
 1058 09b8 429C     	    ldr     r4, [sp, $264]                          @ r4 = w[i-16]
 1059 09ba 449B     	    ldr     r3, [sp, $272]                          @ r3 = w[i-14]
 1060 09bc 84EA0304 	    eor     r4, r3                                  @ XOR w[i-14]
 1061 09c0 4A9B     	    ldr     r3, [sp, $296]                          @ r3 = w[i-8]
 1062 09c2 84EA0304 	    eor     r4, r3                                  @ XOR w[i-8]
 1063 09c6 4F9B     	    ldr     r3, [sp, $316]                          @ r3 = w[i-3]
 1064 09c8 84EA0304 	    eor     r4, r3                                  @ XOR w[i-3]
 1065 09cc 4FEAF473 	    ror     r3, r4, $31                             @ rotate left by 1
 1066 09d0 5293     	    str     r3, [sp, $328]                          @ store w[66]
 1067 09d2 3B44     	    add     r3, r7                                  @ add k[3] to w[66]
 1068 09d4 CBF8C438 	    str     r3, [fp, $0x800+((ADR+CAA)<<2)]         @ add sum to CAA
 1069 09d8 CBF80050 	    str     r5, [fp]                                @ shift regs
 1070              	
 1071 09dc CBF80080 	    str     r8, [fp]                                @ +Par(b,c,d), +e
 1072 09e0 439C     	    ldr     r4, [sp, $268]                          @ r4 = w[i-16]
 1073 09e2 459B     	    ldr     r3, [sp, $276]                          @ r3 = w[i-14]
 1074 09e4 84EA0304 	    eor     r4, r3                                  @ XOR w[i-14]
 1075 09e8 4B9B     	    ldr     r3, [sp, $300]                          @ r3 = w[i-8]
 1076 09ea 84EA0304 	    eor     r4, r3                                  @ XOR w[i-8]
ARM GAS  src/asm/mmcau_sha1_functions.s 			page 21


 1077 09ee 509B     	    ldr     r3, [sp, $320]                          @ r3 = w[i-3]
 1078 09f0 84EA0304 	    eor     r4, r3                                  @ XOR w[i-3]
 1079 09f4 4FEAF473 	    ror     r3, r4, $31                             @ rotate left by 1
 1080 09f8 5393     	    str     r3, [sp, $332]                          @ store w[67]
 1081 09fa 3B44     	    add     r3, r7                                  @ add k[3] to w[67]
 1082 09fc CBF8C438 	    str     r3, [fp, $0x800+((ADR+CAA)<<2)]         @ add sum to CAA
 1083 0a00 CBF80050 	    str     r5, [fp]                                @ shift regs
 1084              	
 1085 0a04 CBF80080 	    str     r8, [fp]                                @ +Par(b,c,d), +e
 1086 0a08 449C     	    ldr     r4, [sp, $272]                          @ r4 = w[i-16]
 1087 0a0a 469B     	    ldr     r3, [sp, $280]                          @ r3 = w[i-14]
 1088 0a0c 84EA0304 	    eor     r4, r3                                  @ XOR w[i-14]
 1089 0a10 4C9B     	    ldr     r3, [sp, $304]                          @ r3 = w[i-8]
 1090 0a12 84EA0304 	    eor     r4, r3                                  @ XOR w[i-8]
 1091 0a16 519B     	    ldr     r3, [sp, $324]                          @ r3 = w[i-3]
 1092 0a18 84EA0304 	    eor     r4, r3                                  @ XOR w[i-3]
 1093 0a1c 4FEAF473 	    ror     r3, r4, $31                             @ rotate left by 1
 1094 0a20 5493     	    str     r3, [sp, $336]                          @ store w[68]
 1095 0a22 3B44     	    add     r3, r7                                  @ add k[3] to w[68]
 1096 0a24 CBF8C438 	    str     r3, [fp, $0x800+((ADR+CAA)<<2)]         @ add sum to CAA
 1097 0a28 CBF80050 	    str     r5, [fp]                                @ shift regs
 1098              	
 1099 0a2c CBF80080 	    str     r8, [fp]                                @ +Par(b,c,d), +e
 1100 0a30 459C     	    ldr     r4, [sp, $276]                          @ r4 = w[i-16]
 1101 0a32 479B     	    ldr     r3, [sp, $284]                          @ r3 = w[i-14]
 1102 0a34 84EA0304 	    eor     r4, r3                                  @ XOR w[i-14]
 1103 0a38 4D9B     	    ldr     r3, [sp, $308]                          @ r3 = w[i-8]
 1104 0a3a 84EA0304 	    eor     r4, r3                                  @ XOR w[i-8]
 1105 0a3e 529B     	    ldr     r3, [sp, $328]                          @ r3 = w[i-3]
 1106 0a40 84EA0304 	    eor     r4, r3                                  @ XOR w[i-3]
 1107 0a44 4FEAF473 	    ror     r3, r4, $31                             @ rotate left by 1
 1108 0a48 5593     	    str     r3, [sp, $340]                          @ store w[69]
 1109 0a4a 3B44     	    add     r3, r7                                  @ add k[3] to w[69]
 1110 0a4c CBF8C438 	    str     r3, [fp, $0x800+((ADR+CAA)<<2)]         @ add sum to CAA
 1111 0a50 CBF80050 	    str     r5, [fp]                                @ shift regs
 1112              	
 1113 0a54 CBF80080 	    str     r8, [fp]                                @ +Par(b,c,d), +e
 1114 0a58 469C     	    ldr     r4, [sp, $280]                          @ r4 = w[i-16]
 1115 0a5a 489B     	    ldr     r3, [sp, $288]                          @ r3 = w[i-14]
 1116 0a5c 84EA0304 	    eor     r4, r3                                  @ XOR w[i-14]
 1117 0a60 4E9B     	    ldr     r3, [sp, $312]                          @ r3 = w[i-8]
 1118 0a62 84EA0304 	    eor     r4, r3                                  @ XOR w[i-8]
 1119 0a66 539B     	    ldr     r3, [sp, $332]                          @ r3 = w[i-3]
 1120 0a68 84EA0304 	    eor     r4, r3                                  @ XOR w[i-3]
 1121 0a6c 4FEAF473 	    ror     r3, r4, $31                             @ rotate left by 1
 1122 0a70 5693     	    str     r3, [sp, $344]                          @ store w[70]
 1123 0a72 3B44     	    add     r3, r7                                  @ add k[3] to w[70]
 1124 0a74 CBF8C438 	    str     r3, [fp, $0x800+((ADR+CAA)<<2)]         @ add sum to CAA
 1125 0a78 CBF80050 	    str     r5, [fp]                                @ shift regs
 1126              	
 1127 0a7c CBF80080 	    str     r8, [fp]                                @ +Par(b,c,d), +e
 1128 0a80 479C     	    ldr     r4, [sp, $284]                          @ r4 = w[i-16]
 1129 0a82 499B     	    ldr     r3, [sp, $292]                          @ r3 = w[i-14]
 1130 0a84 84EA0304 	    eor     r4, r3                                  @ XOR w[i-14]
 1131 0a88 4F9B     	    ldr     r3, [sp, $316]                          @ r3 = w[i-8]
 1132 0a8a 84EA0304 	    eor     r4, r3                                  @ XOR w[i-8]
 1133 0a8e 549B     	    ldr     r3, [sp, $336]                          @ r3 = w[i-3]
ARM GAS  src/asm/mmcau_sha1_functions.s 			page 22


 1134 0a90 84EA0304 	    eor     r4, r3                                  @ XOR w[i-3]
 1135 0a94 4FEAF473 	    ror     r3, r4, $31                             @ rotate left by 1
 1136 0a98 5793     	    str     r3, [sp, $348]                          @ store w[71]
 1137 0a9a 3B44     	    add     r3, r7                                  @ add k[3] to w[71]
 1138 0a9c CBF8C438 	    str     r3, [fp, $0x800+((ADR+CAA)<<2)]         @ add sum to CAA
 1139 0aa0 CBF80050 	    str     r5, [fp]                                @ shift regs
 1140              	
 1141 0aa4 CBF80080 	    str     r8, [fp]                                @ +Par(b,c,d), +e
 1142 0aa8 489C     	    ldr     r4, [sp, $288]                          @ r4 = w[i-16]
 1143 0aaa 4A9B     	    ldr     r3, [sp, $296]                          @ r3 = w[i-14]
 1144 0aac 84EA0304 	    eor     r4, r3                                  @ XOR w[i-14]
 1145 0ab0 509B     	    ldr     r3, [sp, $320]                          @ r3 = w[i-8]
 1146 0ab2 84EA0304 	    eor     r4, r3                                  @ XOR w[i-8]
 1147 0ab6 559B     	    ldr     r3, [sp, $340]                          @ r3 = w[i-3]
 1148 0ab8 84EA0304 	    eor     r4, r3                                  @ XOR w[i-3]
 1149 0abc 4FEAF473 	    ror     r3, r4, $31                             @ rotate left by 1
 1150 0ac0 5893     	    str     r3, [sp, $352]                          @ store w[72]
 1151 0ac2 3B44     	    add     r3, r7                                  @ add k[3] to w[72]
 1152 0ac4 CBF8C438 	    str     r3, [fp, $0x800+((ADR+CAA)<<2)]         @ add sum to CAA
 1153 0ac8 CBF80050 	    str     r5, [fp]                                @ shift regs
 1154              	
 1155 0acc CBF80080 	    str     r8, [fp]                                @ +Par(b,c,d), +e
 1156 0ad0 499C     	    ldr     r4, [sp, $292]                          @ r4 = w[i-16]
 1157 0ad2 4B9B     	    ldr     r3, [sp, $300]                          @ r3 = w[i-14]
 1158 0ad4 84EA0304 	    eor     r4, r3                                  @ XOR w[i-14]
 1159 0ad8 519B     	    ldr     r3, [sp, $324]                          @ r3 = w[i-8]
 1160 0ada 84EA0304 	    eor     r4, r3                                  @ XOR w[i-8]
 1161 0ade 569B     	    ldr     r3, [sp, $344]                          @ r3 = w[i-3]
 1162 0ae0 84EA0304 	    eor     r4, r3                                  @ XOR w[i-3]
 1163 0ae4 4FEAF473 	    ror     r3, r4, $31                             @ rotate left by 1
 1164 0ae8 5993     	    str     r3, [sp, $356]                          @ store w[73]
 1165 0aea 3B44     	    add     r3, r7                                  @ add k[3] to w[73]
 1166 0aec CBF8C438 	    str     r3, [fp, $0x800+((ADR+CAA)<<2)]         @ add sum to CAA
 1167 0af0 CBF80050 	    str     r5, [fp]                                @ shift regs
 1168              	
 1169 0af4 CBF80080 	    str     r8, [fp]                                @ +Par(b,c,d), +e
 1170 0af8 4A9C     	    ldr     r4, [sp, $296]                          @ r4 = w[i-16]
 1171 0afa 4C9B     	    ldr     r3, [sp, $304]                          @ r3 = w[i-14]
 1172 0afc 84EA0304 	    eor     r4, r3                                  @ XOR w[i-14]
 1173 0b00 529B     	    ldr     r3, [sp, $328]                          @ r3 = w[i-8]
 1174 0b02 84EA0304 	    eor     r4, r3                                  @ XOR w[i-8]
 1175 0b06 579B     	    ldr     r3, [sp, $348]                          @ r3 = w[i-3]
 1176 0b08 84EA0304 	    eor     r4, r3                                  @ XOR w[i-3]
 1177 0b0c 4FEAF473 	    ror     r3, r4, $31                             @ rotate left by 1
 1178 0b10 5A93     	    str     r3, [sp, $360]                          @ store w[74]
 1179 0b12 3B44     	    add     r3, r7                                  @ add k[3] to w[74]
 1180 0b14 CBF8C438 	    str     r3, [fp, $0x800+((ADR+CAA)<<2)]         @ add sum to CAA
 1181 0b18 CBF80050 	    str     r5, [fp]                                @ shift regs
 1182              	
 1183 0b1c CBF80080 	    str     r8, [fp]                                @ +Par(b,c,d), +e
 1184 0b20 4B9C     	    ldr     r4, [sp, $300]                          @ r4 = w[i-16]
 1185 0b22 4D9B     	    ldr     r3, [sp, $308]                          @ r3 = w[i-14]
 1186 0b24 84EA0304 	    eor     r4, r3                                  @ XOR w[i-14]
 1187 0b28 539B     	    ldr     r3, [sp, $332]                          @ r3 = w[i-8]
 1188 0b2a 84EA0304 	    eor     r4, r3                                  @ XOR w[i-8]
 1189 0b2e 589B     	    ldr     r3, [sp, $352]                          @ r3 = w[i-3]
 1190 0b30 84EA0304 	    eor     r4, r3                                  @ XOR w[i-3]
ARM GAS  src/asm/mmcau_sha1_functions.s 			page 23


 1191 0b34 4FEAF473 	    ror     r3, r4, $31                             @ rotate left by 1
 1192 0b38 5B93     	    str     r3, [sp, $364]                          @ store w[75]
 1193 0b3a 3B44     	    add     r3, r7                                  @ add k[3] to w[75]
 1194 0b3c CBF8C438 	    str     r3, [fp, $0x800+((ADR+CAA)<<2)]         @ add sum to CAA
 1195 0b40 CBF80050 	    str     r5, [fp]                                @ shift regs
 1196              	
 1197 0b44 CBF80080 	    str     r8, [fp]                                @ +Par(b,c,d), +e
 1198 0b48 4C9C     	    ldr     r4, [sp, $304]                          @ r4 = w[i-16]
 1199 0b4a 4E9B     	    ldr     r3, [sp, $312]                          @ r3 = w[i-14]
 1200 0b4c 84EA0304 	    eor     r4, r3                                  @ XOR w[i-14]
 1201 0b50 549B     	    ldr     r3, [sp, $336]                          @ r3 = w[i-8]
 1202 0b52 84EA0304 	    eor     r4, r3                                  @ XOR w[i-8]
 1203 0b56 599B     	    ldr     r3, [sp, $356]                          @ r3 = w[i-3]
 1204 0b58 84EA0304 	    eor     r4, r3                                  @ XOR w[i-3]
 1205 0b5c 4FEAF473 	    ror     r3, r4, $31                             @ rotate left by 1
 1206 0b60 5C93     	    str     r3, [sp, $368]                          @ store w[76]
 1207 0b62 3B44     	    add     r3, r7                                  @ add k[3] to w[76]
 1208 0b64 CBF8C438 	    str     r3, [fp, $0x800+((ADR+CAA)<<2)]         @ add sum to CAA
 1209 0b68 CBF80050 	    str     r5, [fp]                                @ shift regs
 1210              	
 1211 0b6c CBF80080 	    str     r8, [fp]                                @ +Par(b,c,d), +e
 1212 0b70 4D9C     	    ldr     r4, [sp, $308]                          @ r4 = w[i-16]
 1213 0b72 4F9B     	    ldr     r3, [sp, $316]                          @ r3 = w[i-14]
 1214 0b74 84EA0304 	    eor     r4, r3                                  @ XOR w[i-14]
 1215 0b78 559B     	    ldr     r3, [sp, $340]                          @ r3 = w[i-8]
 1216 0b7a 84EA0304 	    eor     r4, r3                                  @ XOR w[i-8]
 1217 0b7e 5A9B     	    ldr     r3, [sp, $360]                          @ r3 = w[i-3]
 1218 0b80 84EA0304 	    eor     r4, r3                                  @ XOR w[i-3]
 1219 0b84 4FEAF473 	    ror     r3, r4, $31                             @ rotate left by 1
 1220 0b88 5D93     	    str     r3, [sp, $372]                          @ store w[77]
 1221 0b8a 3B44     	    add     r3, r7                                  @ add k[3] to w[77]
 1222 0b8c CBF8C438 	    str     r3, [fp, $0x800+((ADR+CAA)<<2)]         @ add sum to CAA
 1223 0b90 CBF80050 	    str     r5, [fp]                                @ shift regs
 1224              	
 1225 0b94 CBF80080 	    str     r8, [fp]                                @ +Par(b,c,d), +e
 1226 0b98 4E9C     	    ldr     r4, [sp, $312]                          @ r4 = w[i-16]
 1227 0b9a 509B     	    ldr     r3, [sp, $320]                          @ r3 = w[i-14]
 1228 0b9c 84EA0304 	    eor     r4, r3                                  @ XOR w[i-14]
 1229 0ba0 569B     	    ldr     r3, [sp, $344]                          @ r3 = w[i-8]
 1230 0ba2 84EA0304 	    eor     r4, r3                                  @ XOR w[i-8]
 1231 0ba6 5B9B     	    ldr     r3, [sp, $364]                          @ r3 = w[i-3]
 1232 0ba8 84EA0304 	    eor     r4, r3                                  @ XOR w[i-3]
 1233 0bac 4FEAF473 	    ror     r3, r4, $31                             @ rotate left by 1
 1234 0bb0 5E93     	    str     r3, [sp, $376]                          @ store w[78]
 1235 0bb2 3B44     	    add     r3, r7                                  @ add k[3] to w[78]
 1236 0bb4 CBF8C438 	    str     r3, [fp, $0x800+((ADR+CAA)<<2)]         @ add sum to CAA
 1237 0bb8 CBF80050 	    str     r5, [fp]                                @ shift regs
 1238              	
 1239 0bbc CBF80080 	    str     r8, [fp]                                @ +Par(b,c,d), +e
 1240 0bc0 4F9C     	    ldr     r4, [sp, $316]                          @ r4 = w[i-16]
 1241 0bc2 519B     	    ldr     r3, [sp, $324]                          @ r3 = w[i-14]
 1242 0bc4 84EA0304 	    eor     r4, r3                                  @ XOR w[i-14]
 1243 0bc8 579B     	    ldr     r3, [sp, $348]                          @ r3 = w[i-8]
 1244 0bca 84EA0304 	    eor     r4, r3                                  @ XOR w[i-8]
 1245 0bce 5C9B     	    ldr     r3, [sp, $368]                          @ r3 = w[i-3]
 1246 0bd0 84EA0304 	    eor     r4, r3                                  @ XOR w[i-3]
 1247 0bd4 4FEAF473 	    ror     r3, r4, $31                             @ rotate left by 1
ARM GAS  src/asm/mmcau_sha1_functions.s 			page 24


 1248 0bd8 5F93     	    str     r3, [sp, $380]                          @ store w[79]
 1249 0bda 3B44     	    add     r3, r7                                  @ add k[3] to w[79]
 1250 0bdc CBF8C438 	    str     r3, [fp, $0x800+((ADR+CAA)<<2)]         @ add sum to CAA
 1251 0be0 CBF80050 	    str     r5, [fp]                                @ shift regs
 1252              	
 1253 0be4 0DF11C09 	    add     r9, sp, $28                             @ r9 -> output[0] on stack
 1254 0be8 0BF6C808 	    add     r8, fp, $0x800+((ADR+CA0)<<2)           @ r8 = indirect_cmd ADR+CA0
 1255 0bec 0BF6880A 	    add     sl, fp, $0x800+((STR+CA0)<<2)           @ sl = indirect_cmd STR+CA0
 1256              	
 1257 0bf0 99E8F800 	    ldmia   r9, {r3-r7}                             @ get current outputs
 1258 0bf4 88E8F800 	    stmia   r8, {r3-r7}                             @ add output[i] to CA[4:0]
 1259 0bf8 9AE8F800 	    ldmia   sl, {r3-r7}                             @ get CA[4:0]
 1260              	
 1261 0bfc 0139     	    subs    r1, $1                                  @ decrement num_blks
 1262 0bfe 7FF41FAA 	    bne     next_blk
 1263              	
 1264 0c02 60B0     	    add     sp, $384                                @ unreserve stack space
 1265 0c04 82E8F800 	    stmia   r2, {r3-r7}                             @ store CA[i] to output[i]
 1266 0c08 BDE8F00F 	    ldmia   sp!, {r4-fp}                            @ restore regs and return
 1267 0c0c 7047     	    bx      lr
 1268              	
 1269              	#*******************************************************************************
 1270              	#*******************************************************************************
 1271              	#
 1272              	# SHA1: Updates SHA1 state variables for one or more input message blocks
 1273              	#   arguments
 1274              	#           *msg_data   pointer to start of input message data
 1275              	#           num_blks    number of 512-bit blocks to process
 1276              	#           *sha1_state pointer to 160-bit block of SHA1 state variables:
 1277              	#                           a,b,c,d,e
 1278              	#
 1279              	#   calling convention
 1280              	#   void    mmcau_sha1_update (const unsigned char *msg_data,
 1281              	#                              const int            num_blks,
 1282              	#                              unsigned int        *sha1_state)
 1283              	
 1284              	
 1285              	    .global _mmcau_sha1_update
 1286              	    .global mmcau_sha1_update
 1287              	    .type   mmcau_sha1_update, %function
 1288 0c0e 00BF     	    .align  4
 1289              	
 1290              	_mmcau_sha1_update:
 1291              	mmcau_sha1_update:
 1292              	
 1293 0c10 2DE9F840 	    stmdb   sp!, {r3-r7, lr}                        @ save registers on stack
 1294              	
 1295 0c14 40F20003 	    movw    r3, #:lower16:sha1_initial_h            @ r3 -> initial data
 1296 0c18 C0F20003 	    movt    r3, #:upper16:sha1_initial_h
 1297              	
 1298              	# copy initial data into hash output buffer
 1299 0c1c F8CB     	    ldmia   r3, {r3-r7}                             @ get initial sha1[0-4]
 1300 0c1e 82E8F800 	    stmia   r2, {r3-r7}                             @ copy to sha1_state[0-4]
 1301              	
 1302 0c22 FFF7FEFF 	    bl      mmcau_sha1_hash_n                       @ call hash_n routine
 1303              	
 1304 0c26 BDE8F880 	    ldmia   sp!, {r3-r7, pc}                        @ restore regs and return
ARM GAS  src/asm/mmcau_sha1_functions.s 			page 25


 1305              	
 1306              	#*******************************************************************************
 1307              	#*******************************************************************************
 1308              	#
 1309              	# SHA1: Perform the hash and generate SHA1 state variables for one input
 1310              	#       message block.
 1311              	#
 1312              	#   arguments
 1313              	#           *msg_data   pointer to start of input message data
 1314              	#           *sha1_state pointer to 160-bit block of SHA1 state variables:
 1315              	#                           a,b,c,d,e
 1316              	#
 1317              	#   NOTE    Input message and digest output blocks must not overlap
 1318              	#
 1319              	#   calling convention
 1320              	#   void    mmcau_sha1_hash (const unsigned char *msg_data,
 1321              	#                            unsigned int        *sha1_state)
 1322              	
 1323              	    .global _mmcau_sha1_hash
 1324              	    .global mmcau_sha1_hash
 1325              	    .type   mmcau_sha1_hash, %function
 1326 0c2a 00BFAFF3 	    .align  4
 1326      0080
 1327              	
 1328              	_mmcau_sha1_hash:
 1329              	mmcau_sha1_hash:
 1330              	
 1331 0c30 0A46     	    mov    r2, r1                                   @ arg2 = arg1 (*sha1_state)
 1332 0c32 4FF00101 	    mov    r1, $1                                   @ arg1 = num_blks = 1
 1333 0c36 FFF7FEBF 	    b      mmcau_sha1_hash_n                        @ branch to hash_n routine
 1334              	
 1335              	#*******************************************************************************
 1336              	
 1337 0c3a 00BFAFF3 	    .data
 1337      0080
 1338              	    .type   sha1_initial_h, %object
 1339              	    .align  4
 1340              	
 1341              	sha1_initial_h:
 1342 0000 01234567 	    .word   0x67452301
 1343 0004 89ABCDEF 	    .word   0xefcdab89
 1344 0008 FEDCBA98 	    .word   0x98badcfe
 1345 000c 76543210 	    .word   0x10325476
 1346 0010 F0E1D2C3 	    .word   0xc3d2e1f0
 1347              	
 1348              	    .type   sha1_k, %object
 1349 0014 00000000 	    .align  4
 1349      00000000 
 1349      00000000 
 1350              	
 1351              	sha1_k:
 1352 0020 9979825A 	    .word   0x5a827999
 1353 0024 A1EBD96E 	    .word   0x6ed9eba1
 1354 0028 DCBC1B8F 	    .word   0x8f1bbcdc
 1355 002c D6C162CA 	    .word   0xca62c1d6
