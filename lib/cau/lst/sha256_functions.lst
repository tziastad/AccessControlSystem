                                    set     CASR,0
                                    set     CAA,1
                                    set     CA0,2
                                    set     CA1,3
                                    set     CA2,4
                                    set     CA3,5
                                    set     CA4,6
                                    set     CA5,7
                                    set     CA6,8
                                    set     CA7,9
                                    set     CA8,10
                                    set     CNOP,0x000
                                    set     LDR,0x010
                                    set     STR,0x020
                                    set     ADR,0x030
                                    set     RADR,0x040
                                    set     ADRA,0x050
                                    set     XOR,0x060
                                    set     ROTL,0x070
                                    set     MVRA,0x080
                                    set     MVAR,0x090
                                    set     AESS,0x0a0
                                    set     AESIS,0x0b0
                                    set     AESC,0x0c0
                                    set     AESIC,0x0d0
                                    set     AESR,0x0e0
                                    set     AESIR,0x0f0
                                    set     DESR,0x100
                                    set     DESK,0x110
                                    set     HASH,0x120
                                    set     SHS,0x130
                                    set     MDS,0x140
                                    set     SHS2,0x150
                                    set     ILL,0x1f0
                                    set     IP,8
                                    set     FP,4
                                    set     DC,1
                                    set     CP,2
                                    set     KSL1,0
                                    set     KSL2,1
                                    set     KSR1,2
                                    set     KSR2,3
                                    set     HFF,0
                                    set     HFG,1
                                    set     HFH,2
                                    set     HFI,3
                                    set     HFP,2
                                    set     HFC,4
                                    set     HFM,5
                                    set     HF2C,6
                                    set     HF2M,7
                                    set     HF2S,8
                                    set     HF2T,9
                                    set     HF2U,10
                                    set     HF2V,11
                                
                                #*******************************************************************************
                                #*******************************************************************************
                                #
                                # NOTE: Code alignment for the CAU library functions in this file is carefully
                                # constructed to maximize processor performance. The existing alignment should
                                # be maintained for best results!!
                                #
                                # The individual code segments for the functions are presented first, followed
                                # by a common read-only data area containing the required data constants.
                                #
                                #*******************************************************************************
                                #*******************************************************************************
                                
                                
                                #*******************************************************************************
                                #*******************************************************************************
                                #
                                # SHA256: Initializes the hash output and checks the CAU hardware revision
                                #
                                #   arguments
                                #           *output     pointer to 256-bit message digest output
                                #
                                #   return
                                #           0           no error -> CAU2 hardware present
                                #           -1          error -> incorrect CAU hardware revision
                                #
                                #   calling convention
                                #   int     cau_sha256_initialize_output (unsigned int *output)
                                
                                    global  _cau_sha256_initialize_output
                                    global  cau_sha256_initialize_output
                                    align   4
                                _cau_sha256_initialize_output:
                                cau_sha256_initialize_output:
00000: 206f 0004               	    mov.l   (4,%sp),%a0                 # get argument: *output
00004: 43fa 025a               	    lea     (sha256_init_h.w,%pc),%a1   # pointer to initial data
                                
                                # copy initial data into hash output buffer (32 bytes = 8 longwords)
00008: 20d9                    	    mov.l   (%a1)+,(%a0)+
0000a: 20d9                    	    mov.l   (%a1)+,(%a0)+
0000c: 20d9                    	    mov.l   (%a1)+,(%a0)+
0000e: 20d9                    	    mov.l   (%a1)+,(%a0)+
00010: 20d9                    	    mov.l   (%a1)+,(%a0)+
00012: 20d9                    	    mov.l   (%a1)+,(%a0)+
00014: 20d9                    	    mov.l   (%a1)+,(%a0)+
00016: 20d9                    	    mov.l   (%a1)+,(%a0)+
                                
00018: fd80 0020               	    cp0st.l %d0,&STR+CASR               # store CAUSR -> d0
0001c: 4200                    	    clr.b   %d0                         # clear CAUSR[7:0]
0001e: b0bc 2000 0000          	    cmp.l   %d0,&0x20000000             # verify CAU2 hardware: CASR[31:28] = 0x2
00024: 56c0                    	    sne     %d0                         # if not equal, then d0 = 0xff, else d0 = 0x00
00026: 49c0                    	    extb.l  %d0                         # return 32-bit int
00028: 4e75                    	    rts
                                
                                
                                #*******************************************************************************
                                #*******************************************************************************
                                #
                                # SHA256: Perform the hash for one or more input message blocks and generate the
                                #         message digest output
                                #
                                #   arguments
                                #           *input      pointer to start of input message data
                                #           num_blks    number of 512-bit blocks to process
                                #           *output     pointer to 256-bit message digest output
                                #
                                #   NOTE    Input message and digest output blocks must not overlap
                                #
                                #   calling convention
                                #   void    cau_sha256_hash_n (const unsigned int *input,
                                #                              const int          num_blks,
                                #                              unsigned int *output)
                                
                                    global  _cau_sha256_hash_n
                                    global  cau_sha256_hash_n
                                    align   4
                                _cau_sha256_hash_n:
                                cau_sha256_hash_n:
0002c: 4fef fef4               	    lea     (-268,%sp),%sp              # allocate stack space: 3 regs, int w[64] array
                                
                                # the stack frame layout for this function is:
                                #   0(%sp)  saved %d7
                                #   4(%sp)  saved %a2
                                #   8(%sp)  saved %a3
                                #  12(%sp)  local variable w[0] - array has 64 32-bit entries, 256 bytes total
                                # 268(%sp)  returnPC
                                # 272(%sp)  input argument 1 - pointer to message input[]
                                # 276(%sp)  input argument 2 - number of blocks
                                # 280(%sp)  input argument 3 - pointer to message digest output[]
                                
00030: 48d7 0c80               	    movm.l  &0x0c80,(%sp)               # save d7/a2/a3
00034: 206f 0110               	    mov.l   (272,%sp),%a0               # pointer to message input[]
00038: 226f 0118               	    mov.l   (280,%sp),%a1               # pointer to message digest output[]
                                
                                # initialize the CAU data registers with the current contents of output[]
0003c: fc99 0012               	    cp0ld.l (%a1)+,&LDR+CA0             # output[0] = h[0]
00040: fc99 0013               	    cp0ld.l (%a1)+,&LDR+CA1             # output[1] = h[1]
00044: fc99 0014               	    cp0ld.l (%a1)+,&LDR+CA2             # output[2] = h[2]
00048: fc99 0015               	    cp0ld.l (%a1)+,&LDR+CA3             # output[3] = h[3]
0004c: fc99 0016               	    cp0ld.l (%a1)+,&LDR+CA4             # output[4] = h[4]
00050: fc99 0017               	    cp0ld.l (%a1)+,&LDR+CA5             # output[5] = h[5]
00054: fc99 0018               	    cp0ld.l (%a1)+,&LDR+CA6             # output[6] = h[6]
00058: fc99 0019               	    cp0ld.l (%a1)+,&LDR+CA7             # output[7] = h[7]
0005c: 43e9 ffe0               	    lea     (-32,%a1),%a1               # reset a1 back to output[0]
                                
00060: 2e2f 0114               	    mov.l   (276,%sp),%d7               # number of blocks
                                    align   4
                                sha256_hash_n_L%0:
00064: 47fa 021a               	    lea     (sha256_k.w,%pc),%a3        # pointer to k[]
00068: 45ef 000c               	    lea     (12,%sp),%a2                # pointer to local array w[]
0006c: 717c 0010               	    mvs.w   &16,%d0                     # set loop counter (to keep text aligned)
                                sha256_hash_n_L%1:
00070: 2218                    	    mov.l   (%a0)+,%d1                  # load m[i] into d1
00072: 24c1                    	    mov.l   %d1,(%a2)+                  # store m[i] into w[i]
00074: fc81 0011               	    cp0ld.l %d1,&LDR+CAA                # w[i] into CAA
00078: fc80 0059               	    cp0ld.l &ADRA+CA7                   # add h
0007c: fc80 0129               	    cp0ld.l &HASH+HF2T                  # add SIGMA1(e)
00080: fc80 0126               	    cp0ld.l &HASH+HF2C                  # add Ch(e,f,g)
00084: fc9b 0031               	    cp0ld.l (%a3)+,&ADR+CAA             # add k[i]
00088: fc80 009a               	    cp0ld.l &MVAR+CA8                   # t1
0008c: fc80 0128               	    cp0ld.l &HASH+HF2S                  # add SIGMA0(e)
00090: fc80 0127               	    cp0ld.l &HASH+HF2M                  # add Maj(a,b,c)
00094: fc80 0150               	    cp0ld.l &SHS2                       # shift registers
                                    
00098: 5380                    	    subq.l  &1,%d0
0009a: 6600 ffd4               	    bne.w   sha256_hash_n_L%1           # (to keep text aligned)
                                
0009e: 7030                    	    movq.l  &48,%d0                     # set loop counter
                                sha256_hash_n_L%2:
000a0: fcaa 0011 ffc0          	    cp0ld.l (-64,%a2),&LDR+CAA          # w[i-16]
000a6: fcaa 001a ffc4          	    cp0ld.l (-60,%a2),&LDR+CA8          # w[i-15]
000ac: fc80 012a               	    cp0ld.l &HASH+HF2U                  # add Sigma2(w[i-15])
000b0: fcaa 0031 ffe4          	    cp0ld.l (-28,%a2),&ADR+CAA          # add w[i-7]
000b6: fcaa 001a fff8          	    cp0ld.l (-8,%a2),&LDR+CA8           # w[i-2]
000bc: fc80 012b               	    cp0ld.l &HASH+HF2V                  # add Sigma1(w[i-2])
000c0: fd9a 0021               	    cp0st.l (%a2)+,&STR+CAA             # store w[i]
000c4: fc80 0059               	    cp0ld.l &ADRA+CA7                   # add h
000c8: fc80 0129               	    cp0ld.l &HASH+HF2T                  # add SIGMA1(e)
000cc: fc80 0126               	    cp0ld.l &HASH+HF2C                  # add Ch(e,f,g)
000d0: fc9b 0031               	    cp0ld.l (%a3)+,&ADR+CAA             # add k[i]
000d4: fc80 009a               	    cp0ld.l &MVAR+CA8                   # t1
000d8: fc80 0128               	    cp0ld.l &HASH+HF2S                  # add SIGMA0(e)
000dc: fc80 0127               	    cp0ld.l &HASH+HF2M                  # add Maj(a,b,c)
000e0: fc80 0150               	    cp0ld.l &SHS2                       # shift registers
                                
000e4: 5380                    	    subq.l  &1,%d0
000e6: 66b8                    	    bne.b   sha256_hash_n_L%2
                                
000e8: fc99 0032               	    cp0ld.l (%a1)+,&ADR+CA0             # add out[0] (= h[0])
000ec: fc99 0033               	    cp0ld.l (%a1)+,&ADR+CA1             # add out[1] (= h[1])
000f0: fc99 0034               	    cp0ld.l (%a1)+,&ADR+CA2             # add out[2] (= h[2])
000f4: fc99 0035               	    cp0ld.l (%a1)+,&ADR+CA3             # add out[3] (= h[3])
000f8: fc99 0036               	    cp0ld.l (%a1)+,&ADR+CA4             # add out[4] (= h[4])
000fc: fc99 0037               	    cp0ld.l (%a1)+,&ADR+CA5             # add out[5] (= h[5])
00100: fc99 0038               	    cp0ld.l (%a1)+,&ADR+CA6             # add out[6] (= h[6])
00104: fc99 0039               	    cp0ld.l (%a1)+,&ADR+CA7             # add out[7] (= h[7])
                                
00108: fda1 0029               	    cp0st.l -(%a1),&STR+CA7             # store out[7] (= h[7])
0010c: fda1 0028               	    cp0st.l -(%a1),&STR+CA6             # store out[6] (= h[6])
00110: fda1 0027               	    cp0st.l -(%a1),&STR+CA5             # store out[5] (= h[5])
00114: fda1 0026               	    cp0st.l -(%a1),&STR+CA4             # store out[4] (= h[4])
00118: fda1 0025               	    cp0st.l -(%a1),&STR+CA3             # store out[3] (= h[3])
0011c: fda1 0024               	    cp0st.l -(%a1),&STR+CA2             # store out[2] (= h[2])
00120: fda1 0023               	    cp0st.l -(%a1),&STR+CA1             # store out[1] (= h[1])
00124: fda1 0022               	    cp0st.l -(%a1),&STR+CA0             # store out[0] (= h[0])
                                
00128: 5387                    	    subq.l  &1,%d7
0012a: 6600 ff38               	    bne.w   sha256_hash_n_L%0
                                
0012e: 4cd7 0c80               	    movm.l  (%sp),&0x0c80               # restore d7/a2/a3
00132: 4fef 010c               	    lea     (268,%sp),%sp               # deallocate stack space
00136: 4e75                    	    rts
                                
                                
                                #*******************************************************************************
                                #*******************************************************************************
                                #
                                # SHA256: Updates SHA256 state variables for one or more input message blocks
                                #
                                #   arguments
                                #           *input      pointer to start of input message data
                                #           num_blks    number of 512-bit blocks to process
                                #           *output     pointer to 256-bit message digest output
                                #
                                #   NOTE    Input message and digest output blocks must not overlap
                                #
                                #   calling convention
                                #   void    cau_sha256_update (const unsigned int *input,
                                #                              const int          num_blks,
                                #                              unsigned int *output)
                                
                                    global  _cau_sha256_update
                                    global  cau_sha256_update
                                    align   4
                                _cau_sha256_update:
                                cau_sha256_update:
00138: 206f 000c               	    mov.l   (12,%sp),%a0                # get argument: *output
0013c: 43fa 0122               	    lea     (sha256_init_h.w,%pc),%a1   # pointer to initial data
                                
                                # copy initial data into hash output buffer (32 bytes = 8 longwords)
00140: 20d9                    	    mov.l   (%a1)+,(%a0)+
00142: 20d9                    	    mov.l   (%a1)+,(%a0)+
00144: 20d9                    	    mov.l   (%a1)+,(%a0)+
00146: 20d9                    	    mov.l   (%a1)+,(%a0)+
00148: 20d9                    	    mov.l   (%a1)+,(%a0)+
0014a: 20d9                    	    mov.l   (%a1)+,(%a0)+
0014c: 20d9                    	    mov.l   (%a1)+,(%a0)+
0014e: 20d9                    	    mov.l   (%a1)+,(%a0)+
                                
00150: 6000 feda               	    bra.w   cau_sha256_hash_n
                                
                                
                                #*******************************************************************************
                                #*******************************************************************************
                                #
                                # SHA256: Perform the hash for one input message block and generate the
                                #         message digest output
                                #
                                #   arguments
                                #           *input      pointer to start of input message data
                                #           *output     pointer to 256-bit message digest output
                                #
                                #   NOTE    Input message and digest output blocks must not overlap
                                #
                                #   calling convention
                                #   void    cau_sha256_hash (const unsigned int *input,
                                #                            unsigned int *output)
                                
                                    global  _cau_sha256_hash
                                    global  cau_sha256_hash
                                    align   4
                                _cau_sha256_hash:
                                cau_sha256_hash:
00154: 4fef fef8               	    lea     (-264,%sp),%sp              # allocate stack space: 2 regs, int w[64] array
                                
                                # the stack frame layout for this function is:
                                #   0(%sp)  saved %a2
                                #   4(%sp)  saved %a3
                                #   8(%sp)  local variable w[0] - array has 64 32-bit entries, 256 bytes total
                                # 264(%sp)  returnPC
                                # 268(%sp)  input argument 1 - pointer to message input[]
                                # 272(%sp)  input argument 2 - pointer to message digest output[]
                                
00158: 48d7 0c00               	    movm.l  &0x0c00,(%sp)               # save a2/a3
0015c: 47fa 0122               	    lea     (sha256_k.w,%pc),%a3        # pointer to k[]
00160: 206f 010c               	    mov.l   (268,%sp),%a0               # pointer to message input[]
00164: 45ef 0008               	    lea     (8,%sp),%a2                 # pointer to local array w[]
00168: 226f 0110               	    mov.l   (272,%sp),%a1               # pointer to message digest output[]
                                
                                # initialize the CAU data registers with the current contents of output[]
0016c: fc99 0012               	    cp0ld.l (%a1)+,&LDR+CA0             # output[0] = h[0]
00170: fc99 0013               	    cp0ld.l (%a1)+,&LDR+CA1             # output[1] = h[1]
00174: fc99 0014               	    cp0ld.l (%a1)+,&LDR+CA2             # output[2] = h[2]
00178: fc99 0015               	    cp0ld.l (%a1)+,&LDR+CA3             # output[3] = h[3]
0017c: fc99 0016               	    cp0ld.l (%a1)+,&LDR+CA4             # output[4] = h[4]
00180: fc99 0017               	    cp0ld.l (%a1)+,&LDR+CA5             # output[5] = h[5]
00184: fc99 0018               	    cp0ld.l (%a1)+,&LDR+CA6             # output[6] = h[6]
00188: fc99 0019               	    cp0ld.l (%a1)+,&LDR+CA7             # output[7] = h[7]
0018c: 43e9 ffe0               	    lea     (-32,%a1),%a1               # reset a1 back to output[0]
                                
00190: 7010                    	    movq    &16,%d0                     # set loop counter
                                    align   4
                                sha256_hash_L%1:
00194: 2218                    	    mov.l   (%a0)+,%d1                  # load m[i] into d1
00196: 24c1                    	    mov.l   %d1,(%a2)+                  # store m[i] into w[i]
00198: fc81 0011               	    cp0ld.l %d1,&LDR+CAA                # w[i] into CAA
0019c: fc80 0059               	    cp0ld.l &ADRA+CA7                   # add h
001a0: fc80 0129               	    cp0ld.l &HASH+HF2T                  # add SIGMA1(e)
001a4: fc80 0126               	    cp0ld.l &HASH+HF2C                  # add Ch(e,f,g)
001a8: fc9b 0031               	    cp0ld.l (%a3)+,&ADR+CAA             # add k[i]
001ac: fc80 009a               	    cp0ld.l &MVAR+CA8                   # t1
001b0: fc80 0128               	    cp0ld.l &HASH+HF2S                  # add SIGMA0(e)
001b4: fc80 0127               	    cp0ld.l &HASH+HF2M                  # add Maj(a,b,c)
001b8: fc80 0150               	    cp0ld.l &SHS2                       # shift registers
                                    
001bc: 5380                    	    subq.l  &1,%d0
001be: 6600 ffd4               	    bne.w   sha256_hash_L%1             # (to keep text aligned)
                                
001c2: 7030                    	    movq.l  &48,%d0                     # set loop counter
                                sha256_hash_L%2:
001c4: fcaa 0011 ffc0          	    cp0ld.l (-64,%a2),&LDR+CAA          # w[i-16]
001ca: fcaa 001a ffc4          	    cp0ld.l (-60,%a2),&LDR+CA8          # w[i-15]
001d0: fc80 012a               	    cp0ld.l &HASH+HF2U                  # add Sigma2(w[i-15])
001d4: fcaa 0031 ffe4          	    cp0ld.l (-28,%a2),&ADR+CAA          # add w[i-7]
001da: fcaa 001a fff8          	    cp0ld.l (-8,%a2),&LDR+CA8           # w[i-2]
001e0: fc80 012b               	    cp0ld.l &HASH+HF2V                  # add Sigma1(w[i-2])
001e4: fd9a 0021               	    cp0st.l (%a2)+,&STR+CAA             # store w[i]
001e8: fc80 0059               	    cp0ld.l &ADRA+CA7                   # add h
001ec: fc80 0129               	    cp0ld.l &HASH+HF2T                  # add SIGMA1(e)
001f0: fc80 0126               	    cp0ld.l &HASH+HF2C                  # add Ch(e,f,g)
001f4: fc9b 0031               	    cp0ld.l (%a3)+,&ADR+CAA             # add k[i]
001f8: fc80 009a               	    cp0ld.l &MVAR+CA8                   # t1
001fc: fc80 0128               	    cp0ld.l &HASH+HF2S                  # add SIGMA0(e)
00200: fc80 0127               	    cp0ld.l &HASH+HF2M                  # add Maj(a,b,c)
00204: fc80 0150               	    cp0ld.l &SHS2                       # shift registers
                                
00208: 5380                    	    subq.l  &1,%d0
0020a: 66b8                    	    bne.b   sha256_hash_L%2
                                
0020c: fc99 0032               	    cp0ld.l (%a1)+,&ADR+CA0             # add out[0] (= h[0])
00210: fc99 0033               	    cp0ld.l (%a1)+,&ADR+CA1             # add out[1] (= h[1])
00214: fc99 0034               	    cp0ld.l (%a1)+,&ADR+CA2             # add out[2] (= h[2])
00218: fc99 0035               	    cp0ld.l (%a1)+,&ADR+CA3             # add out[3] (= h[3])
0021c: fc99 0036               	    cp0ld.l (%a1)+,&ADR+CA4             # add out[4] (= h[4])
00220: fc99 0037               	    cp0ld.l (%a1)+,&ADR+CA5             # add out[5] (= h[5])
00224: fc99 0038               	    cp0ld.l (%a1)+,&ADR+CA6             # add out[6] (= h[6])
00228: fc99 0039               	    cp0ld.l (%a1)+,&ADR+CA7             # add out[7] (= h[7])
                                
0022c: fda1 0029               	    cp0st.l -(%a1),&STR+CA7             # store out[7] (= h[7])
00230: fda1 0028               	    cp0st.l -(%a1),&STR+CA6             # store out[6] (= h[6])
00234: fda1 0027               	    cp0st.l -(%a1),&STR+CA5             # store out[5] (= h[5])
00238: fda1 0026               	    cp0st.l -(%a1),&STR+CA4             # store out[4] (= h[4])
0023c: fda1 0025               	    cp0st.l -(%a1),&STR+CA3             # store out[3] (= h[3])
00240: fda1 0024               	    cp0st.l -(%a1),&STR+CA2             # store out[2] (= h[2])
00244: fda1 0023               	    cp0st.l -(%a1),&STR+CA1             # store out[1] (= h[1])
00248: fda1 0022               	    cp0st.l -(%a1),&STR+CA0             # store out[0] (= h[0])
                                
0024c: 4cd7 0c00               	    movm.l  (%sp),&0x0c00               # restore a2/a3
00250: 4fef 0108               	    lea     (264,%sp),%sp               # deallocate stack space
00254: 4e75                    	    rts
                                
                                
                                #*******************************************************************************
                                #*******************************************************************************
                                #
                                # CAU Constant Data
                                
                                    align   16
                                sha256_init_h:
00260: 6a09e667                     long    0x6a09e667                  # initialize h[0] = output[0]
00264: bb67ae85                     long    0xbb67ae85                  # initialize h[1] = output[1]
00268: 3c6ef372                     long    0x3c6ef372                  # initialize h[2] = output[2]
0026c: a54ff53a                     long    0xa54ff53a                  # initialize h[3] = output[3]
00270: 510e527f                     long    0x510e527f                  # initialize h[4] = output[4]
00274: 9b05688c                     long    0x9b05688c                  # initialize h[5] = output[5]
00278: 1f83d9ab                     long    0x1f83d9ab                  # initialize h[6] = output[6]
0027c: 5be0cd19                     long    0x5be0cd19                  # initialize h[7] = output[7]
                                
                                sha256_k:
00280: 428a2f98 71374491            long    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5
00288: b5c0fbcf e9b5dba5
00290: 3956c25b 59f111f1            long    0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5
00298: 923f82a4 ab1c5ed5
002a0: d807aa98 12835b01            long    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3
002a8: 243185be 550c7dc3
002b0: 72be5d74 80deb1fe            long    0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174
002b8: 9bdc06a7 c19bf174
002c0: e49b69c1 efbe4786            long    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc
002c8: 0fc19dc6 240ca1cc
002d0: 2de92c6f 4a7484aa            long    0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da
002d8: 5cb0a9dc 76f988da
002e0: 983e5152 a831c66d            long    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7
002e8: b00327c8 bf597fc7
002f0: c6e00bf3 d5a79147            long    0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967
002f8: 06ca6351 14292967
00300: 27b70a85 2e1b2138            long    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13
00308: 4d2c6dfc 53380d13
00310: 650a7354 766a0abb            long    0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85
00318: 81c2c92e 92722c85
00320: a2bfe8a1 a81a664b            long    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3
00328: c24b8b70 c76c51a3
00330: d192e819 d6990624            long    0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070
00338: f40e3585 106aa070
00340: 19a4c116 1e376c08            long    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5
00348: 2748774c 34b0bcb5
00350: 391c0cb3 4ed8aa4a            long    0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3
00358: 5b9cca4f 682e6ff3
00360: 748f82ee 78a5636f            long    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208
00368: 84c87814 8cc70208
00370: 90befffa a4506ceb            long    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
00378: bef9a3f7 c67178f2
