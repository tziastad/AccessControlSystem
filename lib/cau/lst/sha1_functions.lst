                                    set     CASR,0
                                    set     CAA,1
                                    set     CA0,2
                                    set     CA1,3
                                    set     CA2,4
                                    set     CA3,5
                                    set     CA4,6
                                    set     CA5,7
                                    set     CA6,8
                                    set     CA7,9
                                    set     CA8,10
                                    set     CNOP,0x000
                                    set     LDR,0x010
                                    set     STR,0x020
                                    set     ADR,0x030
                                    set     RADR,0x040
                                    set     ADRA,0x050
                                    set     XOR,0x060
                                    set     ROTL,0x070
                                    set     MVRA,0x080
                                    set     MVAR,0x090
                                    set     AESS,0x0a0
                                    set     AESIS,0x0b0
                                    set     AESC,0x0c0
                                    set     AESIC,0x0d0
                                    set     AESR,0x0e0
                                    set     AESIR,0x0f0
                                    set     DESR,0x100
                                    set     DESK,0x110
                                    set     HASH,0x120
                                    set     SHS,0x130
                                    set     MDS,0x140
                                    set     SHS2,0x150
                                    set     ILL,0x1f0
                                    set     IP,8
                                    set     FP,4
                                    set     DC,1
                                    set     CP,2
                                    set     KSL1,0
                                    set     KSL2,1
                                    set     KSR1,2
                                    set     KSR2,3
                                    set     HFF,0
                                    set     HFG,1
                                    set     HFH,2
                                    set     HFI,3
                                    set     HFP,2
                                    set     HFC,4
                                    set     HFM,5
                                    set     HF2C,6
                                    set     HF2M,7
                                    set     HF2S,8
                                    set     HF2T,9
                                    set     HF2U,10
                                    set     HF2V,11
                                
                                #*******************************************************************************
                                #*******************************************************************************
                                #
                                # NOTE: Code alignment for the CAU library functions in this file is carefully
                                # constructed to maximize processor performance. The existing alignment should
                                # be maintained for best results!!
                                #
                                # The individual code segments for the functions are presented first, followed
                                # by a common read-only data area containing the required data constants.
                                #
                                #*******************************************************************************
                                #*******************************************************************************
                                
                                
                                #*******************************************************************************
                                #*******************************************************************************
                                #
                                # SHA1: Initializes the SHA1 state variables
                                #
                                #   arguments
                                #           *sha1_state pointer to 160-bit block of SHA1 state variables:
                                #                           a,b,c,d,e
                                #
                                #   calling convention
                                #   void    cau_sha1_initialize_output (unsigned int *sha1_state)
                                
                                    global  _cau_sha1_initialize_output
                                    global  cau_sha1_initialize_output
                                    align   4
                                _cau_sha1_initialize_output:
                                cau_sha1_initialize_output:
00000: 206f 0004               	    mov.l   (4,%sp),%a0                 # get argument: *output
00004: 43fa 032a               	    lea     (sha1_init_h.w,%pc),%a1     # pointer to initial data
                                
                                # copy initial data into hash output buffer (20 bytes = 5 longwords)
00008: 20d9                    	    mov.l   (%a1)+,(%a0)+
0000a: 20d9                    	    mov.l   (%a1)+,(%a0)+
0000c: 20d9                    	    mov.l   (%a1)+,(%a0)+
0000e: 20d9                    	    mov.l   (%a1)+,(%a0)+
00010: 20d9                    	    mov.l   (%a1)+,(%a0)+
                                
00012: 4e75                    	    rts
                                
                                
                                #*******************************************************************************
                                #*******************************************************************************
                                #
                                # SHA1: Perform the hash for one or more input message blocks and generate the
                                #       message digest output
                                #
                                #   arguments
                                #           *msg_data   pointer to start of input message data
                                #           num_blks    number of 512-bit blocks to process
                                #           *sha1_state pointer to 160-bit block of SHA1 state variables:
                                #                           a,b,c,d,e
                                #
                                #   calling convention
                                #   void    cau_sha1_hash_n (const unsigned char *msg_data,
                                #                            const int            num_blks,
                                #                            unsigned int        *sha1_state)
                                
                                    global  _cau_sha1_hash_n
                                    global  cau_sha1_hash_n
                                    align   4
                                _cau_sha1_hash_n:
                                cau_sha1_hash_n:
00014: 4e56 fea4               	    link    %a6,&-348                   # temp stack space for 7 regs + w[*]
00018: 48d7 04fc               	    movm.l  &0x04fc,(%sp)               # save d2/d3/d4/d5/d6/d7/a2
0001c: 226e 0008               	    mov.l   (8,%a6),%a1                 # get 1st argument: *msg_data   = m[*]
00020: 222e 000c               	    mov.l   (12,%a6),%d1                # get 2nd argument: num_blks
00024: 246e 0010               	    mov.l   (16,%a6),%a2                # get 3rd argument: *sha1_state = h[*]
                                
00028: 41fa 0326               	    lea     (sha1_k.w,%pc),%a0          # pointer to k[*]
0002c: 4cd0 00f0               	    movm.l  (%a0),&0x00f0               # load k[i] into d4,d5,d6,d7
                                
00030: 7405                    	    movq.l  &5,%d2                      # for rotating by 5
00032: 7601                    	    movq.l  &1,%d3                      # for rotating by 1
                                
00034: fc9a 0012               	    cp0ld.l (%a2)+,&LDR+CA0             # h[0] -> CA0
00038: fc9a 0013               	    cp0ld.l (%a2)+,&LDR+CA1             # h[1] -> CA1
0003c: fc9a 0014               	    cp0ld.l (%a2)+,&LDR+CA2             # h[2] -> CA2
00040: fc9a 0015               	    cp0ld.l (%a2)+,&LDR+CA3             # h[3] -> CA3
00044: fc9a 0016               	    cp0ld.l (%a2)+,&LDR+CA4             # h[4] -> CA4
00048: 45ea ffec               	    lea     (-20,%a2),%a2               # reset a2 back to h[0]
                                
                                    align   4
                                cau_sha1_hash_n_L%0:
0004c: fc80 0082               	    cp0ld.l &MVRA+CA0                   # a
00050: fc82 0071               	    cp0ld.l %d2,&ROTL+CAA               # rotate by 5
                                
00054: 41ef 001c               	    lea     (28,%sp),%a0                # local stack frame pointer to w[*]
                                
00058: 7010                    	    movq.l  &16,%d0                     # set loop counter
                                cau_sha1_hash_n_L%1:
0005a: 2099                    	    mov.l   (%a1)+,(%a0)                # copy m[i] to w[i]
0005c: fc80 0124               	    cp0ld.l &HASH+HFC                   # add Ch(b,c,d)
00060: fc80 0056               	    cp0ld.l &ADRA+CA4                   # add e
00064: fc84 0031               	    cp0ld.l %d4,&ADR+CAA                # add k[0]
00068: fc98 0031               	    cp0ld.l (%a0)+,&ADR+CAA             # add w[i]
0006c: fc80 0130               	    cp0ld.l &SHS                        # shift registers
                                    
00070: 5380                    	    subq.l  &1,%d0                      # decrement local loop counter
00072: 6600 ffe6               	    bne.w   cau_sha1_hash_n_L%1         # (to keep text aligned)
                                
00076: 7004                    	    movq.l  &4,%d0                      # set loop counter
                                cau_sha1_hash_n_L%2:
00078: fc80 0124               	    cp0ld.l &HASH+HFC                   # add Ch(b,c,d)
0007c: fc80 0056               	    cp0ld.l &ADRA+CA4                   # add e
00080: fc84 0031               	    cp0ld.l %d4,&ADR+CAA                # add k[0]
00084: fca8 0017 ffc0          	    cp0ld.l (-64,%a0),&LDR+CA5          # w[i-16]
0008a: fca8 0067 ffc8          	    cp0ld.l (-56,%a0),&XOR+CA5          # w[i-14]
00090: fca8 0067 ffe0          	    cp0ld.l (-32,%a0),&XOR+CA5          # w[i-8]
00096: fca8 0067 fff4          	    cp0ld.l (-12,%a0),&XOR+CA5          # w[i-3]
0009c: fc83 0077               	    cp0ld.l %d3,&ROTL+CA5               # rotate by 1
000a0: fd98 0027               	    cp0st.l (%a0)+,&STR+CA5             # store w[i]
000a4: fc80 0057               	    cp0ld.l &ADRA+CA5                   # add w[i]
000a8: fc80 0130               	    cp0ld.l &SHS                        # shift registers
                                
000ac: 5380                    	    subq.l  &1,%d0                      # decrement local loop counter
000ae: 6600 ffc8               	    bne.w   cau_sha1_hash_n_L%2         # (to keep text aligned)
                                
000b2: 7014                    	    movq.l  &20,%d0                     # set loop counter
                                cau_sha1_hash_n_L%3:
000b4: fc80 0122               	    cp0ld.l &HASH+HFP                   # add Parity(b,c,d)
000b8: fc80 0056               	    cp0ld.l &ADRA+CA4                   # add e
000bc: fc85 0031               	    cp0ld.l %d5,&ADR+CAA                # add k[1]
000c0: fca8 0017 ffc0          	    cp0ld.l (-64,%a0),&LDR+CA5          # w[i-16]
000c6: fca8 0067 ffc8          	    cp0ld.l (-56,%a0),&XOR+CA5          # w[i-14]
000cc: fca8 0067 ffe0          	    cp0ld.l (-32,%a0),&XOR+CA5          # w[i-8]
000d2: fca8 0067 fff4          	    cp0ld.l (-12,%a0),&XOR+CA5          # w[i-3]
000d8: fc83 0077               	    cp0ld.l %d3,&ROTL+CA5               # rotate by 1
000dc: fd98 0027               	    cp0st.l (%a0)+,&STR+CA5             # store w[i]
000e0: fc80 0057               	    cp0ld.l &ADRA+CA5                   # add w[i]
000e4: fc80 0130               	    cp0ld.l &SHS                        # shift registers
                                    
000e8: 5380                    	    subq.l  &1,%d0                      # decrement local loop counter
000ea: 6600 ffc8               	    bne.w   cau_sha1_hash_n_L%3         # (to keep text aligned)
                                
000ee: 7014                    	    movq.l  &20,%d0                     # set loop counter
                                cau_sha1_hash_n_L%4:
000f0: fc80 0125               	    cp0ld.l &HASH+HFM                   # add Maj(b,c,d)
000f4: fc80 0056               	    cp0ld.l &ADRA+CA4                   # add e
000f8: fc86 0031               	    cp0ld.l %d6,&ADR+CAA                # add k[2]
000fc: fca8 0017 ffc0          	    cp0ld.l (-64,%a0),&LDR+CA5          # w[i-16]
00102: fca8 0067 ffc8          	    cp0ld.l (-56,%a0),&XOR+CA5          # w[i-14]
00108: fca8 0067 ffe0          	    cp0ld.l (-32,%a0),&XOR+CA5          # w[i-8]
0010e: fca8 0067 fff4          	    cp0ld.l (-12,%a0),&XOR+CA5          # w[i-3]
00114: fc83 0077               	    cp0ld.l %d3,&ROTL+CA5               # rotate by 1
00118: fd98 0027               	    cp0st.l (%a0)+,&STR+CA5             # store w[i]
0011c: fc80 0057               	    cp0ld.l &ADRA+CA5                   # add w[i]
00120: fc80 0130               	    cp0ld.l &SHS                        # shift registers
                                    
00124: 5380                    	    subq.l  &1,%d0                      # decrement local loop counter
00126: 6600 ffc8               	    bne.w   cau_sha1_hash_n_L%4         # (to keep text aligned)
                                
0012a: 7014                    	    movq.l  &20,%d0                     # set loop counter
                                cau_sha1_hash_n_L%5:
0012c: fc80 0122               	    cp0ld.l &HASH+HFP                   # add Parity(b,c,d)
00130: fc80 0056               	    cp0ld.l &ADRA+CA4                   # add e
00134: fc87 0031               	    cp0ld.l %d7,&ADR+CAA                # add k[3]
00138: fca8 0017 ffc0          	    cp0ld.l (-64,%a0),&LDR+CA5          # w[i-16]
0013e: fca8 0067 ffc8          	    cp0ld.l (-56,%a0),&XOR+CA5          # w[i-14]
00144: fca8 0067 ffe0          	    cp0ld.l (-32,%a0),&XOR+CA5          # w[i-8]
0014a: fca8 0067 fff4          	    cp0ld.l (-12,%a0),&XOR+CA5          # w[i-3]
00150: fc83 0077               	    cp0ld.l %d3,&ROTL+CA5               # rotate by 1
00154: fd98 0027               	    cp0st.l (%a0)+,&STR+CA5             # store w[i]
00158: fc80 0057               	    cp0ld.l &ADRA+CA5                   # add w[i]
0015c: fc80 0130               	    cp0ld.l &SHS                        # shift registers
                                    
00160: 5380                    	    subq.l  &1,%d0                      # decrement local loop counter
00162: 66c8                    	    bne.b   cau_sha1_hash_n_L%5
                                
00164: fc9a 0032               	    cp0ld.l (%a2)+,&ADR+CA0             # add h[0]
00168: fc9a 0033               	    cp0ld.l (%a2)+,&ADR+CA1             # add h[1]
0016c: fc9a 0034               	    cp0ld.l (%a2)+,&ADR+CA2             # add h[2]
00170: fc9a 0035               	    cp0ld.l (%a2)+,&ADR+CA3             # add h[3]
00174: fc9a 0036               	    cp0ld.l (%a2)+,&ADR+CA4             # add h[4]
                                
00178: fda2 0026               	    cp0st.l -(%a2),&STR+CA4             # store h[4]
0017c: fda2 0025               	    cp0st.l -(%a2),&STR+CA3             # store h[3]
00180: fda2 0024               	    cp0st.l -(%a2),&STR+CA2             # store h[2]
00184: fda2 0023               	    cp0st.l -(%a2),&STR+CA1             # store h[1]
00188: fda2 0022               	    cp0st.l -(%a2),&STR+CA0             # store h[0]
                                
0018c: 5381                    	    subq.l  &1,%d1                      # decrement block counter
0018e: 6600 febc               	    bne.w   cau_sha1_hash_n_L%0
                                
00192: 4cd7 04fc               	    movm.l  (%sp),&0x04fc               # restore d2/d3/d4/d5/d6/d7/a2
00196: 4e5e                    	    unlk    %a6
00198: 4e75                    	    rts
                                
                                
                                #*******************************************************************************
                                #*******************************************************************************
                                #
                                # SHA1: Updates SHA1 state variables for one or more input message blocks
                                #
                                #   arguments
                                #           *msg_data   pointer to start of input message data
                                #           num_blks    number of 512-bit blocks to process
                                #           *sha1_state pointer to 160-bit block of SHA1 state variables:
                                #                           a,b,c,d,e
                                #
                                #   calling convention
                                #   void    cau_sha1_update (const unsigned char *msg_data,
                                #                            const int            num_blks,
                                #                            unsigned int        *sha1_state)
                                
                                    global  _cau_sha1_update
                                    global  cau_sha1_update
                                    align   4
                                _cau_sha1_update:
                                cau_sha1_update:
0019c: 206f 000c               	    mov.l   (12,%sp),%a0                # get 3rd argument: *sha1_state = h[*]
001a0: 43fa 018e               	    lea     (sha1_init_h.w,%pc),%a1     # pointer to initial data
                                
                                # copy initial data into hash output buffer (20 bytes = 5 longwords)
001a4: 20d9                    	    mov.l   (%a1)+,(%a0)+
001a6: 20d9                    	    mov.l   (%a1)+,(%a0)+
001a8: 20d9                    	    mov.l   (%a1)+,(%a0)+
001aa: 20d9                    	    mov.l   (%a1)+,(%a0)+
001ac: 20d9                    	    mov.l   (%a1)+,(%a0)+
                                
001ae: 6000 fe64               	    bra.w   cau_sha1_hash_n
                                
                                
                                #*******************************************************************************
                                #*******************************************************************************
                                #
                                # SHA1: Perform the hash for one input message block and generate the
                                #       message digest output
                                #
                                #   arguments
                                #           *msg_data   pointer to start of input message data
                                #           *sha1_state pointer to 160-bit block of SHA1 state variables:
                                #                           a,b,c,d,e
                                #
                                #   calling convention
                                #   void    cau_sha1_hash (const unsigned char *msg_data,
                                #                          unsigned int        *sha1_state)
                                
                                    global  _cau_sha1_hash
                                    global  cau_sha1_hash
                                    align   4
                                _cau_sha1_hash:
                                cau_sha1_hash:
001b4: 4e56 fea8               	    link    %a6,&-344                   # temp stack space for 6 regs + w[*]
001b8: 48d7 04f8               	    movm.l  &0x04f8,(%sp)               # save d3/d4/d5/d6/d7/a2
001bc: 226e 0008               	    mov.l   (8,%a6),%a1                 # get 1st argument: *msg_data   = m[*]
001c0: 246e 000c               	    mov.l   (12,%a6),%a2                # get 2nd argument: *sha1_state = h[*]
                                
001c4: 41fa 018a               	    lea     (sha1_k.w,%pc),%a0          # pointer to k[*]
001c8: 4cd0 00f0               	    movm.l  (%a0),&0x00f0               # load k[i] into d4,d5,d6,d7
                                
001cc: 7205                    	    movq.l  &5,%d1                      # for rotating by 5
001ce: 7601                    	    movq.l  &1,%d3                      # for rotating by 1
                                
001d0: fc9a 0012               	    cp0ld.l (%a2)+,&LDR+CA0             # h[0] -> CA0
001d4: fc9a 0013               	    cp0ld.l (%a2)+,&LDR+CA1             # h[1] -> CA1
001d8: fc9a 0014               	    cp0ld.l (%a2)+,&LDR+CA2             # h[2] -> CA2
001dc: fc9a 0015               	    cp0ld.l (%a2)+,&LDR+CA3             # h[3] -> CA3
001e0: fc9a 0016               	    cp0ld.l (%a2)+,&LDR+CA4             # h[4] -> CA4
001e4: 45ea ffec               	    lea     (-20,%a2),%a2               # reset a2 back to h[0]
                                
001e8: fc80 0082               	    cp0ld.l &MVRA+CA0                   # a
001ec: fc81 0071               	    cp0ld.l %d1,&ROTL+CAA               # rotate by 5
                                
001f0: 41ef 0018               	    lea     (24,%sp),%a0                # local stack frame pointer to w[*]
001f4: 7010                    	    movq.l  &16,%d0
                                
                                cau_sha1_hash_L%1:
001f6: 2099                    	    mov.l   (%a1)+,(%a0)                # copy m[i] to w[i]
001f8: fc80 0124               	    cp0ld.l &HASH+HFC                   # add Ch(b,c,d)
001fc: fc80 0056               	    cp0ld.l &ADRA+CA4                   # add e
00200: fc84 0031               	    cp0ld.l %d4,&ADR+CAA                # add k[0]
00204: fc98 0031               	    cp0ld.l (%a0)+,&ADR+CAA             # add w[i]
00208: fc80 0130               	    cp0ld.l &SHS                        # shift registers
                                    
0020c: 5380                    	    subq.l  &1,%d0                      # decrement local loop counter
0020e: 6600 ffe6               	    bne.w   cau_sha1_hash_L%1           # (to keep text aligned)
                                
00212: 7004                    	    movq.l  &4,%d0                      # set loop counter
                                cau_sha1_hash_L%2:
00214: fc80 0124               	    cp0ld.l &HASH+HFC                   # add Ch(b,c,d)
00218: fc80 0056               	    cp0ld.l &ADRA+CA4                   # add e
0021c: fc84 0031               	    cp0ld.l %d4,&ADR+CAA                # add k[0]
00220: fca8 0017 ffc0          	    cp0ld.l (-64,%a0),&LDR+CA5          # w[i-16]
00226: fca8 0067 ffc8          	    cp0ld.l (-56,%a0),&XOR+CA5          # w[i-14]
0022c: fca8 0067 ffe0          	    cp0ld.l (-32,%a0),&XOR+CA5          # w[i-8]
00232: fca8 0067 fff4          	    cp0ld.l (-12,%a0),&XOR+CA5          # w[i-3]
00238: fc83 0077               	    cp0ld.l %d3,&ROTL+CA5               # rotate by 1
0023c: fd98 0027               	    cp0st.l (%a0)+,&STR+CA5             # store w[i]
00240: fc80 0057               	    cp0ld.l &ADRA+CA5                   # add w[i]
00244: fc80 0130               	    cp0ld.l &SHS                        # shift registers
                                
00248: 5380                    	    subq.l  &1,%d0                      # decrement local loop counter
0024a: 6600 ffc8               	    bne.w   cau_sha1_hash_L%2           # (to keep text aligned)
                                
0024e: 7014                    	    movq.l  &20,%d0                     # set loop counter
                                cau_sha1_hash_L%3:
00250: fc80 0122               	    cp0ld.l &HASH+HFP                   # add Parity(b,c,d)
00254: fc80 0056               	    cp0ld.l &ADRA+CA4                   # add e
00258: fc85 0031               	    cp0ld.l %d5,&ADR+CAA                # add k[1]
0025c: fca8 0017 ffc0          	    cp0ld.l (-64,%a0),&LDR+CA5          # w[i-16]
00262: fca8 0067 ffc8          	    cp0ld.l (-56,%a0),&XOR+CA5          # w[i-14]
00268: fca8 0067 ffe0          	    cp0ld.l (-32,%a0),&XOR+CA5          # w[i-8]
0026e: fca8 0067 fff4          	    cp0ld.l (-12,%a0),&XOR+CA5          # w[i-3]
00274: fc83 0077               	    cp0ld.l %d3,&ROTL+CA5               # rotate by 1
00278: fd98 0027               	    cp0st.l (%a0)+,&STR+CA5             # store w[i]
0027c: fc80 0057               	    cp0ld.l &ADRA+CA5                   # add w[i]
00280: fc80 0130               	    cp0ld.l &SHS                        # shift registers
                                    
00284: 5380                    	    subq.l  &1,%d0                      # decrement local loop counter
00286: 6600 ffc8               	    bne.w   cau_sha1_hash_L%3           # (to keep text aligned)
                                
0028a: 7014                    	    movq.l  &20,%d0                     # set loop counter
                                cau_sha1_hash_L%4:
0028c: fc80 0125               	    cp0ld.l &HASH+HFM                   # add Maj(b,c,d)
00290: fc80 0056               	    cp0ld.l &ADRA+CA4                   # add e
00294: fc86 0031               	    cp0ld.l %d6,&ADR+CAA                # add k[2]
00298: fca8 0017 ffc0          	    cp0ld.l (-64,%a0),&LDR+CA5          # w[i-16]
0029e: fca8 0067 ffc8          	    cp0ld.l (-56,%a0),&XOR+CA5          # w[i-14]
002a4: fca8 0067 ffe0          	    cp0ld.l (-32,%a0),&XOR+CA5          # w[i-8]
002aa: fca8 0067 fff4          	    cp0ld.l (-12,%a0),&XOR+CA5          # w[i-3]
002b0: fc83 0077               	    cp0ld.l %d3,&ROTL+CA5               # rotate by 1
002b4: fd98 0027               	    cp0st.l (%a0)+,&STR+CA5             # store w[i]
002b8: fc80 0057               	    cp0ld.l &ADRA+CA5                   # add w[i]
002bc: fc80 0130               	    cp0ld.l &SHS                        # shift registers
                                    
002c0: 5380                    	    subq.l  &1,%d0                      # decrement local loop counter
002c2: 6600 ffc8               	    bne.w   cau_sha1_hash_L%4           # (to keep text aligned)
                                
002c6: 7014                    	    movq.l  &20,%d0                     # set loop counter
                                cau_sha1_hash_L%5:
002c8: fc80 0122               	    cp0ld.l &HASH+HFP                   # add Parity(b,c,d)
002cc: fc80 0056               	    cp0ld.l &ADRA+CA4                   # add e
002d0: fc87 0031               	    cp0ld.l %d7,&ADR+CAA                # add k[3]
002d4: fca8 0017 ffc0          	    cp0ld.l (-64,%a0),&LDR+CA5          # w[i-16]
002da: fca8 0067 ffc8          	    cp0ld.l (-56,%a0),&XOR+CA5          # w[i-14]
002e0: fca8 0067 ffe0          	    cp0ld.l (-32,%a0),&XOR+CA5          # w[i-8]
002e6: fca8 0067 fff4          	    cp0ld.l (-12,%a0),&XOR+CA5          # w[i-3]
002ec: fc83 0077               	    cp0ld.l %d3,&ROTL+CA5               # rotate by 1
002f0: fd98 0027               	    cp0st.l (%a0)+,&STR+CA5             # store w[i]
002f4: fc80 0057               	    cp0ld.l &ADRA+CA5                   # add w[i]
002f8: fc80 0130               	    cp0ld.l &SHS                        # shift registers
                                    
002fc: 5380                    	    subq.l  &1,%d0                      # decrement local loop counter
002fe: 66c8                    	    bne.b   cau_sha1_hash_L%5
                                
00300: fc9a 0032               	    cp0ld.l (%a2)+,&ADR+CA0             # add h[0]
00304: fc9a 0033               	    cp0ld.l (%a2)+,&ADR+CA1             # add h[1]
00308: fc9a 0034               	    cp0ld.l (%a2)+,&ADR+CA2             # add h[2]
0030c: fc9a 0035               	    cp0ld.l (%a2)+,&ADR+CA3             # add h[3]
00310: fc9a 0036               	    cp0ld.l (%a2)+,&ADR+CA4             # add h[4]
                                
00314: fda2 0026               	    cp0st.l -(%a2),&STR+CA4             # store h[4]
00318: fda2 0025               	    cp0st.l -(%a2),&STR+CA3             # store h[3]
0031c: fda2 0024               	    cp0st.l -(%a2),&STR+CA2             # store h[2]
00320: fda2 0023               	    cp0st.l -(%a2),&STR+CA1             # store h[1]
00324: fda2 0022               	    cp0st.l -(%a2),&STR+CA0             # store h[0]
                                
00328: 4cd7 04f8               	    movm.l  (%sp),&0x04f8               # restore d3/d4/d5/d6/d7/a2
0032c: 4e5e                    	    unlk    %a6
0032e: 4e75                    	    rts
                                
                                
                                #*******************************************************************************
                                #*******************************************************************************
                                #
                                # CAU Constant Data
                                
                                    align   16
                                sha1_init_h:
00330: 67452301                     long    0x67452301                  # initialize h[0] = output[0]
00334: efcdab89                     long    0xefcdab89                  # initialize h[1] = output[1]
00338: 98badcfe                     long    0x98badcfe                  # initialize h[2] = output[2]
0033c: 10325476                     long    0x10325476                  # initialize h[3] = output[3]
00340: c3d2e1f0                     long    0xc3d2e1f0                  # initialize h[4] = output[4]
                                
                                    align   16
                                sha1_k:
00350: 5a827999 6ed9eba1            long    0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6
00358: 8f1bbcdc ca62c1d6
